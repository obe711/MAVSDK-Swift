//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: telemetry.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


///
/// Allow users to get vehicle telemetry and state information
/// (e.g. battery, GPS, RC connection, flight mode etc.) and set telemetry update rates.
///
/// Usage: instantiate `Mavsdk_Rpc_Telemetry_TelemetryServiceClient`, then call methods of this protocol to make API calls.
internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Mavsdk_Rpc_Telemetry_TelemetryServiceClientInterceptorFactoryProtocol? { get }

  func subscribePosition(
    _ request: Mavsdk_Rpc_Telemetry_SubscribePositionRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_PositionResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribePositionRequest, Mavsdk_Rpc_Telemetry_PositionResponse>

  func subscribeHome(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeHomeRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_HomeResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeHomeRequest, Mavsdk_Rpc_Telemetry_HomeResponse>

  func subscribeInAir(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeInAirRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_InAirResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeInAirRequest, Mavsdk_Rpc_Telemetry_InAirResponse>

  func subscribeLandedState(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeLandedStateRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_LandedStateResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeLandedStateRequest, Mavsdk_Rpc_Telemetry_LandedStateResponse>

  func subscribeArmed(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeArmedRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_ArmedResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeArmedRequest, Mavsdk_Rpc_Telemetry_ArmedResponse>

  func subscribeVtolState(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeVtolStateRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_VtolStateResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeVtolStateRequest, Mavsdk_Rpc_Telemetry_VtolStateResponse>

  func subscribeAttitudeQuaternion(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_AttitudeQuaternionResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest, Mavsdk_Rpc_Telemetry_AttitudeQuaternionResponse>

  func subscribeAttitudeEuler(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeAttitudeEulerRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_AttitudeEulerResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeAttitudeEulerRequest, Mavsdk_Rpc_Telemetry_AttitudeEulerResponse>

  func subscribeAttitudeAngularVelocityBody(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeAttitudeAngularVelocityBodyRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_AttitudeAngularVelocityBodyResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeAttitudeAngularVelocityBodyRequest, Mavsdk_Rpc_Telemetry_AttitudeAngularVelocityBodyResponse>

  func subscribeCameraAttitudeQuaternion(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest, Mavsdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse>

  func subscribeCameraAttitudeEuler(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_CameraAttitudeEulerResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest, Mavsdk_Rpc_Telemetry_CameraAttitudeEulerResponse>

  func subscribeVelocityNed(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeVelocityNedRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_VelocityNedResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeVelocityNedRequest, Mavsdk_Rpc_Telemetry_VelocityNedResponse>

  func subscribeGpsInfo(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeGpsInfoRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_GpsInfoResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeGpsInfoRequest, Mavsdk_Rpc_Telemetry_GpsInfoResponse>

  func subscribeRawGps(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeRawGpsRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_RawGpsResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeRawGpsRequest, Mavsdk_Rpc_Telemetry_RawGpsResponse>

  func subscribeBattery(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeBatteryRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_BatteryResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeBatteryRequest, Mavsdk_Rpc_Telemetry_BatteryResponse>

  func subscribeFlightMode(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeFlightModeRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_FlightModeResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeFlightModeRequest, Mavsdk_Rpc_Telemetry_FlightModeResponse>

  func subscribeHealth(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeHealthRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_HealthResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeHealthRequest, Mavsdk_Rpc_Telemetry_HealthResponse>

  func subscribeRcStatus(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeRcStatusRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_RcStatusResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeRcStatusRequest, Mavsdk_Rpc_Telemetry_RcStatusResponse>

  func subscribeStatusText(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeStatusTextRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_StatusTextResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeStatusTextRequest, Mavsdk_Rpc_Telemetry_StatusTextResponse>

  func subscribeActuatorControlTarget(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeActuatorControlTargetRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_ActuatorControlTargetResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeActuatorControlTargetRequest, Mavsdk_Rpc_Telemetry_ActuatorControlTargetResponse>

  func subscribeActuatorOutputStatus(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeActuatorOutputStatusRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_ActuatorOutputStatusResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeActuatorOutputStatusRequest, Mavsdk_Rpc_Telemetry_ActuatorOutputStatusResponse>

  func subscribeOdometry(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeOdometryRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_OdometryResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeOdometryRequest, Mavsdk_Rpc_Telemetry_OdometryResponse>

  func subscribePositionVelocityNed(
    _ request: Mavsdk_Rpc_Telemetry_SubscribePositionVelocityNedRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_PositionVelocityNedResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribePositionVelocityNedRequest, Mavsdk_Rpc_Telemetry_PositionVelocityNedResponse>

  func subscribeGroundTruth(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeGroundTruthRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_GroundTruthResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeGroundTruthRequest, Mavsdk_Rpc_Telemetry_GroundTruthResponse>

  func subscribeFixedwingMetrics(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeFixedwingMetricsRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_FixedwingMetricsResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeFixedwingMetricsRequest, Mavsdk_Rpc_Telemetry_FixedwingMetricsResponse>

  func subscribeImu(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeImuRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_ImuResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeImuRequest, Mavsdk_Rpc_Telemetry_ImuResponse>

  func subscribeScaledImu(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeScaledImuRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_ScaledImuResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeScaledImuRequest, Mavsdk_Rpc_Telemetry_ScaledImuResponse>

  func subscribeRawImu(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeRawImuRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_RawImuResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeRawImuRequest, Mavsdk_Rpc_Telemetry_RawImuResponse>

  func subscribeHealthAllOk(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeHealthAllOkRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_HealthAllOkResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeHealthAllOkRequest, Mavsdk_Rpc_Telemetry_HealthAllOkResponse>

  func subscribeUnixEpochTime(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeUnixEpochTimeRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_UnixEpochTimeResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeUnixEpochTimeRequest, Mavsdk_Rpc_Telemetry_UnixEpochTimeResponse>

  func subscribeDistanceSensor(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeDistanceSensorRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_DistanceSensorResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeDistanceSensorRequest, Mavsdk_Rpc_Telemetry_DistanceSensorResponse>

  func subscribeScaledPressure(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeScaledPressureRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_ScaledPressureResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeScaledPressureRequest, Mavsdk_Rpc_Telemetry_ScaledPressureResponse>

  func subscribeHeading(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeHeadingRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Telemetry_HeadingResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeHeadingRequest, Mavsdk_Rpc_Telemetry_HeadingResponse>

  func setRatePosition(
    _ request: Mavsdk_Rpc_Telemetry_SetRatePositionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRatePositionRequest, Mavsdk_Rpc_Telemetry_SetRatePositionResponse>

  func setRateHome(
    _ request: Mavsdk_Rpc_Telemetry_SetRateHomeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateHomeRequest, Mavsdk_Rpc_Telemetry_SetRateHomeResponse>

  func setRateInAir(
    _ request: Mavsdk_Rpc_Telemetry_SetRateInAirRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateInAirRequest, Mavsdk_Rpc_Telemetry_SetRateInAirResponse>

  func setRateLandedState(
    _ request: Mavsdk_Rpc_Telemetry_SetRateLandedStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateLandedStateRequest, Mavsdk_Rpc_Telemetry_SetRateLandedStateResponse>

  func setRateVtolState(
    _ request: Mavsdk_Rpc_Telemetry_SetRateVtolStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateVtolStateRequest, Mavsdk_Rpc_Telemetry_SetRateVtolStateResponse>

  func setRateAttitude(
    _ request: Mavsdk_Rpc_Telemetry_SetRateAttitudeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateAttitudeRequest, Mavsdk_Rpc_Telemetry_SetRateAttitudeResponse>

  func setRateCameraAttitude(
    _ request: Mavsdk_Rpc_Telemetry_SetRateCameraAttitudeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateCameraAttitudeRequest, Mavsdk_Rpc_Telemetry_SetRateCameraAttitudeResponse>

  func setRateVelocityNed(
    _ request: Mavsdk_Rpc_Telemetry_SetRateVelocityNedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateVelocityNedRequest, Mavsdk_Rpc_Telemetry_SetRateVelocityNedResponse>

  func setRateGpsInfo(
    _ request: Mavsdk_Rpc_Telemetry_SetRateGpsInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateGpsInfoRequest, Mavsdk_Rpc_Telemetry_SetRateGpsInfoResponse>

  func setRateBattery(
    _ request: Mavsdk_Rpc_Telemetry_SetRateBatteryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateBatteryRequest, Mavsdk_Rpc_Telemetry_SetRateBatteryResponse>

  func setRateRcStatus(
    _ request: Mavsdk_Rpc_Telemetry_SetRateRcStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateRcStatusRequest, Mavsdk_Rpc_Telemetry_SetRateRcStatusResponse>

  func setRateActuatorControlTarget(
    _ request: Mavsdk_Rpc_Telemetry_SetRateActuatorControlTargetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateActuatorControlTargetRequest, Mavsdk_Rpc_Telemetry_SetRateActuatorControlTargetResponse>

  func setRateActuatorOutputStatus(
    _ request: Mavsdk_Rpc_Telemetry_SetRateActuatorOutputStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateActuatorOutputStatusRequest, Mavsdk_Rpc_Telemetry_SetRateActuatorOutputStatusResponse>

  func setRateOdometry(
    _ request: Mavsdk_Rpc_Telemetry_SetRateOdometryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateOdometryRequest, Mavsdk_Rpc_Telemetry_SetRateOdometryResponse>

  func setRatePositionVelocityNed(
    _ request: Mavsdk_Rpc_Telemetry_SetRatePositionVelocityNedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRatePositionVelocityNedRequest, Mavsdk_Rpc_Telemetry_SetRatePositionVelocityNedResponse>

  func setRateGroundTruth(
    _ request: Mavsdk_Rpc_Telemetry_SetRateGroundTruthRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateGroundTruthRequest, Mavsdk_Rpc_Telemetry_SetRateGroundTruthResponse>

  func setRateFixedwingMetrics(
    _ request: Mavsdk_Rpc_Telemetry_SetRateFixedwingMetricsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateFixedwingMetricsRequest, Mavsdk_Rpc_Telemetry_SetRateFixedwingMetricsResponse>

  func setRateImu(
    _ request: Mavsdk_Rpc_Telemetry_SetRateImuRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateImuRequest, Mavsdk_Rpc_Telemetry_SetRateImuResponse>

  func setRateScaledImu(
    _ request: Mavsdk_Rpc_Telemetry_SetRateScaledImuRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateScaledImuRequest, Mavsdk_Rpc_Telemetry_SetRateScaledImuResponse>

  func setRateRawImu(
    _ request: Mavsdk_Rpc_Telemetry_SetRateRawImuRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateRawImuRequest, Mavsdk_Rpc_Telemetry_SetRateRawImuResponse>

  func setRateUnixEpochTime(
    _ request: Mavsdk_Rpc_Telemetry_SetRateUnixEpochTimeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateUnixEpochTimeRequest, Mavsdk_Rpc_Telemetry_SetRateUnixEpochTimeResponse>

  func setRateDistanceSensor(
    _ request: Mavsdk_Rpc_Telemetry_SetRateDistanceSensorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateDistanceSensorRequest, Mavsdk_Rpc_Telemetry_SetRateDistanceSensorResponse>

  func getGpsGlobalOrigin(
    _ request: Mavsdk_Rpc_Telemetry_GetGpsGlobalOriginRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_GetGpsGlobalOriginRequest, Mavsdk_Rpc_Telemetry_GetGpsGlobalOriginResponse>
}

extension Mavsdk_Rpc_Telemetry_TelemetryServiceClientProtocol {
  internal var serviceName: String {
    return "mavsdk.rpc.telemetry.TelemetryService"
  }

  /// Subscribe to 'position' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribePosition.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribePosition(
    _ request: Mavsdk_Rpc_Telemetry_SubscribePositionRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_PositionResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribePositionRequest, Mavsdk_Rpc_Telemetry_PositionResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribePosition",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribePositionInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'home position' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeHome.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeHome(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeHomeRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_HomeResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeHomeRequest, Mavsdk_Rpc_Telemetry_HomeResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeHome",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeHomeInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to in-air updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeInAir.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeInAir(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeInAirRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_InAirResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeInAirRequest, Mavsdk_Rpc_Telemetry_InAirResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeInAir",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInAirInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to landed state updates
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeLandedState.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeLandedState(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeLandedStateRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_LandedStateResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeLandedStateRequest, Mavsdk_Rpc_Telemetry_LandedStateResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeLandedState",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeLandedStateInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to armed updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeArmed.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeArmed(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeArmedRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_ArmedResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeArmedRequest, Mavsdk_Rpc_Telemetry_ArmedResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeArmed",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeArmedInterceptors() ?? [],
      handler: handler
    )
  }

  /// subscribe to vtol state Updates
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeVtolState.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeVtolState(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeVtolStateRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_VtolStateResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeVtolStateRequest, Mavsdk_Rpc_Telemetry_VtolStateResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeVtolState",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeVtolStateInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'attitude' updates (quaternion).
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeAttitudeQuaternion.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeAttitudeQuaternion(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_AttitudeQuaternionResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest, Mavsdk_Rpc_Telemetry_AttitudeQuaternionResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeAttitudeQuaternion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeAttitudeQuaternionInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'attitude' updates (Euler).
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeAttitudeEuler.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeAttitudeEuler(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeAttitudeEulerRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_AttitudeEulerResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeAttitudeEulerRequest, Mavsdk_Rpc_Telemetry_AttitudeEulerResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeAttitudeEuler",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeAttitudeEulerInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'attitude' updates (angular velocity)
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeAttitudeAngularVelocityBody.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeAttitudeAngularVelocityBody(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeAttitudeAngularVelocityBodyRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_AttitudeAngularVelocityBodyResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeAttitudeAngularVelocityBodyRequest, Mavsdk_Rpc_Telemetry_AttitudeAngularVelocityBodyResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeAttitudeAngularVelocityBody",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeAttitudeAngularVelocityBodyInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'camera attitude' updates (quaternion).
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeCameraAttitudeQuaternion.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeCameraAttitudeQuaternion(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest, Mavsdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeQuaternion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeCameraAttitudeQuaternionInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'camera attitude' updates (Euler).
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeCameraAttitudeEuler.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeCameraAttitudeEuler(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_CameraAttitudeEulerResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest, Mavsdk_Rpc_Telemetry_CameraAttitudeEulerResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeEuler",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeCameraAttitudeEulerInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'ground speed' updates (NED).
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeVelocityNed.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeVelocityNed(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeVelocityNedRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_VelocityNedResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeVelocityNedRequest, Mavsdk_Rpc_Telemetry_VelocityNedResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeVelocityNed",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeVelocityNedInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'GPS info' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeGpsInfo.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeGpsInfo(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeGpsInfoRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_GpsInfoResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeGpsInfoRequest, Mavsdk_Rpc_Telemetry_GpsInfoResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeGpsInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeGpsInfoInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'Raw GPS' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeRawGps.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeRawGps(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeRawGpsRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_RawGpsResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeRawGpsRequest, Mavsdk_Rpc_Telemetry_RawGpsResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeRawGps",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeRawGpsInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'battery' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeBattery.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeBattery(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeBatteryRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_BatteryResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeBatteryRequest, Mavsdk_Rpc_Telemetry_BatteryResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeBattery",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeBatteryInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'flight mode' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeFlightMode.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeFlightMode(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeFlightModeRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_FlightModeResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeFlightModeRequest, Mavsdk_Rpc_Telemetry_FlightModeResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeFlightMode",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeFlightModeInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'health' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeHealth.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeHealth(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeHealthRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_HealthResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeHealthRequest, Mavsdk_Rpc_Telemetry_HealthResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeHealth",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeHealthInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'RC status' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeRcStatus.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeRcStatus(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeRcStatusRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_RcStatusResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeRcStatusRequest, Mavsdk_Rpc_Telemetry_RcStatusResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeRcStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeRcStatusInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'status text' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeStatusText.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeStatusText(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeStatusTextRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_StatusTextResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeStatusTextRequest, Mavsdk_Rpc_Telemetry_StatusTextResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeStatusText",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeStatusTextInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'actuator control target' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeActuatorControlTarget.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeActuatorControlTarget(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeActuatorControlTargetRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_ActuatorControlTargetResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeActuatorControlTargetRequest, Mavsdk_Rpc_Telemetry_ActuatorControlTargetResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeActuatorControlTarget",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeActuatorControlTargetInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'actuator output status' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeActuatorOutputStatus.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeActuatorOutputStatus(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeActuatorOutputStatusRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_ActuatorOutputStatusResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeActuatorOutputStatusRequest, Mavsdk_Rpc_Telemetry_ActuatorOutputStatusResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeActuatorOutputStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeActuatorOutputStatusInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'odometry' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeOdometry.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeOdometry(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeOdometryRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_OdometryResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeOdometryRequest, Mavsdk_Rpc_Telemetry_OdometryResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeOdometry",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeOdometryInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'position velocity' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribePositionVelocityNed.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribePositionVelocityNed(
    _ request: Mavsdk_Rpc_Telemetry_SubscribePositionVelocityNedRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_PositionVelocityNedResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribePositionVelocityNedRequest, Mavsdk_Rpc_Telemetry_PositionVelocityNedResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribePositionVelocityNed",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribePositionVelocityNedInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'ground truth' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeGroundTruth.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeGroundTruth(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeGroundTruthRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_GroundTruthResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeGroundTruthRequest, Mavsdk_Rpc_Telemetry_GroundTruthResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeGroundTruth",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeGroundTruthInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'fixedwing metrics' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeFixedwingMetrics.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeFixedwingMetrics(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeFixedwingMetricsRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_FixedwingMetricsResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeFixedwingMetricsRequest, Mavsdk_Rpc_Telemetry_FixedwingMetricsResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeFixedwingMetrics",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeFixedwingMetricsInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'IMU' updates (in SI units in NED body frame).
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeImu.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeImu(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeImuRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_ImuResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeImuRequest, Mavsdk_Rpc_Telemetry_ImuResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeImu",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeImuInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'Scaled IMU' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeScaledImu.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeScaledImu(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeScaledImuRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_ScaledImuResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeScaledImuRequest, Mavsdk_Rpc_Telemetry_ScaledImuResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeScaledImu",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeScaledImuInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'Raw IMU' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeRawImu.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeRawImu(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeRawImuRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_RawImuResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeRawImuRequest, Mavsdk_Rpc_Telemetry_RawImuResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeRawImu",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeRawImuInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'HealthAllOk' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeHealthAllOk.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeHealthAllOk(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeHealthAllOkRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_HealthAllOkResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeHealthAllOkRequest, Mavsdk_Rpc_Telemetry_HealthAllOkResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeHealthAllOk",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeHealthAllOkInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'unix epoch time' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeUnixEpochTime.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeUnixEpochTime(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeUnixEpochTimeRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_UnixEpochTimeResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeUnixEpochTimeRequest, Mavsdk_Rpc_Telemetry_UnixEpochTimeResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeUnixEpochTime",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeUnixEpochTimeInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'Distance Sensor' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeDistanceSensor.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeDistanceSensor(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeDistanceSensorRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_DistanceSensorResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeDistanceSensorRequest, Mavsdk_Rpc_Telemetry_DistanceSensorResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeDistanceSensor",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeDistanceSensorInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'Scaled Pressure' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeScaledPressure.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeScaledPressure(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeScaledPressureRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_ScaledPressureResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeScaledPressureRequest, Mavsdk_Rpc_Telemetry_ScaledPressureResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeScaledPressure",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeScaledPressureInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to 'Heading' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeHeading.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeHeading(
    _ request: Mavsdk_Rpc_Telemetry_SubscribeHeadingRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Telemetry_HeadingResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Telemetry_SubscribeHeadingRequest, Mavsdk_Rpc_Telemetry_HeadingResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SubscribeHeading",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeHeadingInterceptors() ?? [],
      handler: handler
    )
  }

  /// Set rate to 'position' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRatePosition.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRatePosition(
    _ request: Mavsdk_Rpc_Telemetry_SetRatePositionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRatePositionRequest, Mavsdk_Rpc_Telemetry_SetRatePositionResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SetRatePosition",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRatePositionInterceptors() ?? []
    )
  }

  /// Set rate to 'home position' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRateHome.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRateHome(
    _ request: Mavsdk_Rpc_Telemetry_SetRateHomeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateHomeRequest, Mavsdk_Rpc_Telemetry_SetRateHomeResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SetRateHome",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRateHomeInterceptors() ?? []
    )
  }

  /// Set rate to in-air updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRateInAir.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRateInAir(
    _ request: Mavsdk_Rpc_Telemetry_SetRateInAirRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateInAirRequest, Mavsdk_Rpc_Telemetry_SetRateInAirResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SetRateInAir",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRateInAirInterceptors() ?? []
    )
  }

  /// Set rate to landed state updates
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRateLandedState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRateLandedState(
    _ request: Mavsdk_Rpc_Telemetry_SetRateLandedStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateLandedStateRequest, Mavsdk_Rpc_Telemetry_SetRateLandedStateResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SetRateLandedState",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRateLandedStateInterceptors() ?? []
    )
  }

  /// Set rate to VTOL state updates
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRateVtolState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRateVtolState(
    _ request: Mavsdk_Rpc_Telemetry_SetRateVtolStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateVtolStateRequest, Mavsdk_Rpc_Telemetry_SetRateVtolStateResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SetRateVtolState",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRateVtolStateInterceptors() ?? []
    )
  }

  /// Set rate to 'attitude' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRateAttitude.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRateAttitude(
    _ request: Mavsdk_Rpc_Telemetry_SetRateAttitudeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateAttitudeRequest, Mavsdk_Rpc_Telemetry_SetRateAttitudeResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SetRateAttitude",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRateAttitudeInterceptors() ?? []
    )
  }

  /// Set rate of camera attitude updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRateCameraAttitude.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRateCameraAttitude(
    _ request: Mavsdk_Rpc_Telemetry_SetRateCameraAttitudeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateCameraAttitudeRequest, Mavsdk_Rpc_Telemetry_SetRateCameraAttitudeResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SetRateCameraAttitude",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRateCameraAttitudeInterceptors() ?? []
    )
  }

  /// Set rate to 'ground speed' updates (NED).
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRateVelocityNed.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRateVelocityNed(
    _ request: Mavsdk_Rpc_Telemetry_SetRateVelocityNedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateVelocityNedRequest, Mavsdk_Rpc_Telemetry_SetRateVelocityNedResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SetRateVelocityNed",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRateVelocityNedInterceptors() ?? []
    )
  }

  /// Set rate to 'GPS info' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRateGpsInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRateGpsInfo(
    _ request: Mavsdk_Rpc_Telemetry_SetRateGpsInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateGpsInfoRequest, Mavsdk_Rpc_Telemetry_SetRateGpsInfoResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SetRateGpsInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRateGpsInfoInterceptors() ?? []
    )
  }

  /// Set rate to 'battery' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRateBattery.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRateBattery(
    _ request: Mavsdk_Rpc_Telemetry_SetRateBatteryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateBatteryRequest, Mavsdk_Rpc_Telemetry_SetRateBatteryResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SetRateBattery",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRateBatteryInterceptors() ?? []
    )
  }

  /// Set rate to 'RC status' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRateRcStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRateRcStatus(
    _ request: Mavsdk_Rpc_Telemetry_SetRateRcStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateRcStatusRequest, Mavsdk_Rpc_Telemetry_SetRateRcStatusResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SetRateRcStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRateRcStatusInterceptors() ?? []
    )
  }

  /// Set rate to 'actuator control target' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRateActuatorControlTarget.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRateActuatorControlTarget(
    _ request: Mavsdk_Rpc_Telemetry_SetRateActuatorControlTargetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateActuatorControlTargetRequest, Mavsdk_Rpc_Telemetry_SetRateActuatorControlTargetResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SetRateActuatorControlTarget",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRateActuatorControlTargetInterceptors() ?? []
    )
  }

  /// Set rate to 'actuator output status' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRateActuatorOutputStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRateActuatorOutputStatus(
    _ request: Mavsdk_Rpc_Telemetry_SetRateActuatorOutputStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateActuatorOutputStatusRequest, Mavsdk_Rpc_Telemetry_SetRateActuatorOutputStatusResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SetRateActuatorOutputStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRateActuatorOutputStatusInterceptors() ?? []
    )
  }

  /// Set rate to 'odometry' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRateOdometry.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRateOdometry(
    _ request: Mavsdk_Rpc_Telemetry_SetRateOdometryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateOdometryRequest, Mavsdk_Rpc_Telemetry_SetRateOdometryResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SetRateOdometry",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRateOdometryInterceptors() ?? []
    )
  }

  /// Set rate to 'position velocity' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRatePositionVelocityNed.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRatePositionVelocityNed(
    _ request: Mavsdk_Rpc_Telemetry_SetRatePositionVelocityNedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRatePositionVelocityNedRequest, Mavsdk_Rpc_Telemetry_SetRatePositionVelocityNedResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SetRatePositionVelocityNed",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRatePositionVelocityNedInterceptors() ?? []
    )
  }

  /// Set rate to 'ground truth' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRateGroundTruth.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRateGroundTruth(
    _ request: Mavsdk_Rpc_Telemetry_SetRateGroundTruthRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateGroundTruthRequest, Mavsdk_Rpc_Telemetry_SetRateGroundTruthResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SetRateGroundTruth",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRateGroundTruthInterceptors() ?? []
    )
  }

  /// Set rate to 'fixedwing metrics' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRateFixedwingMetrics.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRateFixedwingMetrics(
    _ request: Mavsdk_Rpc_Telemetry_SetRateFixedwingMetricsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateFixedwingMetricsRequest, Mavsdk_Rpc_Telemetry_SetRateFixedwingMetricsResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SetRateFixedwingMetrics",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRateFixedwingMetricsInterceptors() ?? []
    )
  }

  /// Set rate to 'IMU' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRateImu.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRateImu(
    _ request: Mavsdk_Rpc_Telemetry_SetRateImuRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateImuRequest, Mavsdk_Rpc_Telemetry_SetRateImuResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SetRateImu",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRateImuInterceptors() ?? []
    )
  }

  /// Set rate to 'Scaled IMU' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRateScaledImu.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRateScaledImu(
    _ request: Mavsdk_Rpc_Telemetry_SetRateScaledImuRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateScaledImuRequest, Mavsdk_Rpc_Telemetry_SetRateScaledImuResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SetRateScaledImu",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRateScaledImuInterceptors() ?? []
    )
  }

  /// Set rate to 'Raw IMU' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRateRawImu.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRateRawImu(
    _ request: Mavsdk_Rpc_Telemetry_SetRateRawImuRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateRawImuRequest, Mavsdk_Rpc_Telemetry_SetRateRawImuResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SetRateRawImu",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRateRawImuInterceptors() ?? []
    )
  }

  /// Set rate to 'unix epoch time' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRateUnixEpochTime.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRateUnixEpochTime(
    _ request: Mavsdk_Rpc_Telemetry_SetRateUnixEpochTimeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateUnixEpochTimeRequest, Mavsdk_Rpc_Telemetry_SetRateUnixEpochTimeResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SetRateUnixEpochTime",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRateUnixEpochTimeInterceptors() ?? []
    )
  }

  /// Set rate to 'Distance Sensor' updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRateDistanceSensor.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRateDistanceSensor(
    _ request: Mavsdk_Rpc_Telemetry_SetRateDistanceSensorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_SetRateDistanceSensorRequest, Mavsdk_Rpc_Telemetry_SetRateDistanceSensorResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/SetRateDistanceSensor",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRateDistanceSensorInterceptors() ?? []
    )
  }

  /// Get the GPS location of where the estimator has been initialized.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetGpsGlobalOrigin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getGpsGlobalOrigin(
    _ request: Mavsdk_Rpc_Telemetry_GetGpsGlobalOriginRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Telemetry_GetGpsGlobalOriginRequest, Mavsdk_Rpc_Telemetry_GetGpsGlobalOriginResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.telemetry.TelemetryService/GetGpsGlobalOrigin",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetGpsGlobalOriginInterceptors() ?? []
    )
  }
}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'subscribePosition'.
  func makeSubscribePositionInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribePositionRequest, Mavsdk_Rpc_Telemetry_PositionResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeHome'.
  func makeSubscribeHomeInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeHomeRequest, Mavsdk_Rpc_Telemetry_HomeResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeInAir'.
  func makeSubscribeInAirInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeInAirRequest, Mavsdk_Rpc_Telemetry_InAirResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeLandedState'.
  func makeSubscribeLandedStateInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeLandedStateRequest, Mavsdk_Rpc_Telemetry_LandedStateResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeArmed'.
  func makeSubscribeArmedInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeArmedRequest, Mavsdk_Rpc_Telemetry_ArmedResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeVtolState'.
  func makeSubscribeVtolStateInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeVtolStateRequest, Mavsdk_Rpc_Telemetry_VtolStateResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeAttitudeQuaternion'.
  func makeSubscribeAttitudeQuaternionInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest, Mavsdk_Rpc_Telemetry_AttitudeQuaternionResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeAttitudeEuler'.
  func makeSubscribeAttitudeEulerInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeAttitudeEulerRequest, Mavsdk_Rpc_Telemetry_AttitudeEulerResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeAttitudeAngularVelocityBody'.
  func makeSubscribeAttitudeAngularVelocityBodyInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeAttitudeAngularVelocityBodyRequest, Mavsdk_Rpc_Telemetry_AttitudeAngularVelocityBodyResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeCameraAttitudeQuaternion'.
  func makeSubscribeCameraAttitudeQuaternionInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest, Mavsdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeCameraAttitudeEuler'.
  func makeSubscribeCameraAttitudeEulerInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest, Mavsdk_Rpc_Telemetry_CameraAttitudeEulerResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeVelocityNed'.
  func makeSubscribeVelocityNedInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeVelocityNedRequest, Mavsdk_Rpc_Telemetry_VelocityNedResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeGpsInfo'.
  func makeSubscribeGpsInfoInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeGpsInfoRequest, Mavsdk_Rpc_Telemetry_GpsInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeRawGps'.
  func makeSubscribeRawGpsInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeRawGpsRequest, Mavsdk_Rpc_Telemetry_RawGpsResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeBattery'.
  func makeSubscribeBatteryInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeBatteryRequest, Mavsdk_Rpc_Telemetry_BatteryResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeFlightMode'.
  func makeSubscribeFlightModeInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeFlightModeRequest, Mavsdk_Rpc_Telemetry_FlightModeResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeHealth'.
  func makeSubscribeHealthInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeHealthRequest, Mavsdk_Rpc_Telemetry_HealthResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeRcStatus'.
  func makeSubscribeRcStatusInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeRcStatusRequest, Mavsdk_Rpc_Telemetry_RcStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeStatusText'.
  func makeSubscribeStatusTextInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeStatusTextRequest, Mavsdk_Rpc_Telemetry_StatusTextResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeActuatorControlTarget'.
  func makeSubscribeActuatorControlTargetInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeActuatorControlTargetRequest, Mavsdk_Rpc_Telemetry_ActuatorControlTargetResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeActuatorOutputStatus'.
  func makeSubscribeActuatorOutputStatusInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeActuatorOutputStatusRequest, Mavsdk_Rpc_Telemetry_ActuatorOutputStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeOdometry'.
  func makeSubscribeOdometryInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeOdometryRequest, Mavsdk_Rpc_Telemetry_OdometryResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribePositionVelocityNed'.
  func makeSubscribePositionVelocityNedInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribePositionVelocityNedRequest, Mavsdk_Rpc_Telemetry_PositionVelocityNedResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeGroundTruth'.
  func makeSubscribeGroundTruthInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeGroundTruthRequest, Mavsdk_Rpc_Telemetry_GroundTruthResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeFixedwingMetrics'.
  func makeSubscribeFixedwingMetricsInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeFixedwingMetricsRequest, Mavsdk_Rpc_Telemetry_FixedwingMetricsResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeImu'.
  func makeSubscribeImuInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeImuRequest, Mavsdk_Rpc_Telemetry_ImuResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeScaledImu'.
  func makeSubscribeScaledImuInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeScaledImuRequest, Mavsdk_Rpc_Telemetry_ScaledImuResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeRawImu'.
  func makeSubscribeRawImuInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeRawImuRequest, Mavsdk_Rpc_Telemetry_RawImuResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeHealthAllOk'.
  func makeSubscribeHealthAllOkInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeHealthAllOkRequest, Mavsdk_Rpc_Telemetry_HealthAllOkResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeUnixEpochTime'.
  func makeSubscribeUnixEpochTimeInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeUnixEpochTimeRequest, Mavsdk_Rpc_Telemetry_UnixEpochTimeResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeDistanceSensor'.
  func makeSubscribeDistanceSensorInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeDistanceSensorRequest, Mavsdk_Rpc_Telemetry_DistanceSensorResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeScaledPressure'.
  func makeSubscribeScaledPressureInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeScaledPressureRequest, Mavsdk_Rpc_Telemetry_ScaledPressureResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeHeading'.
  func makeSubscribeHeadingInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SubscribeHeadingRequest, Mavsdk_Rpc_Telemetry_HeadingResponse>]

  /// - Returns: Interceptors to use when invoking 'setRatePosition'.
  func makeSetRatePositionInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SetRatePositionRequest, Mavsdk_Rpc_Telemetry_SetRatePositionResponse>]

  /// - Returns: Interceptors to use when invoking 'setRateHome'.
  func makeSetRateHomeInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SetRateHomeRequest, Mavsdk_Rpc_Telemetry_SetRateHomeResponse>]

  /// - Returns: Interceptors to use when invoking 'setRateInAir'.
  func makeSetRateInAirInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SetRateInAirRequest, Mavsdk_Rpc_Telemetry_SetRateInAirResponse>]

  /// - Returns: Interceptors to use when invoking 'setRateLandedState'.
  func makeSetRateLandedStateInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SetRateLandedStateRequest, Mavsdk_Rpc_Telemetry_SetRateLandedStateResponse>]

  /// - Returns: Interceptors to use when invoking 'setRateVtolState'.
  func makeSetRateVtolStateInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SetRateVtolStateRequest, Mavsdk_Rpc_Telemetry_SetRateVtolStateResponse>]

  /// - Returns: Interceptors to use when invoking 'setRateAttitude'.
  func makeSetRateAttitudeInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SetRateAttitudeRequest, Mavsdk_Rpc_Telemetry_SetRateAttitudeResponse>]

  /// - Returns: Interceptors to use when invoking 'setRateCameraAttitude'.
  func makeSetRateCameraAttitudeInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SetRateCameraAttitudeRequest, Mavsdk_Rpc_Telemetry_SetRateCameraAttitudeResponse>]

  /// - Returns: Interceptors to use when invoking 'setRateVelocityNed'.
  func makeSetRateVelocityNedInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SetRateVelocityNedRequest, Mavsdk_Rpc_Telemetry_SetRateVelocityNedResponse>]

  /// - Returns: Interceptors to use when invoking 'setRateGpsInfo'.
  func makeSetRateGpsInfoInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SetRateGpsInfoRequest, Mavsdk_Rpc_Telemetry_SetRateGpsInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'setRateBattery'.
  func makeSetRateBatteryInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SetRateBatteryRequest, Mavsdk_Rpc_Telemetry_SetRateBatteryResponse>]

  /// - Returns: Interceptors to use when invoking 'setRateRcStatus'.
  func makeSetRateRcStatusInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SetRateRcStatusRequest, Mavsdk_Rpc_Telemetry_SetRateRcStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'setRateActuatorControlTarget'.
  func makeSetRateActuatorControlTargetInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SetRateActuatorControlTargetRequest, Mavsdk_Rpc_Telemetry_SetRateActuatorControlTargetResponse>]

  /// - Returns: Interceptors to use when invoking 'setRateActuatorOutputStatus'.
  func makeSetRateActuatorOutputStatusInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SetRateActuatorOutputStatusRequest, Mavsdk_Rpc_Telemetry_SetRateActuatorOutputStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'setRateOdometry'.
  func makeSetRateOdometryInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SetRateOdometryRequest, Mavsdk_Rpc_Telemetry_SetRateOdometryResponse>]

  /// - Returns: Interceptors to use when invoking 'setRatePositionVelocityNed'.
  func makeSetRatePositionVelocityNedInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SetRatePositionVelocityNedRequest, Mavsdk_Rpc_Telemetry_SetRatePositionVelocityNedResponse>]

  /// - Returns: Interceptors to use when invoking 'setRateGroundTruth'.
  func makeSetRateGroundTruthInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SetRateGroundTruthRequest, Mavsdk_Rpc_Telemetry_SetRateGroundTruthResponse>]

  /// - Returns: Interceptors to use when invoking 'setRateFixedwingMetrics'.
  func makeSetRateFixedwingMetricsInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SetRateFixedwingMetricsRequest, Mavsdk_Rpc_Telemetry_SetRateFixedwingMetricsResponse>]

  /// - Returns: Interceptors to use when invoking 'setRateImu'.
  func makeSetRateImuInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SetRateImuRequest, Mavsdk_Rpc_Telemetry_SetRateImuResponse>]

  /// - Returns: Interceptors to use when invoking 'setRateScaledImu'.
  func makeSetRateScaledImuInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SetRateScaledImuRequest, Mavsdk_Rpc_Telemetry_SetRateScaledImuResponse>]

  /// - Returns: Interceptors to use when invoking 'setRateRawImu'.
  func makeSetRateRawImuInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SetRateRawImuRequest, Mavsdk_Rpc_Telemetry_SetRateRawImuResponse>]

  /// - Returns: Interceptors to use when invoking 'setRateUnixEpochTime'.
  func makeSetRateUnixEpochTimeInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SetRateUnixEpochTimeRequest, Mavsdk_Rpc_Telemetry_SetRateUnixEpochTimeResponse>]

  /// - Returns: Interceptors to use when invoking 'setRateDistanceSensor'.
  func makeSetRateDistanceSensorInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_SetRateDistanceSensorRequest, Mavsdk_Rpc_Telemetry_SetRateDistanceSensorResponse>]

  /// - Returns: Interceptors to use when invoking 'getGpsGlobalOrigin'.
  func makeGetGpsGlobalOriginInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Telemetry_GetGpsGlobalOriginRequest, Mavsdk_Rpc_Telemetry_GetGpsGlobalOriginResponse>]
}

internal final class Mavsdk_Rpc_Telemetry_TelemetryServiceClient: Mavsdk_Rpc_Telemetry_TelemetryServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Mavsdk_Rpc_Telemetry_TelemetryServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the mavsdk.rpc.telemetry.TelemetryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Mavsdk_Rpc_Telemetry_TelemetryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///
/// Allow users to get vehicle telemetry and state information
/// (e.g. battery, GPS, RC connection, flight mode etc.) and set telemetry update rates.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceProvider: CallHandlerProvider {
  var interceptors: Mavsdk_Rpc_Telemetry_TelemetryServiceServerInterceptorFactoryProtocol? { get }

  /// Subscribe to 'position' updates.
  func subscribePosition(request: Mavsdk_Rpc_Telemetry_SubscribePositionRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_PositionResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'home position' updates.
  func subscribeHome(request: Mavsdk_Rpc_Telemetry_SubscribeHomeRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_HomeResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to in-air updates.
  func subscribeInAir(request: Mavsdk_Rpc_Telemetry_SubscribeInAirRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_InAirResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to landed state updates
  func subscribeLandedState(request: Mavsdk_Rpc_Telemetry_SubscribeLandedStateRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_LandedStateResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to armed updates.
  func subscribeArmed(request: Mavsdk_Rpc_Telemetry_SubscribeArmedRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_ArmedResponse>) -> EventLoopFuture<GRPCStatus>

  /// subscribe to vtol state Updates
  func subscribeVtolState(request: Mavsdk_Rpc_Telemetry_SubscribeVtolStateRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_VtolStateResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'attitude' updates (quaternion).
  func subscribeAttitudeQuaternion(request: Mavsdk_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_AttitudeQuaternionResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'attitude' updates (Euler).
  func subscribeAttitudeEuler(request: Mavsdk_Rpc_Telemetry_SubscribeAttitudeEulerRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_AttitudeEulerResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'attitude' updates (angular velocity)
  func subscribeAttitudeAngularVelocityBody(request: Mavsdk_Rpc_Telemetry_SubscribeAttitudeAngularVelocityBodyRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_AttitudeAngularVelocityBodyResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'camera attitude' updates (quaternion).
  func subscribeCameraAttitudeQuaternion(request: Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'camera attitude' updates (Euler).
  func subscribeCameraAttitudeEuler(request: Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_CameraAttitudeEulerResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'ground speed' updates (NED).
  func subscribeVelocityNed(request: Mavsdk_Rpc_Telemetry_SubscribeVelocityNedRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_VelocityNedResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'GPS info' updates.
  func subscribeGpsInfo(request: Mavsdk_Rpc_Telemetry_SubscribeGpsInfoRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_GpsInfoResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'Raw GPS' updates.
  func subscribeRawGps(request: Mavsdk_Rpc_Telemetry_SubscribeRawGpsRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_RawGpsResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'battery' updates.
  func subscribeBattery(request: Mavsdk_Rpc_Telemetry_SubscribeBatteryRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_BatteryResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'flight mode' updates.
  func subscribeFlightMode(request: Mavsdk_Rpc_Telemetry_SubscribeFlightModeRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_FlightModeResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'health' updates.
  func subscribeHealth(request: Mavsdk_Rpc_Telemetry_SubscribeHealthRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_HealthResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'RC status' updates.
  func subscribeRcStatus(request: Mavsdk_Rpc_Telemetry_SubscribeRcStatusRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_RcStatusResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'status text' updates.
  func subscribeStatusText(request: Mavsdk_Rpc_Telemetry_SubscribeStatusTextRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_StatusTextResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'actuator control target' updates.
  func subscribeActuatorControlTarget(request: Mavsdk_Rpc_Telemetry_SubscribeActuatorControlTargetRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_ActuatorControlTargetResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'actuator output status' updates.
  func subscribeActuatorOutputStatus(request: Mavsdk_Rpc_Telemetry_SubscribeActuatorOutputStatusRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_ActuatorOutputStatusResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'odometry' updates.
  func subscribeOdometry(request: Mavsdk_Rpc_Telemetry_SubscribeOdometryRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_OdometryResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'position velocity' updates.
  func subscribePositionVelocityNed(request: Mavsdk_Rpc_Telemetry_SubscribePositionVelocityNedRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_PositionVelocityNedResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'ground truth' updates.
  func subscribeGroundTruth(request: Mavsdk_Rpc_Telemetry_SubscribeGroundTruthRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_GroundTruthResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'fixedwing metrics' updates.
  func subscribeFixedwingMetrics(request: Mavsdk_Rpc_Telemetry_SubscribeFixedwingMetricsRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_FixedwingMetricsResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'IMU' updates (in SI units in NED body frame).
  func subscribeImu(request: Mavsdk_Rpc_Telemetry_SubscribeImuRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_ImuResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'Scaled IMU' updates.
  func subscribeScaledImu(request: Mavsdk_Rpc_Telemetry_SubscribeScaledImuRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_ScaledImuResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'Raw IMU' updates.
  func subscribeRawImu(request: Mavsdk_Rpc_Telemetry_SubscribeRawImuRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_RawImuResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'HealthAllOk' updates.
  func subscribeHealthAllOk(request: Mavsdk_Rpc_Telemetry_SubscribeHealthAllOkRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_HealthAllOkResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'unix epoch time' updates.
  func subscribeUnixEpochTime(request: Mavsdk_Rpc_Telemetry_SubscribeUnixEpochTimeRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_UnixEpochTimeResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'Distance Sensor' updates.
  func subscribeDistanceSensor(request: Mavsdk_Rpc_Telemetry_SubscribeDistanceSensorRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_DistanceSensorResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'Scaled Pressure' updates.
  func subscribeScaledPressure(request: Mavsdk_Rpc_Telemetry_SubscribeScaledPressureRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_ScaledPressureResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to 'Heading' updates.
  func subscribeHeading(request: Mavsdk_Rpc_Telemetry_SubscribeHeadingRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Telemetry_HeadingResponse>) -> EventLoopFuture<GRPCStatus>

  /// Set rate to 'position' updates.
  func setRatePosition(request: Mavsdk_Rpc_Telemetry_SetRatePositionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Telemetry_SetRatePositionResponse>

  /// Set rate to 'home position' updates.
  func setRateHome(request: Mavsdk_Rpc_Telemetry_SetRateHomeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Telemetry_SetRateHomeResponse>

  /// Set rate to in-air updates.
  func setRateInAir(request: Mavsdk_Rpc_Telemetry_SetRateInAirRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Telemetry_SetRateInAirResponse>

  /// Set rate to landed state updates
  func setRateLandedState(request: Mavsdk_Rpc_Telemetry_SetRateLandedStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Telemetry_SetRateLandedStateResponse>

  /// Set rate to VTOL state updates
  func setRateVtolState(request: Mavsdk_Rpc_Telemetry_SetRateVtolStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Telemetry_SetRateVtolStateResponse>

  /// Set rate to 'attitude' updates.
  func setRateAttitude(request: Mavsdk_Rpc_Telemetry_SetRateAttitudeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Telemetry_SetRateAttitudeResponse>

  /// Set rate of camera attitude updates.
  func setRateCameraAttitude(request: Mavsdk_Rpc_Telemetry_SetRateCameraAttitudeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Telemetry_SetRateCameraAttitudeResponse>

  /// Set rate to 'ground speed' updates (NED).
  func setRateVelocityNed(request: Mavsdk_Rpc_Telemetry_SetRateVelocityNedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Telemetry_SetRateVelocityNedResponse>

  /// Set rate to 'GPS info' updates.
  func setRateGpsInfo(request: Mavsdk_Rpc_Telemetry_SetRateGpsInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Telemetry_SetRateGpsInfoResponse>

  /// Set rate to 'battery' updates.
  func setRateBattery(request: Mavsdk_Rpc_Telemetry_SetRateBatteryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Telemetry_SetRateBatteryResponse>

  /// Set rate to 'RC status' updates.
  func setRateRcStatus(request: Mavsdk_Rpc_Telemetry_SetRateRcStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Telemetry_SetRateRcStatusResponse>

  /// Set rate to 'actuator control target' updates.
  func setRateActuatorControlTarget(request: Mavsdk_Rpc_Telemetry_SetRateActuatorControlTargetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Telemetry_SetRateActuatorControlTargetResponse>

  /// Set rate to 'actuator output status' updates.
  func setRateActuatorOutputStatus(request: Mavsdk_Rpc_Telemetry_SetRateActuatorOutputStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Telemetry_SetRateActuatorOutputStatusResponse>

  /// Set rate to 'odometry' updates.
  func setRateOdometry(request: Mavsdk_Rpc_Telemetry_SetRateOdometryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Telemetry_SetRateOdometryResponse>

  /// Set rate to 'position velocity' updates.
  func setRatePositionVelocityNed(request: Mavsdk_Rpc_Telemetry_SetRatePositionVelocityNedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Telemetry_SetRatePositionVelocityNedResponse>

  /// Set rate to 'ground truth' updates.
  func setRateGroundTruth(request: Mavsdk_Rpc_Telemetry_SetRateGroundTruthRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Telemetry_SetRateGroundTruthResponse>

  /// Set rate to 'fixedwing metrics' updates.
  func setRateFixedwingMetrics(request: Mavsdk_Rpc_Telemetry_SetRateFixedwingMetricsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Telemetry_SetRateFixedwingMetricsResponse>

  /// Set rate to 'IMU' updates.
  func setRateImu(request: Mavsdk_Rpc_Telemetry_SetRateImuRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Telemetry_SetRateImuResponse>

  /// Set rate to 'Scaled IMU' updates.
  func setRateScaledImu(request: Mavsdk_Rpc_Telemetry_SetRateScaledImuRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Telemetry_SetRateScaledImuResponse>

  /// Set rate to 'Raw IMU' updates.
  func setRateRawImu(request: Mavsdk_Rpc_Telemetry_SetRateRawImuRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Telemetry_SetRateRawImuResponse>

  /// Set rate to 'unix epoch time' updates.
  func setRateUnixEpochTime(request: Mavsdk_Rpc_Telemetry_SetRateUnixEpochTimeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Telemetry_SetRateUnixEpochTimeResponse>

  /// Set rate to 'Distance Sensor' updates.
  func setRateDistanceSensor(request: Mavsdk_Rpc_Telemetry_SetRateDistanceSensorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Telemetry_SetRateDistanceSensorResponse>

  /// Get the GPS location of where the estimator has been initialized.
  func getGpsGlobalOrigin(request: Mavsdk_Rpc_Telemetry_GetGpsGlobalOriginRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Telemetry_GetGpsGlobalOriginResponse>
}

extension Mavsdk_Rpc_Telemetry_TelemetryServiceProvider {
  internal var serviceName: Substring { return "mavsdk.rpc.telemetry.TelemetryService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SubscribePosition":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribePositionRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_PositionResponse>(),
        interceptors: self.interceptors?.makeSubscribePositionInterceptors() ?? [],
        userFunction: self.subscribePosition(request:context:)
      )

    case "SubscribeHome":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeHomeRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_HomeResponse>(),
        interceptors: self.interceptors?.makeSubscribeHomeInterceptors() ?? [],
        userFunction: self.subscribeHome(request:context:)
      )

    case "SubscribeInAir":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeInAirRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_InAirResponse>(),
        interceptors: self.interceptors?.makeSubscribeInAirInterceptors() ?? [],
        userFunction: self.subscribeInAir(request:context:)
      )

    case "SubscribeLandedState":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeLandedStateRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_LandedStateResponse>(),
        interceptors: self.interceptors?.makeSubscribeLandedStateInterceptors() ?? [],
        userFunction: self.subscribeLandedState(request:context:)
      )

    case "SubscribeArmed":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeArmedRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_ArmedResponse>(),
        interceptors: self.interceptors?.makeSubscribeArmedInterceptors() ?? [],
        userFunction: self.subscribeArmed(request:context:)
      )

    case "SubscribeVtolState":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeVtolStateRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_VtolStateResponse>(),
        interceptors: self.interceptors?.makeSubscribeVtolStateInterceptors() ?? [],
        userFunction: self.subscribeVtolState(request:context:)
      )

    case "SubscribeAttitudeQuaternion":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_AttitudeQuaternionResponse>(),
        interceptors: self.interceptors?.makeSubscribeAttitudeQuaternionInterceptors() ?? [],
        userFunction: self.subscribeAttitudeQuaternion(request:context:)
      )

    case "SubscribeAttitudeEuler":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeAttitudeEulerRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_AttitudeEulerResponse>(),
        interceptors: self.interceptors?.makeSubscribeAttitudeEulerInterceptors() ?? [],
        userFunction: self.subscribeAttitudeEuler(request:context:)
      )

    case "SubscribeAttitudeAngularVelocityBody":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeAttitudeAngularVelocityBodyRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_AttitudeAngularVelocityBodyResponse>(),
        interceptors: self.interceptors?.makeSubscribeAttitudeAngularVelocityBodyInterceptors() ?? [],
        userFunction: self.subscribeAttitudeAngularVelocityBody(request:context:)
      )

    case "SubscribeCameraAttitudeQuaternion":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse>(),
        interceptors: self.interceptors?.makeSubscribeCameraAttitudeQuaternionInterceptors() ?? [],
        userFunction: self.subscribeCameraAttitudeQuaternion(request:context:)
      )

    case "SubscribeCameraAttitudeEuler":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_CameraAttitudeEulerResponse>(),
        interceptors: self.interceptors?.makeSubscribeCameraAttitudeEulerInterceptors() ?? [],
        userFunction: self.subscribeCameraAttitudeEuler(request:context:)
      )

    case "SubscribeVelocityNed":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeVelocityNedRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_VelocityNedResponse>(),
        interceptors: self.interceptors?.makeSubscribeVelocityNedInterceptors() ?? [],
        userFunction: self.subscribeVelocityNed(request:context:)
      )

    case "SubscribeGpsInfo":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeGpsInfoRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_GpsInfoResponse>(),
        interceptors: self.interceptors?.makeSubscribeGpsInfoInterceptors() ?? [],
        userFunction: self.subscribeGpsInfo(request:context:)
      )

    case "SubscribeRawGps":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeRawGpsRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_RawGpsResponse>(),
        interceptors: self.interceptors?.makeSubscribeRawGpsInterceptors() ?? [],
        userFunction: self.subscribeRawGps(request:context:)
      )

    case "SubscribeBattery":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeBatteryRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_BatteryResponse>(),
        interceptors: self.interceptors?.makeSubscribeBatteryInterceptors() ?? [],
        userFunction: self.subscribeBattery(request:context:)
      )

    case "SubscribeFlightMode":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeFlightModeRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_FlightModeResponse>(),
        interceptors: self.interceptors?.makeSubscribeFlightModeInterceptors() ?? [],
        userFunction: self.subscribeFlightMode(request:context:)
      )

    case "SubscribeHealth":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeHealthRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_HealthResponse>(),
        interceptors: self.interceptors?.makeSubscribeHealthInterceptors() ?? [],
        userFunction: self.subscribeHealth(request:context:)
      )

    case "SubscribeRcStatus":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeRcStatusRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_RcStatusResponse>(),
        interceptors: self.interceptors?.makeSubscribeRcStatusInterceptors() ?? [],
        userFunction: self.subscribeRcStatus(request:context:)
      )

    case "SubscribeStatusText":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeStatusTextRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_StatusTextResponse>(),
        interceptors: self.interceptors?.makeSubscribeStatusTextInterceptors() ?? [],
        userFunction: self.subscribeStatusText(request:context:)
      )

    case "SubscribeActuatorControlTarget":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeActuatorControlTargetRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_ActuatorControlTargetResponse>(),
        interceptors: self.interceptors?.makeSubscribeActuatorControlTargetInterceptors() ?? [],
        userFunction: self.subscribeActuatorControlTarget(request:context:)
      )

    case "SubscribeActuatorOutputStatus":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeActuatorOutputStatusRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_ActuatorOutputStatusResponse>(),
        interceptors: self.interceptors?.makeSubscribeActuatorOutputStatusInterceptors() ?? [],
        userFunction: self.subscribeActuatorOutputStatus(request:context:)
      )

    case "SubscribeOdometry":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeOdometryRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_OdometryResponse>(),
        interceptors: self.interceptors?.makeSubscribeOdometryInterceptors() ?? [],
        userFunction: self.subscribeOdometry(request:context:)
      )

    case "SubscribePositionVelocityNed":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribePositionVelocityNedRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_PositionVelocityNedResponse>(),
        interceptors: self.interceptors?.makeSubscribePositionVelocityNedInterceptors() ?? [],
        userFunction: self.subscribePositionVelocityNed(request:context:)
      )

    case "SubscribeGroundTruth":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeGroundTruthRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_GroundTruthResponse>(),
        interceptors: self.interceptors?.makeSubscribeGroundTruthInterceptors() ?? [],
        userFunction: self.subscribeGroundTruth(request:context:)
      )

    case "SubscribeFixedwingMetrics":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeFixedwingMetricsRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_FixedwingMetricsResponse>(),
        interceptors: self.interceptors?.makeSubscribeFixedwingMetricsInterceptors() ?? [],
        userFunction: self.subscribeFixedwingMetrics(request:context:)
      )

    case "SubscribeImu":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeImuRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_ImuResponse>(),
        interceptors: self.interceptors?.makeSubscribeImuInterceptors() ?? [],
        userFunction: self.subscribeImu(request:context:)
      )

    case "SubscribeScaledImu":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeScaledImuRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_ScaledImuResponse>(),
        interceptors: self.interceptors?.makeSubscribeScaledImuInterceptors() ?? [],
        userFunction: self.subscribeScaledImu(request:context:)
      )

    case "SubscribeRawImu":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeRawImuRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_RawImuResponse>(),
        interceptors: self.interceptors?.makeSubscribeRawImuInterceptors() ?? [],
        userFunction: self.subscribeRawImu(request:context:)
      )

    case "SubscribeHealthAllOk":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeHealthAllOkRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_HealthAllOkResponse>(),
        interceptors: self.interceptors?.makeSubscribeHealthAllOkInterceptors() ?? [],
        userFunction: self.subscribeHealthAllOk(request:context:)
      )

    case "SubscribeUnixEpochTime":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeUnixEpochTimeRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_UnixEpochTimeResponse>(),
        interceptors: self.interceptors?.makeSubscribeUnixEpochTimeInterceptors() ?? [],
        userFunction: self.subscribeUnixEpochTime(request:context:)
      )

    case "SubscribeDistanceSensor":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeDistanceSensorRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_DistanceSensorResponse>(),
        interceptors: self.interceptors?.makeSubscribeDistanceSensorInterceptors() ?? [],
        userFunction: self.subscribeDistanceSensor(request:context:)
      )

    case "SubscribeScaledPressure":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeScaledPressureRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_ScaledPressureResponse>(),
        interceptors: self.interceptors?.makeSubscribeScaledPressureInterceptors() ?? [],
        userFunction: self.subscribeScaledPressure(request:context:)
      )

    case "SubscribeHeading":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SubscribeHeadingRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_HeadingResponse>(),
        interceptors: self.interceptors?.makeSubscribeHeadingInterceptors() ?? [],
        userFunction: self.subscribeHeading(request:context:)
      )

    case "SetRatePosition":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SetRatePositionRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_SetRatePositionResponse>(),
        interceptors: self.interceptors?.makeSetRatePositionInterceptors() ?? [],
        userFunction: self.setRatePosition(request:context:)
      )

    case "SetRateHome":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SetRateHomeRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_SetRateHomeResponse>(),
        interceptors: self.interceptors?.makeSetRateHomeInterceptors() ?? [],
        userFunction: self.setRateHome(request:context:)
      )

    case "SetRateInAir":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SetRateInAirRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_SetRateInAirResponse>(),
        interceptors: self.interceptors?.makeSetRateInAirInterceptors() ?? [],
        userFunction: self.setRateInAir(request:context:)
      )

    case "SetRateLandedState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SetRateLandedStateRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_SetRateLandedStateResponse>(),
        interceptors: self.interceptors?.makeSetRateLandedStateInterceptors() ?? [],
        userFunction: self.setRateLandedState(request:context:)
      )

    case "SetRateVtolState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SetRateVtolStateRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_SetRateVtolStateResponse>(),
        interceptors: self.interceptors?.makeSetRateVtolStateInterceptors() ?? [],
        userFunction: self.setRateVtolState(request:context:)
      )

    case "SetRateAttitude":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SetRateAttitudeRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_SetRateAttitudeResponse>(),
        interceptors: self.interceptors?.makeSetRateAttitudeInterceptors() ?? [],
        userFunction: self.setRateAttitude(request:context:)
      )

    case "SetRateCameraAttitude":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SetRateCameraAttitudeRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_SetRateCameraAttitudeResponse>(),
        interceptors: self.interceptors?.makeSetRateCameraAttitudeInterceptors() ?? [],
        userFunction: self.setRateCameraAttitude(request:context:)
      )

    case "SetRateVelocityNed":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SetRateVelocityNedRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_SetRateVelocityNedResponse>(),
        interceptors: self.interceptors?.makeSetRateVelocityNedInterceptors() ?? [],
        userFunction: self.setRateVelocityNed(request:context:)
      )

    case "SetRateGpsInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SetRateGpsInfoRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_SetRateGpsInfoResponse>(),
        interceptors: self.interceptors?.makeSetRateGpsInfoInterceptors() ?? [],
        userFunction: self.setRateGpsInfo(request:context:)
      )

    case "SetRateBattery":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SetRateBatteryRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_SetRateBatteryResponse>(),
        interceptors: self.interceptors?.makeSetRateBatteryInterceptors() ?? [],
        userFunction: self.setRateBattery(request:context:)
      )

    case "SetRateRcStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SetRateRcStatusRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_SetRateRcStatusResponse>(),
        interceptors: self.interceptors?.makeSetRateRcStatusInterceptors() ?? [],
        userFunction: self.setRateRcStatus(request:context:)
      )

    case "SetRateActuatorControlTarget":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SetRateActuatorControlTargetRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_SetRateActuatorControlTargetResponse>(),
        interceptors: self.interceptors?.makeSetRateActuatorControlTargetInterceptors() ?? [],
        userFunction: self.setRateActuatorControlTarget(request:context:)
      )

    case "SetRateActuatorOutputStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SetRateActuatorOutputStatusRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_SetRateActuatorOutputStatusResponse>(),
        interceptors: self.interceptors?.makeSetRateActuatorOutputStatusInterceptors() ?? [],
        userFunction: self.setRateActuatorOutputStatus(request:context:)
      )

    case "SetRateOdometry":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SetRateOdometryRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_SetRateOdometryResponse>(),
        interceptors: self.interceptors?.makeSetRateOdometryInterceptors() ?? [],
        userFunction: self.setRateOdometry(request:context:)
      )

    case "SetRatePositionVelocityNed":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SetRatePositionVelocityNedRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_SetRatePositionVelocityNedResponse>(),
        interceptors: self.interceptors?.makeSetRatePositionVelocityNedInterceptors() ?? [],
        userFunction: self.setRatePositionVelocityNed(request:context:)
      )

    case "SetRateGroundTruth":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SetRateGroundTruthRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_SetRateGroundTruthResponse>(),
        interceptors: self.interceptors?.makeSetRateGroundTruthInterceptors() ?? [],
        userFunction: self.setRateGroundTruth(request:context:)
      )

    case "SetRateFixedwingMetrics":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SetRateFixedwingMetricsRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_SetRateFixedwingMetricsResponse>(),
        interceptors: self.interceptors?.makeSetRateFixedwingMetricsInterceptors() ?? [],
        userFunction: self.setRateFixedwingMetrics(request:context:)
      )

    case "SetRateImu":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SetRateImuRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_SetRateImuResponse>(),
        interceptors: self.interceptors?.makeSetRateImuInterceptors() ?? [],
        userFunction: self.setRateImu(request:context:)
      )

    case "SetRateScaledImu":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SetRateScaledImuRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_SetRateScaledImuResponse>(),
        interceptors: self.interceptors?.makeSetRateScaledImuInterceptors() ?? [],
        userFunction: self.setRateScaledImu(request:context:)
      )

    case "SetRateRawImu":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SetRateRawImuRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_SetRateRawImuResponse>(),
        interceptors: self.interceptors?.makeSetRateRawImuInterceptors() ?? [],
        userFunction: self.setRateRawImu(request:context:)
      )

    case "SetRateUnixEpochTime":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SetRateUnixEpochTimeRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_SetRateUnixEpochTimeResponse>(),
        interceptors: self.interceptors?.makeSetRateUnixEpochTimeInterceptors() ?? [],
        userFunction: self.setRateUnixEpochTime(request:context:)
      )

    case "SetRateDistanceSensor":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_SetRateDistanceSensorRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_SetRateDistanceSensorResponse>(),
        interceptors: self.interceptors?.makeSetRateDistanceSensorInterceptors() ?? [],
        userFunction: self.setRateDistanceSensor(request:context:)
      )

    case "GetGpsGlobalOrigin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Telemetry_GetGpsGlobalOriginRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Telemetry_GetGpsGlobalOriginResponse>(),
        interceptors: self.interceptors?.makeGetGpsGlobalOriginInterceptors() ?? [],
        userFunction: self.getGpsGlobalOrigin(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'subscribePosition'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribePositionInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribePositionRequest, Mavsdk_Rpc_Telemetry_PositionResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeHome'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeHomeInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeHomeRequest, Mavsdk_Rpc_Telemetry_HomeResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeInAir'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeInAirInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeInAirRequest, Mavsdk_Rpc_Telemetry_InAirResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeLandedState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeLandedStateInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeLandedStateRequest, Mavsdk_Rpc_Telemetry_LandedStateResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeArmed'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeArmedInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeArmedRequest, Mavsdk_Rpc_Telemetry_ArmedResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeVtolState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeVtolStateInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeVtolStateRequest, Mavsdk_Rpc_Telemetry_VtolStateResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeAttitudeQuaternion'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeAttitudeQuaternionInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest, Mavsdk_Rpc_Telemetry_AttitudeQuaternionResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeAttitudeEuler'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeAttitudeEulerInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeAttitudeEulerRequest, Mavsdk_Rpc_Telemetry_AttitudeEulerResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeAttitudeAngularVelocityBody'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeAttitudeAngularVelocityBodyInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeAttitudeAngularVelocityBodyRequest, Mavsdk_Rpc_Telemetry_AttitudeAngularVelocityBodyResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeCameraAttitudeQuaternion'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeCameraAttitudeQuaternionInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest, Mavsdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeCameraAttitudeEuler'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeCameraAttitudeEulerInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest, Mavsdk_Rpc_Telemetry_CameraAttitudeEulerResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeVelocityNed'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeVelocityNedInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeVelocityNedRequest, Mavsdk_Rpc_Telemetry_VelocityNedResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeGpsInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeGpsInfoInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeGpsInfoRequest, Mavsdk_Rpc_Telemetry_GpsInfoResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeRawGps'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeRawGpsInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeRawGpsRequest, Mavsdk_Rpc_Telemetry_RawGpsResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeBattery'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeBatteryInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeBatteryRequest, Mavsdk_Rpc_Telemetry_BatteryResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeFlightMode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeFlightModeInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeFlightModeRequest, Mavsdk_Rpc_Telemetry_FlightModeResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeHealth'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeHealthInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeHealthRequest, Mavsdk_Rpc_Telemetry_HealthResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeRcStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeRcStatusInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeRcStatusRequest, Mavsdk_Rpc_Telemetry_RcStatusResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeStatusText'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeStatusTextInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeStatusTextRequest, Mavsdk_Rpc_Telemetry_StatusTextResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeActuatorControlTarget'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeActuatorControlTargetInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeActuatorControlTargetRequest, Mavsdk_Rpc_Telemetry_ActuatorControlTargetResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeActuatorOutputStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeActuatorOutputStatusInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeActuatorOutputStatusRequest, Mavsdk_Rpc_Telemetry_ActuatorOutputStatusResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeOdometry'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeOdometryInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeOdometryRequest, Mavsdk_Rpc_Telemetry_OdometryResponse>]

  /// - Returns: Interceptors to use when handling 'subscribePositionVelocityNed'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribePositionVelocityNedInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribePositionVelocityNedRequest, Mavsdk_Rpc_Telemetry_PositionVelocityNedResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeGroundTruth'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeGroundTruthInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeGroundTruthRequest, Mavsdk_Rpc_Telemetry_GroundTruthResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeFixedwingMetrics'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeFixedwingMetricsInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeFixedwingMetricsRequest, Mavsdk_Rpc_Telemetry_FixedwingMetricsResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeImu'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeImuInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeImuRequest, Mavsdk_Rpc_Telemetry_ImuResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeScaledImu'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeScaledImuInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeScaledImuRequest, Mavsdk_Rpc_Telemetry_ScaledImuResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeRawImu'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeRawImuInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeRawImuRequest, Mavsdk_Rpc_Telemetry_RawImuResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeHealthAllOk'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeHealthAllOkInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeHealthAllOkRequest, Mavsdk_Rpc_Telemetry_HealthAllOkResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeUnixEpochTime'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeUnixEpochTimeInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeUnixEpochTimeRequest, Mavsdk_Rpc_Telemetry_UnixEpochTimeResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeDistanceSensor'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeDistanceSensorInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeDistanceSensorRequest, Mavsdk_Rpc_Telemetry_DistanceSensorResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeScaledPressure'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeScaledPressureInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeScaledPressureRequest, Mavsdk_Rpc_Telemetry_ScaledPressureResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeHeading'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeHeadingInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SubscribeHeadingRequest, Mavsdk_Rpc_Telemetry_HeadingResponse>]

  /// - Returns: Interceptors to use when handling 'setRatePosition'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetRatePositionInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SetRatePositionRequest, Mavsdk_Rpc_Telemetry_SetRatePositionResponse>]

  /// - Returns: Interceptors to use when handling 'setRateHome'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetRateHomeInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SetRateHomeRequest, Mavsdk_Rpc_Telemetry_SetRateHomeResponse>]

  /// - Returns: Interceptors to use when handling 'setRateInAir'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetRateInAirInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SetRateInAirRequest, Mavsdk_Rpc_Telemetry_SetRateInAirResponse>]

  /// - Returns: Interceptors to use when handling 'setRateLandedState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetRateLandedStateInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SetRateLandedStateRequest, Mavsdk_Rpc_Telemetry_SetRateLandedStateResponse>]

  /// - Returns: Interceptors to use when handling 'setRateVtolState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetRateVtolStateInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SetRateVtolStateRequest, Mavsdk_Rpc_Telemetry_SetRateVtolStateResponse>]

  /// - Returns: Interceptors to use when handling 'setRateAttitude'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetRateAttitudeInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SetRateAttitudeRequest, Mavsdk_Rpc_Telemetry_SetRateAttitudeResponse>]

  /// - Returns: Interceptors to use when handling 'setRateCameraAttitude'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetRateCameraAttitudeInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SetRateCameraAttitudeRequest, Mavsdk_Rpc_Telemetry_SetRateCameraAttitudeResponse>]

  /// - Returns: Interceptors to use when handling 'setRateVelocityNed'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetRateVelocityNedInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SetRateVelocityNedRequest, Mavsdk_Rpc_Telemetry_SetRateVelocityNedResponse>]

  /// - Returns: Interceptors to use when handling 'setRateGpsInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetRateGpsInfoInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SetRateGpsInfoRequest, Mavsdk_Rpc_Telemetry_SetRateGpsInfoResponse>]

  /// - Returns: Interceptors to use when handling 'setRateBattery'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetRateBatteryInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SetRateBatteryRequest, Mavsdk_Rpc_Telemetry_SetRateBatteryResponse>]

  /// - Returns: Interceptors to use when handling 'setRateRcStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetRateRcStatusInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SetRateRcStatusRequest, Mavsdk_Rpc_Telemetry_SetRateRcStatusResponse>]

  /// - Returns: Interceptors to use when handling 'setRateActuatorControlTarget'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetRateActuatorControlTargetInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SetRateActuatorControlTargetRequest, Mavsdk_Rpc_Telemetry_SetRateActuatorControlTargetResponse>]

  /// - Returns: Interceptors to use when handling 'setRateActuatorOutputStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetRateActuatorOutputStatusInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SetRateActuatorOutputStatusRequest, Mavsdk_Rpc_Telemetry_SetRateActuatorOutputStatusResponse>]

  /// - Returns: Interceptors to use when handling 'setRateOdometry'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetRateOdometryInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SetRateOdometryRequest, Mavsdk_Rpc_Telemetry_SetRateOdometryResponse>]

  /// - Returns: Interceptors to use when handling 'setRatePositionVelocityNed'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetRatePositionVelocityNedInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SetRatePositionVelocityNedRequest, Mavsdk_Rpc_Telemetry_SetRatePositionVelocityNedResponse>]

  /// - Returns: Interceptors to use when handling 'setRateGroundTruth'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetRateGroundTruthInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SetRateGroundTruthRequest, Mavsdk_Rpc_Telemetry_SetRateGroundTruthResponse>]

  /// - Returns: Interceptors to use when handling 'setRateFixedwingMetrics'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetRateFixedwingMetricsInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SetRateFixedwingMetricsRequest, Mavsdk_Rpc_Telemetry_SetRateFixedwingMetricsResponse>]

  /// - Returns: Interceptors to use when handling 'setRateImu'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetRateImuInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SetRateImuRequest, Mavsdk_Rpc_Telemetry_SetRateImuResponse>]

  /// - Returns: Interceptors to use when handling 'setRateScaledImu'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetRateScaledImuInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SetRateScaledImuRequest, Mavsdk_Rpc_Telemetry_SetRateScaledImuResponse>]

  /// - Returns: Interceptors to use when handling 'setRateRawImu'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetRateRawImuInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SetRateRawImuRequest, Mavsdk_Rpc_Telemetry_SetRateRawImuResponse>]

  /// - Returns: Interceptors to use when handling 'setRateUnixEpochTime'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetRateUnixEpochTimeInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SetRateUnixEpochTimeRequest, Mavsdk_Rpc_Telemetry_SetRateUnixEpochTimeResponse>]

  /// - Returns: Interceptors to use when handling 'setRateDistanceSensor'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetRateDistanceSensorInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_SetRateDistanceSensorRequest, Mavsdk_Rpc_Telemetry_SetRateDistanceSensorResponse>]

  /// - Returns: Interceptors to use when handling 'getGpsGlobalOrigin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetGpsGlobalOriginInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Telemetry_GetGpsGlobalOriginRequest, Mavsdk_Rpc_Telemetry_GetGpsGlobalOriginResponse>]
}
