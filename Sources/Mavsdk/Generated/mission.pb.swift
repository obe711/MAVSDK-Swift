// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mission.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Mavsdk_Rpc_Mission_UploadMissionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The mission plan
  var missionPlan: Mavsdk_Rpc_Mission_MissionPlan {
    get {return _missionPlan ?? Mavsdk_Rpc_Mission_MissionPlan()}
    set {_missionPlan = newValue}
  }
  /// Returns true if `missionPlan` has been explicitly set.
  var hasMissionPlan: Bool {return self._missionPlan != nil}
  /// Clears the value of `missionPlan`. Subsequent reads from it will return its default value.
  mutating func clearMissionPlan() {self._missionPlan = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _missionPlan: Mavsdk_Rpc_Mission_MissionPlan? = nil
}

struct Mavsdk_Rpc_Mission_UploadMissionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var missionResult: Mavsdk_Rpc_Mission_MissionResult {
    get {return _missionResult ?? Mavsdk_Rpc_Mission_MissionResult()}
    set {_missionResult = newValue}
  }
  /// Returns true if `missionResult` has been explicitly set.
  var hasMissionResult: Bool {return self._missionResult != nil}
  /// Clears the value of `missionResult`. Subsequent reads from it will return its default value.
  mutating func clearMissionResult() {self._missionResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _missionResult: Mavsdk_Rpc_Mission_MissionResult? = nil
}

struct Mavsdk_Rpc_Mission_SubscribeUploadMissionWithProgressRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The mission plan
  var missionPlan: Mavsdk_Rpc_Mission_MissionPlan {
    get {return _missionPlan ?? Mavsdk_Rpc_Mission_MissionPlan()}
    set {_missionPlan = newValue}
  }
  /// Returns true if `missionPlan` has been explicitly set.
  var hasMissionPlan: Bool {return self._missionPlan != nil}
  /// Clears the value of `missionPlan`. Subsequent reads from it will return its default value.
  mutating func clearMissionPlan() {self._missionPlan = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _missionPlan: Mavsdk_Rpc_Mission_MissionPlan? = nil
}

struct Mavsdk_Rpc_Mission_UploadMissionWithProgressResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var missionResult: Mavsdk_Rpc_Mission_MissionResult {
    get {return _missionResult ?? Mavsdk_Rpc_Mission_MissionResult()}
    set {_missionResult = newValue}
  }
  /// Returns true if `missionResult` has been explicitly set.
  var hasMissionResult: Bool {return self._missionResult != nil}
  /// Clears the value of `missionResult`. Subsequent reads from it will return its default value.
  mutating func clearMissionResult() {self._missionResult = nil}

  /// The progress data
  var progressData: Mavsdk_Rpc_Mission_ProgressData {
    get {return _progressData ?? Mavsdk_Rpc_Mission_ProgressData()}
    set {_progressData = newValue}
  }
  /// Returns true if `progressData` has been explicitly set.
  var hasProgressData: Bool {return self._progressData != nil}
  /// Clears the value of `progressData`. Subsequent reads from it will return its default value.
  mutating func clearProgressData() {self._progressData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _missionResult: Mavsdk_Rpc_Mission_MissionResult? = nil
  fileprivate var _progressData: Mavsdk_Rpc_Mission_ProgressData? = nil
}

struct Mavsdk_Rpc_Mission_CancelMissionUploadRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Mission_CancelMissionUploadResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var missionResult: Mavsdk_Rpc_Mission_MissionResult {
    get {return _missionResult ?? Mavsdk_Rpc_Mission_MissionResult()}
    set {_missionResult = newValue}
  }
  /// Returns true if `missionResult` has been explicitly set.
  var hasMissionResult: Bool {return self._missionResult != nil}
  /// Clears the value of `missionResult`. Subsequent reads from it will return its default value.
  mutating func clearMissionResult() {self._missionResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _missionResult: Mavsdk_Rpc_Mission_MissionResult? = nil
}

struct Mavsdk_Rpc_Mission_DownloadMissionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Mission_DownloadMissionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var missionResult: Mavsdk_Rpc_Mission_MissionResult {
    get {return _missionResult ?? Mavsdk_Rpc_Mission_MissionResult()}
    set {_missionResult = newValue}
  }
  /// Returns true if `missionResult` has been explicitly set.
  var hasMissionResult: Bool {return self._missionResult != nil}
  /// Clears the value of `missionResult`. Subsequent reads from it will return its default value.
  mutating func clearMissionResult() {self._missionResult = nil}

  /// The mission plan
  var missionPlan: Mavsdk_Rpc_Mission_MissionPlan {
    get {return _missionPlan ?? Mavsdk_Rpc_Mission_MissionPlan()}
    set {_missionPlan = newValue}
  }
  /// Returns true if `missionPlan` has been explicitly set.
  var hasMissionPlan: Bool {return self._missionPlan != nil}
  /// Clears the value of `missionPlan`. Subsequent reads from it will return its default value.
  mutating func clearMissionPlan() {self._missionPlan = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _missionResult: Mavsdk_Rpc_Mission_MissionResult? = nil
  fileprivate var _missionPlan: Mavsdk_Rpc_Mission_MissionPlan? = nil
}

struct Mavsdk_Rpc_Mission_SubscribeDownloadMissionWithProgressRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Mission_DownloadMissionWithProgressResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var missionResult: Mavsdk_Rpc_Mission_MissionResult {
    get {return _missionResult ?? Mavsdk_Rpc_Mission_MissionResult()}
    set {_missionResult = newValue}
  }
  /// Returns true if `missionResult` has been explicitly set.
  var hasMissionResult: Bool {return self._missionResult != nil}
  /// Clears the value of `missionResult`. Subsequent reads from it will return its default value.
  mutating func clearMissionResult() {self._missionResult = nil}

  /// The progress data, or the mission plan (when the download is finished)
  var progressData: Mavsdk_Rpc_Mission_ProgressDataOrMission {
    get {return _progressData ?? Mavsdk_Rpc_Mission_ProgressDataOrMission()}
    set {_progressData = newValue}
  }
  /// Returns true if `progressData` has been explicitly set.
  var hasProgressData: Bool {return self._progressData != nil}
  /// Clears the value of `progressData`. Subsequent reads from it will return its default value.
  mutating func clearProgressData() {self._progressData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _missionResult: Mavsdk_Rpc_Mission_MissionResult? = nil
  fileprivate var _progressData: Mavsdk_Rpc_Mission_ProgressDataOrMission? = nil
}

struct Mavsdk_Rpc_Mission_CancelMissionDownloadRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Mission_CancelMissionDownloadResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var missionResult: Mavsdk_Rpc_Mission_MissionResult {
    get {return _missionResult ?? Mavsdk_Rpc_Mission_MissionResult()}
    set {_missionResult = newValue}
  }
  /// Returns true if `missionResult` has been explicitly set.
  var hasMissionResult: Bool {return self._missionResult != nil}
  /// Clears the value of `missionResult`. Subsequent reads from it will return its default value.
  mutating func clearMissionResult() {self._missionResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _missionResult: Mavsdk_Rpc_Mission_MissionResult? = nil
}

struct Mavsdk_Rpc_Mission_StartMissionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Mission_StartMissionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var missionResult: Mavsdk_Rpc_Mission_MissionResult {
    get {return _missionResult ?? Mavsdk_Rpc_Mission_MissionResult()}
    set {_missionResult = newValue}
  }
  /// Returns true if `missionResult` has been explicitly set.
  var hasMissionResult: Bool {return self._missionResult != nil}
  /// Clears the value of `missionResult`. Subsequent reads from it will return its default value.
  mutating func clearMissionResult() {self._missionResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _missionResult: Mavsdk_Rpc_Mission_MissionResult? = nil
}

struct Mavsdk_Rpc_Mission_PauseMissionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Mission_PauseMissionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var missionResult: Mavsdk_Rpc_Mission_MissionResult {
    get {return _missionResult ?? Mavsdk_Rpc_Mission_MissionResult()}
    set {_missionResult = newValue}
  }
  /// Returns true if `missionResult` has been explicitly set.
  var hasMissionResult: Bool {return self._missionResult != nil}
  /// Clears the value of `missionResult`. Subsequent reads from it will return its default value.
  mutating func clearMissionResult() {self._missionResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _missionResult: Mavsdk_Rpc_Mission_MissionResult? = nil
}

struct Mavsdk_Rpc_Mission_ClearMissionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Mission_ClearMissionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var missionResult: Mavsdk_Rpc_Mission_MissionResult {
    get {return _missionResult ?? Mavsdk_Rpc_Mission_MissionResult()}
    set {_missionResult = newValue}
  }
  /// Returns true if `missionResult` has been explicitly set.
  var hasMissionResult: Bool {return self._missionResult != nil}
  /// Clears the value of `missionResult`. Subsequent reads from it will return its default value.
  mutating func clearMissionResult() {self._missionResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _missionResult: Mavsdk_Rpc_Mission_MissionResult? = nil
}

struct Mavsdk_Rpc_Mission_SetCurrentMissionItemRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Index of the mission item to be set as the next one (0-based)
  var index: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Mission_SetCurrentMissionItemResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var missionResult: Mavsdk_Rpc_Mission_MissionResult {
    get {return _missionResult ?? Mavsdk_Rpc_Mission_MissionResult()}
    set {_missionResult = newValue}
  }
  /// Returns true if `missionResult` has been explicitly set.
  var hasMissionResult: Bool {return self._missionResult != nil}
  /// Clears the value of `missionResult`. Subsequent reads from it will return its default value.
  mutating func clearMissionResult() {self._missionResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _missionResult: Mavsdk_Rpc_Mission_MissionResult? = nil
}

struct Mavsdk_Rpc_Mission_IsMissionFinishedRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Mission_IsMissionFinishedResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var missionResult: Mavsdk_Rpc_Mission_MissionResult {
    get {return _missionResult ?? Mavsdk_Rpc_Mission_MissionResult()}
    set {_missionResult = newValue}
  }
  /// Returns true if `missionResult` has been explicitly set.
  var hasMissionResult: Bool {return self._missionResult != nil}
  /// Clears the value of `missionResult`. Subsequent reads from it will return its default value.
  mutating func clearMissionResult() {self._missionResult = nil}

  /// True if the mission is finished and the last mission item has been reached
  var isFinished: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _missionResult: Mavsdk_Rpc_Mission_MissionResult? = nil
}

struct Mavsdk_Rpc_Mission_SubscribeMissionProgressRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Mission_MissionProgressResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Mission progress
  var missionProgress: Mavsdk_Rpc_Mission_MissionProgress {
    get {return _missionProgress ?? Mavsdk_Rpc_Mission_MissionProgress()}
    set {_missionProgress = newValue}
  }
  /// Returns true if `missionProgress` has been explicitly set.
  var hasMissionProgress: Bool {return self._missionProgress != nil}
  /// Clears the value of `missionProgress`. Subsequent reads from it will return its default value.
  mutating func clearMissionProgress() {self._missionProgress = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _missionProgress: Mavsdk_Rpc_Mission_MissionProgress? = nil
}

struct Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var missionResult: Mavsdk_Rpc_Mission_MissionResult {
    get {return _missionResult ?? Mavsdk_Rpc_Mission_MissionResult()}
    set {_missionResult = newValue}
  }
  /// Returns true if `missionResult` has been explicitly set.
  var hasMissionResult: Bool {return self._missionResult != nil}
  /// Clears the value of `missionResult`. Subsequent reads from it will return its default value.
  mutating func clearMissionResult() {self._missionResult = nil}

  /// If true, trigger an RTL at the end of the mission
  var enable: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _missionResult: Mavsdk_Rpc_Mission_MissionResult? = nil
}

struct Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// If true, trigger an RTL at the end of the mission
  var enable: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var missionResult: Mavsdk_Rpc_Mission_MissionResult {
    get {return _missionResult ?? Mavsdk_Rpc_Mission_MissionResult()}
    set {_missionResult = newValue}
  }
  /// Returns true if `missionResult` has been explicitly set.
  var hasMissionResult: Bool {return self._missionResult != nil}
  /// Clears the value of `missionResult`. Subsequent reads from it will return its default value.
  mutating func clearMissionResult() {self._missionResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _missionResult: Mavsdk_Rpc_Mission_MissionResult? = nil
}

///
/// Type representing a mission item.
///
/// A MissionItem can contain a position and/or actions.
/// Mission items are building blocks to assemble a mission,
/// which can be sent to (or received from) a system.
/// They cannot be used independently.
struct Mavsdk_Rpc_Mission_MissionItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Latitude in degrees (range: -90 to +90)
  var latitudeDeg: Double = 0

  /// Longitude in degrees (range: -180 to +180)
  var longitudeDeg: Double = 0

  /// Altitude relative to takeoff altitude in metres
  var relativeAltitudeM: Float = 0

  /// Speed to use after this mission item (in metres/second)
  var speedMS: Float = 0

  /// True will make the drone fly through without stopping, while false will make the drone stop on the waypoint
  var isFlyThrough: Bool = false

  /// Gimbal pitch (in degrees)
  var gimbalPitchDeg: Float = 0

  /// Gimbal yaw (in degrees)
  var gimbalYawDeg: Float = 0

  /// Camera action to trigger at this mission item
  var cameraAction: Mavsdk_Rpc_Mission_MissionItem.CameraAction = .none

  /// Loiter time (in seconds)
  var loiterTimeS: Float = 0

  /// Camera photo interval to use after this mission item (in seconds)
  var cameraPhotoIntervalS: Double = 0

  /// Radius for completing a mission item (in metres)
  var acceptanceRadiusM: Float = 0

  /// Absolute yaw angle (in degrees)
  var yawDeg: Float = 0

  /// Camera photo distance to use after this mission item (in meters)
  var cameraPhotoDistanceM: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Possible camera actions at a mission item.
  enum CameraAction: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// No action
    case none // = 0

    /// Take a single photo
    case takePhoto // = 1

    /// Start capturing photos at regular intervals
    case startPhotoInterval // = 2

    /// Stop capturing photos at regular intervals
    case stopPhotoInterval // = 3

    /// Start capturing video
    case startVideo // = 4

    /// Stop capturing video
    case stopVideo // = 5

    /// Start capturing photos at regular distance
    case startPhotoDistance // = 6

    /// Stop capturing photos at regular distance
    case stopPhotoDistance // = 7
    case UNRECOGNIZED(Int)

    init() {
      self = .none
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .takePhoto
      case 2: self = .startPhotoInterval
      case 3: self = .stopPhotoInterval
      case 4: self = .startVideo
      case 5: self = .stopVideo
      case 6: self = .startPhotoDistance
      case 7: self = .stopPhotoDistance
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .none: return 0
      case .takePhoto: return 1
      case .startPhotoInterval: return 2
      case .stopPhotoInterval: return 3
      case .startVideo: return 4
      case .stopVideo: return 5
      case .startPhotoDistance: return 6
      case .stopPhotoDistance: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Mavsdk_Rpc_Mission_MissionItem.CameraAction: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Mavsdk_Rpc_Mission_MissionItem.CameraAction] = [
    .none,
    .takePhoto,
    .startPhotoInterval,
    .stopPhotoInterval,
    .startVideo,
    .stopVideo,
    .startPhotoDistance,
    .stopPhotoDistance,
  ]
}

#endif  // swift(>=4.2)

/// Mission plan type
struct Mavsdk_Rpc_Mission_MissionPlan {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The mission items
  var missionItems: [Mavsdk_Rpc_Mission_MissionItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Mission progress type.
struct Mavsdk_Rpc_Mission_MissionProgress {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Current mission item index (0-based), if equal to total, the mission is finished
  var current: Int32 = 0

  /// Total number of mission items
  var total: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Result type.
struct Mavsdk_Rpc_Mission_MissionResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Result enum value
  var result: Mavsdk_Rpc_Mission_MissionResult.Result = .unknown

  /// Human-readable English string describing the result
  var resultStr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Possible results returned for action requests.
  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// Unknown result
    case unknown // = 0

    /// Request succeeded
    case success // = 1

    /// Error
    case error // = 2

    /// Too many mission items in the mission
    case tooManyMissionItems // = 3

    /// Vehicle is busy
    case busy // = 4

    /// Request timed out
    case timeout // = 5

    /// Invalid argument
    case invalidArgument // = 6

    /// Mission downloaded from the system is not supported
    case unsupported // = 7

    /// No mission available on the system
    case noMissionAvailable // = 8

    /// Unsupported mission command
    case unsupportedMissionCmd // = 11

    /// Mission transfer (upload or download) has been cancelled
    case transferCancelled // = 12

    /// No system connected
    case noSystem // = 13

    /// Intermediate message showing progress
    case next // = 14
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .success
      case 2: self = .error
      case 3: self = .tooManyMissionItems
      case 4: self = .busy
      case 5: self = .timeout
      case 6: self = .invalidArgument
      case 7: self = .unsupported
      case 8: self = .noMissionAvailable
      case 11: self = .unsupportedMissionCmd
      case 12: self = .transferCancelled
      case 13: self = .noSystem
      case 14: self = .next
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .success: return 1
      case .error: return 2
      case .tooManyMissionItems: return 3
      case .busy: return 4
      case .timeout: return 5
      case .invalidArgument: return 6
      case .unsupported: return 7
      case .noMissionAvailable: return 8
      case .unsupportedMissionCmd: return 11
      case .transferCancelled: return 12
      case .noSystem: return 13
      case .next: return 14
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Mavsdk_Rpc_Mission_MissionResult.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Mavsdk_Rpc_Mission_MissionResult.Result] = [
    .unknown,
    .success,
    .error,
    .tooManyMissionItems,
    .busy,
    .timeout,
    .invalidArgument,
    .unsupported,
    .noMissionAvailable,
    .unsupportedMissionCmd,
    .transferCancelled,
    .noSystem,
    .next,
  ]
}

#endif  // swift(>=4.2)

/// Progress data coming from mission upload.
struct Mavsdk_Rpc_Mission_ProgressData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Progress (0..1.0)
  var progress: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Progress data coming from mission download, or the mission itself (if the transfer succeeds).
struct Mavsdk_Rpc_Mission_ProgressDataOrMission {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Whether this ProgressData contains a 'progress' status or not
  var hasProgress_p: Bool = false

  /// Progress (0..1.0)
  var progress: Float = 0

  /// Whether this ProgressData contains a 'mission_plan' or not
  var hasMission_p: Bool = false

  /// Mission plan
  var missionPlan: Mavsdk_Rpc_Mission_MissionPlan {
    get {return _missionPlan ?? Mavsdk_Rpc_Mission_MissionPlan()}
    set {_missionPlan = newValue}
  }
  /// Returns true if `missionPlan` has been explicitly set.
  var hasMissionPlan: Bool {return self._missionPlan != nil}
  /// Clears the value of `missionPlan`. Subsequent reads from it will return its default value.
  mutating func clearMissionPlan() {self._missionPlan = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _missionPlan: Mavsdk_Rpc_Mission_MissionPlan? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "mavsdk.rpc.mission"

extension Mavsdk_Rpc_Mission_UploadMissionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UploadMissionRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mission_plan"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._missionPlan) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._missionPlan {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_UploadMissionRequest, rhs: Mavsdk_Rpc_Mission_UploadMissionRequest) -> Bool {
    if lhs._missionPlan != rhs._missionPlan {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_UploadMissionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UploadMissionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mission_result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._missionResult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._missionResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_UploadMissionResponse, rhs: Mavsdk_Rpc_Mission_UploadMissionResponse) -> Bool {
    if lhs._missionResult != rhs._missionResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_SubscribeUploadMissionWithProgressRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeUploadMissionWithProgressRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mission_plan"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._missionPlan) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._missionPlan {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_SubscribeUploadMissionWithProgressRequest, rhs: Mavsdk_Rpc_Mission_SubscribeUploadMissionWithProgressRequest) -> Bool {
    if lhs._missionPlan != rhs._missionPlan {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_UploadMissionWithProgressResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UploadMissionWithProgressResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mission_result"),
    2: .standard(proto: "progress_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._missionResult) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._progressData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._missionResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._progressData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_UploadMissionWithProgressResponse, rhs: Mavsdk_Rpc_Mission_UploadMissionWithProgressResponse) -> Bool {
    if lhs._missionResult != rhs._missionResult {return false}
    if lhs._progressData != rhs._progressData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_CancelMissionUploadRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CancelMissionUploadRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_CancelMissionUploadRequest, rhs: Mavsdk_Rpc_Mission_CancelMissionUploadRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_CancelMissionUploadResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CancelMissionUploadResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mission_result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._missionResult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._missionResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_CancelMissionUploadResponse, rhs: Mavsdk_Rpc_Mission_CancelMissionUploadResponse) -> Bool {
    if lhs._missionResult != rhs._missionResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_DownloadMissionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DownloadMissionRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_DownloadMissionRequest, rhs: Mavsdk_Rpc_Mission_DownloadMissionRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_DownloadMissionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DownloadMissionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mission_result"),
    2: .standard(proto: "mission_plan"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._missionResult) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._missionPlan) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._missionResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._missionPlan {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_DownloadMissionResponse, rhs: Mavsdk_Rpc_Mission_DownloadMissionResponse) -> Bool {
    if lhs._missionResult != rhs._missionResult {return false}
    if lhs._missionPlan != rhs._missionPlan {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_SubscribeDownloadMissionWithProgressRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeDownloadMissionWithProgressRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_SubscribeDownloadMissionWithProgressRequest, rhs: Mavsdk_Rpc_Mission_SubscribeDownloadMissionWithProgressRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_DownloadMissionWithProgressResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DownloadMissionWithProgressResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mission_result"),
    2: .standard(proto: "progress_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._missionResult) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._progressData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._missionResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._progressData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_DownloadMissionWithProgressResponse, rhs: Mavsdk_Rpc_Mission_DownloadMissionWithProgressResponse) -> Bool {
    if lhs._missionResult != rhs._missionResult {return false}
    if lhs._progressData != rhs._progressData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_CancelMissionDownloadRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CancelMissionDownloadRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_CancelMissionDownloadRequest, rhs: Mavsdk_Rpc_Mission_CancelMissionDownloadRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_CancelMissionDownloadResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CancelMissionDownloadResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mission_result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._missionResult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._missionResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_CancelMissionDownloadResponse, rhs: Mavsdk_Rpc_Mission_CancelMissionDownloadResponse) -> Bool {
    if lhs._missionResult != rhs._missionResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_StartMissionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StartMissionRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_StartMissionRequest, rhs: Mavsdk_Rpc_Mission_StartMissionRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_StartMissionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StartMissionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mission_result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._missionResult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._missionResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_StartMissionResponse, rhs: Mavsdk_Rpc_Mission_StartMissionResponse) -> Bool {
    if lhs._missionResult != rhs._missionResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_PauseMissionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PauseMissionRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_PauseMissionRequest, rhs: Mavsdk_Rpc_Mission_PauseMissionRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_PauseMissionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PauseMissionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mission_result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._missionResult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._missionResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_PauseMissionResponse, rhs: Mavsdk_Rpc_Mission_PauseMissionResponse) -> Bool {
    if lhs._missionResult != rhs._missionResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_ClearMissionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClearMissionRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_ClearMissionRequest, rhs: Mavsdk_Rpc_Mission_ClearMissionRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_ClearMissionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClearMissionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mission_result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._missionResult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._missionResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_ClearMissionResponse, rhs: Mavsdk_Rpc_Mission_ClearMissionResponse) -> Bool {
    if lhs._missionResult != rhs._missionResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_SetCurrentMissionItemRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetCurrentMissionItemRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.index) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.index != 0 {
      try visitor.visitSingularInt32Field(value: self.index, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_SetCurrentMissionItemRequest, rhs: Mavsdk_Rpc_Mission_SetCurrentMissionItemRequest) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_SetCurrentMissionItemResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetCurrentMissionItemResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mission_result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._missionResult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._missionResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_SetCurrentMissionItemResponse, rhs: Mavsdk_Rpc_Mission_SetCurrentMissionItemResponse) -> Bool {
    if lhs._missionResult != rhs._missionResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_IsMissionFinishedRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IsMissionFinishedRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_IsMissionFinishedRequest, rhs: Mavsdk_Rpc_Mission_IsMissionFinishedRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_IsMissionFinishedResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IsMissionFinishedResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mission_result"),
    2: .standard(proto: "is_finished"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._missionResult) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isFinished) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._missionResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.isFinished != false {
      try visitor.visitSingularBoolField(value: self.isFinished, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_IsMissionFinishedResponse, rhs: Mavsdk_Rpc_Mission_IsMissionFinishedResponse) -> Bool {
    if lhs._missionResult != rhs._missionResult {return false}
    if lhs.isFinished != rhs.isFinished {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_SubscribeMissionProgressRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeMissionProgressRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_SubscribeMissionProgressRequest, rhs: Mavsdk_Rpc_Mission_SubscribeMissionProgressRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_MissionProgressResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MissionProgressResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mission_progress"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._missionProgress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._missionProgress {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_MissionProgressResponse, rhs: Mavsdk_Rpc_Mission_MissionProgressResponse) -> Bool {
    if lhs._missionProgress != rhs._missionProgress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetReturnToLaunchAfterMissionRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionRequest, rhs: Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetReturnToLaunchAfterMissionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mission_result"),
    2: .same(proto: "enable"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._missionResult) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.enable) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._missionResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.enable != false {
      try visitor.visitSingularBoolField(value: self.enable, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionResponse, rhs: Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionResponse) -> Bool {
    if lhs._missionResult != rhs._missionResult {return false}
    if lhs.enable != rhs.enable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetReturnToLaunchAfterMissionRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enable"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enable) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enable != false {
      try visitor.visitSingularBoolField(value: self.enable, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionRequest, rhs: Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionRequest) -> Bool {
    if lhs.enable != rhs.enable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetReturnToLaunchAfterMissionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mission_result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._missionResult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._missionResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionResponse, rhs: Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionResponse) -> Bool {
    if lhs._missionResult != rhs._missionResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_MissionItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MissionItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "latitude_deg"),
    2: .standard(proto: "longitude_deg"),
    3: .standard(proto: "relative_altitude_m"),
    4: .standard(proto: "speed_m_s"),
    5: .standard(proto: "is_fly_through"),
    6: .standard(proto: "gimbal_pitch_deg"),
    7: .standard(proto: "gimbal_yaw_deg"),
    8: .standard(proto: "camera_action"),
    9: .standard(proto: "loiter_time_s"),
    10: .standard(proto: "camera_photo_interval_s"),
    11: .standard(proto: "acceptance_radius_m"),
    12: .standard(proto: "yaw_deg"),
    13: .standard(proto: "camera_photo_distance_m"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.latitudeDeg) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.longitudeDeg) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.relativeAltitudeM) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.speedMS) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.isFlyThrough) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self.gimbalPitchDeg) }()
      case 7: try { try decoder.decodeSingularFloatField(value: &self.gimbalYawDeg) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.cameraAction) }()
      case 9: try { try decoder.decodeSingularFloatField(value: &self.loiterTimeS) }()
      case 10: try { try decoder.decodeSingularDoubleField(value: &self.cameraPhotoIntervalS) }()
      case 11: try { try decoder.decodeSingularFloatField(value: &self.acceptanceRadiusM) }()
      case 12: try { try decoder.decodeSingularFloatField(value: &self.yawDeg) }()
      case 13: try { try decoder.decodeSingularFloatField(value: &self.cameraPhotoDistanceM) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.latitudeDeg != 0 {
      try visitor.visitSingularDoubleField(value: self.latitudeDeg, fieldNumber: 1)
    }
    if self.longitudeDeg != 0 {
      try visitor.visitSingularDoubleField(value: self.longitudeDeg, fieldNumber: 2)
    }
    if self.relativeAltitudeM != 0 {
      try visitor.visitSingularFloatField(value: self.relativeAltitudeM, fieldNumber: 3)
    }
    if self.speedMS != 0 {
      try visitor.visitSingularFloatField(value: self.speedMS, fieldNumber: 4)
    }
    if self.isFlyThrough != false {
      try visitor.visitSingularBoolField(value: self.isFlyThrough, fieldNumber: 5)
    }
    if self.gimbalPitchDeg != 0 {
      try visitor.visitSingularFloatField(value: self.gimbalPitchDeg, fieldNumber: 6)
    }
    if self.gimbalYawDeg != 0 {
      try visitor.visitSingularFloatField(value: self.gimbalYawDeg, fieldNumber: 7)
    }
    if self.cameraAction != .none {
      try visitor.visitSingularEnumField(value: self.cameraAction, fieldNumber: 8)
    }
    if self.loiterTimeS != 0 {
      try visitor.visitSingularFloatField(value: self.loiterTimeS, fieldNumber: 9)
    }
    if self.cameraPhotoIntervalS != 0 {
      try visitor.visitSingularDoubleField(value: self.cameraPhotoIntervalS, fieldNumber: 10)
    }
    if self.acceptanceRadiusM != 0 {
      try visitor.visitSingularFloatField(value: self.acceptanceRadiusM, fieldNumber: 11)
    }
    if self.yawDeg != 0 {
      try visitor.visitSingularFloatField(value: self.yawDeg, fieldNumber: 12)
    }
    if self.cameraPhotoDistanceM != 0 {
      try visitor.visitSingularFloatField(value: self.cameraPhotoDistanceM, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_MissionItem, rhs: Mavsdk_Rpc_Mission_MissionItem) -> Bool {
    if lhs.latitudeDeg != rhs.latitudeDeg {return false}
    if lhs.longitudeDeg != rhs.longitudeDeg {return false}
    if lhs.relativeAltitudeM != rhs.relativeAltitudeM {return false}
    if lhs.speedMS != rhs.speedMS {return false}
    if lhs.isFlyThrough != rhs.isFlyThrough {return false}
    if lhs.gimbalPitchDeg != rhs.gimbalPitchDeg {return false}
    if lhs.gimbalYawDeg != rhs.gimbalYawDeg {return false}
    if lhs.cameraAction != rhs.cameraAction {return false}
    if lhs.loiterTimeS != rhs.loiterTimeS {return false}
    if lhs.cameraPhotoIntervalS != rhs.cameraPhotoIntervalS {return false}
    if lhs.acceptanceRadiusM != rhs.acceptanceRadiusM {return false}
    if lhs.yawDeg != rhs.yawDeg {return false}
    if lhs.cameraPhotoDistanceM != rhs.cameraPhotoDistanceM {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_MissionItem.CameraAction: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CAMERA_ACTION_NONE"),
    1: .same(proto: "CAMERA_ACTION_TAKE_PHOTO"),
    2: .same(proto: "CAMERA_ACTION_START_PHOTO_INTERVAL"),
    3: .same(proto: "CAMERA_ACTION_STOP_PHOTO_INTERVAL"),
    4: .same(proto: "CAMERA_ACTION_START_VIDEO"),
    5: .same(proto: "CAMERA_ACTION_STOP_VIDEO"),
    6: .same(proto: "CAMERA_ACTION_START_PHOTO_DISTANCE"),
    7: .same(proto: "CAMERA_ACTION_STOP_PHOTO_DISTANCE"),
  ]
}

extension Mavsdk_Rpc_Mission_MissionPlan: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MissionPlan"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mission_items"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.missionItems) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.missionItems.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.missionItems, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_MissionPlan, rhs: Mavsdk_Rpc_Mission_MissionPlan) -> Bool {
    if lhs.missionItems != rhs.missionItems {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_MissionProgress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MissionProgress"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "current"),
    2: .same(proto: "total"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.current) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.total) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.current != 0 {
      try visitor.visitSingularInt32Field(value: self.current, fieldNumber: 1)
    }
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_MissionProgress, rhs: Mavsdk_Rpc_Mission_MissionProgress) -> Bool {
    if lhs.current != rhs.current {return false}
    if lhs.total != rhs.total {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_MissionResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MissionResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "result_str"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.resultStr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unknown {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if !self.resultStr.isEmpty {
      try visitor.visitSingularStringField(value: self.resultStr, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_MissionResult, rhs: Mavsdk_Rpc_Mission_MissionResult) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.resultStr != rhs.resultStr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_MissionResult.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RESULT_UNKNOWN"),
    1: .same(proto: "RESULT_SUCCESS"),
    2: .same(proto: "RESULT_ERROR"),
    3: .same(proto: "RESULT_TOO_MANY_MISSION_ITEMS"),
    4: .same(proto: "RESULT_BUSY"),
    5: .same(proto: "RESULT_TIMEOUT"),
    6: .same(proto: "RESULT_INVALID_ARGUMENT"),
    7: .same(proto: "RESULT_UNSUPPORTED"),
    8: .same(proto: "RESULT_NO_MISSION_AVAILABLE"),
    11: .same(proto: "RESULT_UNSUPPORTED_MISSION_CMD"),
    12: .same(proto: "RESULT_TRANSFER_CANCELLED"),
    13: .same(proto: "RESULT_NO_SYSTEM"),
    14: .same(proto: "RESULT_NEXT"),
  ]
}

extension Mavsdk_Rpc_Mission_ProgressData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProgressData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "progress"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.progress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.progress != 0 {
      try visitor.visitSingularFloatField(value: self.progress, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_ProgressData, rhs: Mavsdk_Rpc_Mission_ProgressData) -> Bool {
    if lhs.progress != rhs.progress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mission_ProgressDataOrMission: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProgressDataOrMission"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "has_progress"),
    2: .same(proto: "progress"),
    3: .standard(proto: "has_mission"),
    4: .standard(proto: "mission_plan"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.hasProgress_p) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.progress) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.hasMission_p) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._missionPlan) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.hasProgress_p != false {
      try visitor.visitSingularBoolField(value: self.hasProgress_p, fieldNumber: 1)
    }
    if self.progress != 0 {
      try visitor.visitSingularFloatField(value: self.progress, fieldNumber: 2)
    }
    if self.hasMission_p != false {
      try visitor.visitSingularBoolField(value: self.hasMission_p, fieldNumber: 3)
    }
    try { if let v = self._missionPlan {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mission_ProgressDataOrMission, rhs: Mavsdk_Rpc_Mission_ProgressDataOrMission) -> Bool {
    if lhs.hasProgress_p != rhs.hasProgress_p {return false}
    if lhs.progress != rhs.progress {return false}
    if lhs.hasMission_p != rhs.hasMission_p {return false}
    if lhs._missionPlan != rhs._missionPlan {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
