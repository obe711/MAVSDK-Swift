//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: param.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Provide raw access to get and set parameters.
///
/// Usage: instantiate `Mavsdk_Rpc_Param_ParamServiceClient`, then call methods of this protocol to make API calls.
internal protocol Mavsdk_Rpc_Param_ParamServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Mavsdk_Rpc_Param_ParamServiceClientInterceptorFactoryProtocol? { get }

  func getParamInt(
    _ request: Mavsdk_Rpc_Param_GetParamIntRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Param_GetParamIntRequest, Mavsdk_Rpc_Param_GetParamIntResponse>

  func setParamInt(
    _ request: Mavsdk_Rpc_Param_SetParamIntRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Param_SetParamIntRequest, Mavsdk_Rpc_Param_SetParamIntResponse>

  func getParamFloat(
    _ request: Mavsdk_Rpc_Param_GetParamFloatRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Param_GetParamFloatRequest, Mavsdk_Rpc_Param_GetParamFloatResponse>

  func setParamFloat(
    _ request: Mavsdk_Rpc_Param_SetParamFloatRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Param_SetParamFloatRequest, Mavsdk_Rpc_Param_SetParamFloatResponse>

  func getAllParams(
    _ request: Mavsdk_Rpc_Param_GetAllParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Param_GetAllParamsRequest, Mavsdk_Rpc_Param_GetAllParamsResponse>
}

extension Mavsdk_Rpc_Param_ParamServiceClientProtocol {
  internal var serviceName: String {
    return "mavsdk.rpc.param.ParamService"
  }

  ///
  /// Get an int parameter.
  ///
  /// If the type is wrong, the result will be `WRONG_TYPE`.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetParamInt.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getParamInt(
    _ request: Mavsdk_Rpc_Param_GetParamIntRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Param_GetParamIntRequest, Mavsdk_Rpc_Param_GetParamIntResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.param.ParamService/GetParamInt",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetParamIntInterceptors() ?? []
    )
  }

  ///
  /// Set an int parameter.
  ///
  /// If the type is wrong, the result will be `WRONG_TYPE`.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetParamInt.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setParamInt(
    _ request: Mavsdk_Rpc_Param_SetParamIntRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Param_SetParamIntRequest, Mavsdk_Rpc_Param_SetParamIntResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.param.ParamService/SetParamInt",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetParamIntInterceptors() ?? []
    )
  }

  ///
  /// Get a float parameter.
  ///
  /// If the type is wrong, the result will be `WRONG_TYPE`.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetParamFloat.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getParamFloat(
    _ request: Mavsdk_Rpc_Param_GetParamFloatRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Param_GetParamFloatRequest, Mavsdk_Rpc_Param_GetParamFloatResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.param.ParamService/GetParamFloat",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetParamFloatInterceptors() ?? []
    )
  }

  ///
  /// Set a float parameter.
  ///
  /// If the type is wrong, the result will be `WRONG_TYPE`.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetParamFloat.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setParamFloat(
    _ request: Mavsdk_Rpc_Param_SetParamFloatRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Param_SetParamFloatRequest, Mavsdk_Rpc_Param_SetParamFloatResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.param.ParamService/SetParamFloat",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetParamFloatInterceptors() ?? []
    )
  }

  ///
  /// Get all parameters.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAllParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAllParams(
    _ request: Mavsdk_Rpc_Param_GetAllParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Param_GetAllParamsRequest, Mavsdk_Rpc_Param_GetAllParamsResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.param.ParamService/GetAllParams",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllParamsInterceptors() ?? []
    )
  }
}

internal protocol Mavsdk_Rpc_Param_ParamServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getParamInt'.
  func makeGetParamIntInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Param_GetParamIntRequest, Mavsdk_Rpc_Param_GetParamIntResponse>]

  /// - Returns: Interceptors to use when invoking 'setParamInt'.
  func makeSetParamIntInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Param_SetParamIntRequest, Mavsdk_Rpc_Param_SetParamIntResponse>]

  /// - Returns: Interceptors to use when invoking 'getParamFloat'.
  func makeGetParamFloatInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Param_GetParamFloatRequest, Mavsdk_Rpc_Param_GetParamFloatResponse>]

  /// - Returns: Interceptors to use when invoking 'setParamFloat'.
  func makeSetParamFloatInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Param_SetParamFloatRequest, Mavsdk_Rpc_Param_SetParamFloatResponse>]

  /// - Returns: Interceptors to use when invoking 'getAllParams'.
  func makeGetAllParamsInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Param_GetAllParamsRequest, Mavsdk_Rpc_Param_GetAllParamsResponse>]
}

internal final class Mavsdk_Rpc_Param_ParamServiceClient: Mavsdk_Rpc_Param_ParamServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Mavsdk_Rpc_Param_ParamServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the mavsdk.rpc.param.ParamService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Mavsdk_Rpc_Param_ParamServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Provide raw access to get and set parameters.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Mavsdk_Rpc_Param_ParamServiceProvider: CallHandlerProvider {
  var interceptors: Mavsdk_Rpc_Param_ParamServiceServerInterceptorFactoryProtocol? { get }

  ///
  /// Get an int parameter.
  ///
  /// If the type is wrong, the result will be `WRONG_TYPE`.
  func getParamInt(request: Mavsdk_Rpc_Param_GetParamIntRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Param_GetParamIntResponse>

  ///
  /// Set an int parameter.
  ///
  /// If the type is wrong, the result will be `WRONG_TYPE`.
  func setParamInt(request: Mavsdk_Rpc_Param_SetParamIntRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Param_SetParamIntResponse>

  ///
  /// Get a float parameter.
  ///
  /// If the type is wrong, the result will be `WRONG_TYPE`.
  func getParamFloat(request: Mavsdk_Rpc_Param_GetParamFloatRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Param_GetParamFloatResponse>

  ///
  /// Set a float parameter.
  ///
  /// If the type is wrong, the result will be `WRONG_TYPE`.
  func setParamFloat(request: Mavsdk_Rpc_Param_SetParamFloatRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Param_SetParamFloatResponse>

  ///
  /// Get all parameters.
  func getAllParams(request: Mavsdk_Rpc_Param_GetAllParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Param_GetAllParamsResponse>
}

extension Mavsdk_Rpc_Param_ParamServiceProvider {
  internal var serviceName: Substring { return "mavsdk.rpc.param.ParamService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetParamInt":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Param_GetParamIntRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Param_GetParamIntResponse>(),
        interceptors: self.interceptors?.makeGetParamIntInterceptors() ?? [],
        userFunction: self.getParamInt(request:context:)
      )

    case "SetParamInt":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Param_SetParamIntRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Param_SetParamIntResponse>(),
        interceptors: self.interceptors?.makeSetParamIntInterceptors() ?? [],
        userFunction: self.setParamInt(request:context:)
      )

    case "GetParamFloat":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Param_GetParamFloatRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Param_GetParamFloatResponse>(),
        interceptors: self.interceptors?.makeGetParamFloatInterceptors() ?? [],
        userFunction: self.getParamFloat(request:context:)
      )

    case "SetParamFloat":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Param_SetParamFloatRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Param_SetParamFloatResponse>(),
        interceptors: self.interceptors?.makeSetParamFloatInterceptors() ?? [],
        userFunction: self.setParamFloat(request:context:)
      )

    case "GetAllParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Param_GetAllParamsRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Param_GetAllParamsResponse>(),
        interceptors: self.interceptors?.makeGetAllParamsInterceptors() ?? [],
        userFunction: self.getAllParams(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Mavsdk_Rpc_Param_ParamServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getParamInt'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetParamIntInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Param_GetParamIntRequest, Mavsdk_Rpc_Param_GetParamIntResponse>]

  /// - Returns: Interceptors to use when handling 'setParamInt'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetParamIntInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Param_SetParamIntRequest, Mavsdk_Rpc_Param_SetParamIntResponse>]

  /// - Returns: Interceptors to use when handling 'getParamFloat'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetParamFloatInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Param_GetParamFloatRequest, Mavsdk_Rpc_Param_GetParamFloatResponse>]

  /// - Returns: Interceptors to use when handling 'setParamFloat'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetParamFloatInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Param_SetParamFloatRequest, Mavsdk_Rpc_Param_SetParamFloatResponse>]

  /// - Returns: Interceptors to use when handling 'getAllParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAllParamsInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Param_GetAllParamsRequest, Mavsdk_Rpc_Param_GetAllParamsResponse>]
}
