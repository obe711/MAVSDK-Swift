//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: mission_raw_server.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Acts as a vehicle and receives incoming missions from GCS (in raw MAVLINK format). 
/// Provides current mission item state, so the server can progress through missions.
///
/// Usage: instantiate `Mavsdk_Rpc_MissionRawServer_MissionRawServerServiceClient`, then call methods of this protocol to make API calls.
internal protocol Mavsdk_Rpc_MissionRawServer_MissionRawServerServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Mavsdk_Rpc_MissionRawServer_MissionRawServerServiceClientInterceptorFactoryProtocol? { get }

  func subscribeIncomingMission(
    _ request: Mavsdk_Rpc_MissionRawServer_SubscribeIncomingMissionRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_MissionRawServer_IncomingMissionResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_MissionRawServer_SubscribeIncomingMissionRequest, Mavsdk_Rpc_MissionRawServer_IncomingMissionResponse>

  func subscribeCurrentItemChanged(
    _ request: Mavsdk_Rpc_MissionRawServer_SubscribeCurrentItemChangedRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_MissionRawServer_CurrentItemChangedResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_MissionRawServer_SubscribeCurrentItemChangedRequest, Mavsdk_Rpc_MissionRawServer_CurrentItemChangedResponse>

  func setCurrentItemComplete(
    _ request: Mavsdk_Rpc_MissionRawServer_SetCurrentItemCompleteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_MissionRawServer_SetCurrentItemCompleteRequest, Mavsdk_Rpc_MissionRawServer_SetCurrentItemCompleteResponse>

  func subscribeClearAll(
    _ request: Mavsdk_Rpc_MissionRawServer_SubscribeClearAllRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_MissionRawServer_ClearAllResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_MissionRawServer_SubscribeClearAllRequest, Mavsdk_Rpc_MissionRawServer_ClearAllResponse>
}

extension Mavsdk_Rpc_MissionRawServer_MissionRawServerServiceClientProtocol {
  internal var serviceName: String {
    return "mavsdk.rpc.mission_raw_server.MissionRawServerService"
  }

  ///
  /// Subscribe to when a new mission is uploaded (asynchronous).
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeIncomingMission.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeIncomingMission(
    _ request: Mavsdk_Rpc_MissionRawServer_SubscribeIncomingMissionRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_MissionRawServer_IncomingMissionResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_MissionRawServer_SubscribeIncomingMissionRequest, Mavsdk_Rpc_MissionRawServer_IncomingMissionResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.mission_raw_server.MissionRawServerService/SubscribeIncomingMission",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeIncomingMissionInterceptors() ?? [],
      handler: handler
    )
  }

  ///
  /// Subscribe to when a new current item is set
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeCurrentItemChanged.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeCurrentItemChanged(
    _ request: Mavsdk_Rpc_MissionRawServer_SubscribeCurrentItemChangedRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_MissionRawServer_CurrentItemChangedResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_MissionRawServer_SubscribeCurrentItemChangedRequest, Mavsdk_Rpc_MissionRawServer_CurrentItemChangedResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.mission_raw_server.MissionRawServerService/SubscribeCurrentItemChanged",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeCurrentItemChangedInterceptors() ?? [],
      handler: handler
    )
  }

  ///
  ///  Set Current item as completed
  ///
  /// - Parameters:
  ///   - request: Request to send to SetCurrentItemComplete.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setCurrentItemComplete(
    _ request: Mavsdk_Rpc_MissionRawServer_SetCurrentItemCompleteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_MissionRawServer_SetCurrentItemCompleteRequest, Mavsdk_Rpc_MissionRawServer_SetCurrentItemCompleteResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.mission_raw_server.MissionRawServerService/SetCurrentItemComplete",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetCurrentItemCompleteInterceptors() ?? []
    )
  }

  ///
  ///  Subscribe when a MISSION_CLEAR_ALL is received
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeClearAll.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeClearAll(
    _ request: Mavsdk_Rpc_MissionRawServer_SubscribeClearAllRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_MissionRawServer_ClearAllResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_MissionRawServer_SubscribeClearAllRequest, Mavsdk_Rpc_MissionRawServer_ClearAllResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.mission_raw_server.MissionRawServerService/SubscribeClearAll",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeClearAllInterceptors() ?? [],
      handler: handler
    )
  }
}

internal protocol Mavsdk_Rpc_MissionRawServer_MissionRawServerServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'subscribeIncomingMission'.
  func makeSubscribeIncomingMissionInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_MissionRawServer_SubscribeIncomingMissionRequest, Mavsdk_Rpc_MissionRawServer_IncomingMissionResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeCurrentItemChanged'.
  func makeSubscribeCurrentItemChangedInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_MissionRawServer_SubscribeCurrentItemChangedRequest, Mavsdk_Rpc_MissionRawServer_CurrentItemChangedResponse>]

  /// - Returns: Interceptors to use when invoking 'setCurrentItemComplete'.
  func makeSetCurrentItemCompleteInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_MissionRawServer_SetCurrentItemCompleteRequest, Mavsdk_Rpc_MissionRawServer_SetCurrentItemCompleteResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeClearAll'.
  func makeSubscribeClearAllInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_MissionRawServer_SubscribeClearAllRequest, Mavsdk_Rpc_MissionRawServer_ClearAllResponse>]
}

internal final class Mavsdk_Rpc_MissionRawServer_MissionRawServerServiceClient: Mavsdk_Rpc_MissionRawServer_MissionRawServerServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Mavsdk_Rpc_MissionRawServer_MissionRawServerServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the mavsdk.rpc.mission_raw_server.MissionRawServerService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Mavsdk_Rpc_MissionRawServer_MissionRawServerServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Acts as a vehicle and receives incoming missions from GCS (in raw MAVLINK format). 
/// Provides current mission item state, so the server can progress through missions.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Mavsdk_Rpc_MissionRawServer_MissionRawServerServiceProvider: CallHandlerProvider {
  var interceptors: Mavsdk_Rpc_MissionRawServer_MissionRawServerServiceServerInterceptorFactoryProtocol? { get }

  ///
  /// Subscribe to when a new mission is uploaded (asynchronous).
  func subscribeIncomingMission(request: Mavsdk_Rpc_MissionRawServer_SubscribeIncomingMissionRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_MissionRawServer_IncomingMissionResponse>) -> EventLoopFuture<GRPCStatus>

  ///
  /// Subscribe to when a new current item is set
  func subscribeCurrentItemChanged(request: Mavsdk_Rpc_MissionRawServer_SubscribeCurrentItemChangedRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_MissionRawServer_CurrentItemChangedResponse>) -> EventLoopFuture<GRPCStatus>

  ///
  ///  Set Current item as completed
  func setCurrentItemComplete(request: Mavsdk_Rpc_MissionRawServer_SetCurrentItemCompleteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_MissionRawServer_SetCurrentItemCompleteResponse>

  ///
  ///  Subscribe when a MISSION_CLEAR_ALL is received
  func subscribeClearAll(request: Mavsdk_Rpc_MissionRawServer_SubscribeClearAllRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_MissionRawServer_ClearAllResponse>) -> EventLoopFuture<GRPCStatus>
}

extension Mavsdk_Rpc_MissionRawServer_MissionRawServerServiceProvider {
  internal var serviceName: Substring { return "mavsdk.rpc.mission_raw_server.MissionRawServerService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SubscribeIncomingMission":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_MissionRawServer_SubscribeIncomingMissionRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_MissionRawServer_IncomingMissionResponse>(),
        interceptors: self.interceptors?.makeSubscribeIncomingMissionInterceptors() ?? [],
        userFunction: self.subscribeIncomingMission(request:context:)
      )

    case "SubscribeCurrentItemChanged":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_MissionRawServer_SubscribeCurrentItemChangedRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_MissionRawServer_CurrentItemChangedResponse>(),
        interceptors: self.interceptors?.makeSubscribeCurrentItemChangedInterceptors() ?? [],
        userFunction: self.subscribeCurrentItemChanged(request:context:)
      )

    case "SetCurrentItemComplete":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_MissionRawServer_SetCurrentItemCompleteRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_MissionRawServer_SetCurrentItemCompleteResponse>(),
        interceptors: self.interceptors?.makeSetCurrentItemCompleteInterceptors() ?? [],
        userFunction: self.setCurrentItemComplete(request:context:)
      )

    case "SubscribeClearAll":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_MissionRawServer_SubscribeClearAllRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_MissionRawServer_ClearAllResponse>(),
        interceptors: self.interceptors?.makeSubscribeClearAllInterceptors() ?? [],
        userFunction: self.subscribeClearAll(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Mavsdk_Rpc_MissionRawServer_MissionRawServerServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'subscribeIncomingMission'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeIncomingMissionInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_MissionRawServer_SubscribeIncomingMissionRequest, Mavsdk_Rpc_MissionRawServer_IncomingMissionResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeCurrentItemChanged'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeCurrentItemChangedInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_MissionRawServer_SubscribeCurrentItemChangedRequest, Mavsdk_Rpc_MissionRawServer_CurrentItemChangedResponse>]

  /// - Returns: Interceptors to use when handling 'setCurrentItemComplete'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetCurrentItemCompleteInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_MissionRawServer_SetCurrentItemCompleteRequest, Mavsdk_Rpc_MissionRawServer_SetCurrentItemCompleteResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeClearAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeClearAllInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_MissionRawServer_SubscribeClearAllRequest, Mavsdk_Rpc_MissionRawServer_ClearAllResponse>]
}
