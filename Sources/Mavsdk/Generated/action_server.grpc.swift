//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: action_server.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Provide vehicle actions (as a server) such as arming, taking off, and landing.
///
/// Usage: instantiate `Mavsdk_Rpc_ActionServer_ActionServerServiceClient`, then call methods of this protocol to make API calls.
internal protocol Mavsdk_Rpc_ActionServer_ActionServerServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Mavsdk_Rpc_ActionServer_ActionServerServiceClientInterceptorFactoryProtocol? { get }

  func subscribeArmDisarm(
    _ request: Mavsdk_Rpc_ActionServer_SubscribeArmDisarmRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_ActionServer_ArmDisarmResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_ActionServer_SubscribeArmDisarmRequest, Mavsdk_Rpc_ActionServer_ArmDisarmResponse>

  func subscribeFlightModeChange(
    _ request: Mavsdk_Rpc_ActionServer_SubscribeFlightModeChangeRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_ActionServer_FlightModeChangeResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_ActionServer_SubscribeFlightModeChangeRequest, Mavsdk_Rpc_ActionServer_FlightModeChangeResponse>

  func subscribeTakeoff(
    _ request: Mavsdk_Rpc_ActionServer_SubscribeTakeoffRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_ActionServer_TakeoffResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_ActionServer_SubscribeTakeoffRequest, Mavsdk_Rpc_ActionServer_TakeoffResponse>

  func subscribeLand(
    _ request: Mavsdk_Rpc_ActionServer_SubscribeLandRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_ActionServer_LandResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_ActionServer_SubscribeLandRequest, Mavsdk_Rpc_ActionServer_LandResponse>

  func subscribeReboot(
    _ request: Mavsdk_Rpc_ActionServer_SubscribeRebootRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_ActionServer_RebootResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_ActionServer_SubscribeRebootRequest, Mavsdk_Rpc_ActionServer_RebootResponse>

  func subscribeShutdown(
    _ request: Mavsdk_Rpc_ActionServer_SubscribeShutdownRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_ActionServer_ShutdownResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_ActionServer_SubscribeShutdownRequest, Mavsdk_Rpc_ActionServer_ShutdownResponse>

  func subscribeTerminate(
    _ request: Mavsdk_Rpc_ActionServer_SubscribeTerminateRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_ActionServer_TerminateResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_ActionServer_SubscribeTerminateRequest, Mavsdk_Rpc_ActionServer_TerminateResponse>

  func setAllowTakeoff(
    _ request: Mavsdk_Rpc_ActionServer_SetAllowTakeoffRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_ActionServer_SetAllowTakeoffRequest, Mavsdk_Rpc_ActionServer_SetAllowTakeoffResponse>

  func setArmable(
    _ request: Mavsdk_Rpc_ActionServer_SetArmableRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_ActionServer_SetArmableRequest, Mavsdk_Rpc_ActionServer_SetArmableResponse>

  func setDisarmable(
    _ request: Mavsdk_Rpc_ActionServer_SetDisarmableRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_ActionServer_SetDisarmableRequest, Mavsdk_Rpc_ActionServer_SetDisarmableResponse>

  func setAllowableFlightModes(
    _ request: Mavsdk_Rpc_ActionServer_SetAllowableFlightModesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_ActionServer_SetAllowableFlightModesRequest, Mavsdk_Rpc_ActionServer_SetAllowableFlightModesResponse>

  func getAllowableFlightModes(
    _ request: Mavsdk_Rpc_ActionServer_GetAllowableFlightModesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_ActionServer_GetAllowableFlightModesRequest, Mavsdk_Rpc_ActionServer_GetAllowableFlightModesResponse>
}

extension Mavsdk_Rpc_ActionServer_ActionServerServiceClientProtocol {
  internal var serviceName: String {
    return "mavsdk.rpc.action_server.ActionServerService"
  }

  /// Subscribe to ARM/DISARM commands
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeArmDisarm.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeArmDisarm(
    _ request: Mavsdk_Rpc_ActionServer_SubscribeArmDisarmRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_ActionServer_ArmDisarmResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_ActionServer_SubscribeArmDisarmRequest, Mavsdk_Rpc_ActionServer_ArmDisarmResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.action_server.ActionServerService/SubscribeArmDisarm",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeArmDisarmInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to DO_SET_MODE
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeFlightModeChange.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeFlightModeChange(
    _ request: Mavsdk_Rpc_ActionServer_SubscribeFlightModeChangeRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_ActionServer_FlightModeChangeResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_ActionServer_SubscribeFlightModeChangeRequest, Mavsdk_Rpc_ActionServer_FlightModeChangeResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.action_server.ActionServerService/SubscribeFlightModeChange",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeFlightModeChangeInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to takeoff command
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeTakeoff.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeTakeoff(
    _ request: Mavsdk_Rpc_ActionServer_SubscribeTakeoffRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_ActionServer_TakeoffResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_ActionServer_SubscribeTakeoffRequest, Mavsdk_Rpc_ActionServer_TakeoffResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.action_server.ActionServerService/SubscribeTakeoff",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeTakeoffInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to land command
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeLand.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeLand(
    _ request: Mavsdk_Rpc_ActionServer_SubscribeLandRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_ActionServer_LandResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_ActionServer_SubscribeLandRequest, Mavsdk_Rpc_ActionServer_LandResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.action_server.ActionServerService/SubscribeLand",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeLandInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to reboot command
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeReboot.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeReboot(
    _ request: Mavsdk_Rpc_ActionServer_SubscribeRebootRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_ActionServer_RebootResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_ActionServer_SubscribeRebootRequest, Mavsdk_Rpc_ActionServer_RebootResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.action_server.ActionServerService/SubscribeReboot",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeRebootInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to shutdown command
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeShutdown.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeShutdown(
    _ request: Mavsdk_Rpc_ActionServer_SubscribeShutdownRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_ActionServer_ShutdownResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_ActionServer_SubscribeShutdownRequest, Mavsdk_Rpc_ActionServer_ShutdownResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.action_server.ActionServerService/SubscribeShutdown",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeShutdownInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to terminate command
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeTerminate.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeTerminate(
    _ request: Mavsdk_Rpc_ActionServer_SubscribeTerminateRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_ActionServer_TerminateResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_ActionServer_SubscribeTerminateRequest, Mavsdk_Rpc_ActionServer_TerminateResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.action_server.ActionServerService/SubscribeTerminate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeTerminateInterceptors() ?? [],
      handler: handler
    )
  }

  /// Can the vehicle takeoff
  ///
  /// - Parameters:
  ///   - request: Request to send to SetAllowTakeoff.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setAllowTakeoff(
    _ request: Mavsdk_Rpc_ActionServer_SetAllowTakeoffRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_ActionServer_SetAllowTakeoffRequest, Mavsdk_Rpc_ActionServer_SetAllowTakeoffResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.action_server.ActionServerService/SetAllowTakeoff",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetAllowTakeoffInterceptors() ?? []
    )
  }

  /// Can the vehicle arm when requested
  ///
  /// - Parameters:
  ///   - request: Request to send to SetArmable.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setArmable(
    _ request: Mavsdk_Rpc_ActionServer_SetArmableRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_ActionServer_SetArmableRequest, Mavsdk_Rpc_ActionServer_SetArmableResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.action_server.ActionServerService/SetArmable",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetArmableInterceptors() ?? []
    )
  }

  /// Can the vehicle disarm when requested
  ///
  /// - Parameters:
  ///   - request: Request to send to SetDisarmable.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setDisarmable(
    _ request: Mavsdk_Rpc_ActionServer_SetDisarmableRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_ActionServer_SetDisarmableRequest, Mavsdk_Rpc_ActionServer_SetDisarmableResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.action_server.ActionServerService/SetDisarmable",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetDisarmableInterceptors() ?? []
    )
  }

  /// Set which modes the vehicle can transition to (Manual always allowed)
  ///
  /// - Parameters:
  ///   - request: Request to send to SetAllowableFlightModes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setAllowableFlightModes(
    _ request: Mavsdk_Rpc_ActionServer_SetAllowableFlightModesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_ActionServer_SetAllowableFlightModesRequest, Mavsdk_Rpc_ActionServer_SetAllowableFlightModesResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.action_server.ActionServerService/SetAllowableFlightModes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetAllowableFlightModesInterceptors() ?? []
    )
  }

  /// Get which modes the vehicle can transition to (Manual always allowed)
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAllowableFlightModes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAllowableFlightModes(
    _ request: Mavsdk_Rpc_ActionServer_GetAllowableFlightModesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_ActionServer_GetAllowableFlightModesRequest, Mavsdk_Rpc_ActionServer_GetAllowableFlightModesResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.action_server.ActionServerService/GetAllowableFlightModes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllowableFlightModesInterceptors() ?? []
    )
  }
}

internal protocol Mavsdk_Rpc_ActionServer_ActionServerServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'subscribeArmDisarm'.
  func makeSubscribeArmDisarmInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_ActionServer_SubscribeArmDisarmRequest, Mavsdk_Rpc_ActionServer_ArmDisarmResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeFlightModeChange'.
  func makeSubscribeFlightModeChangeInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_ActionServer_SubscribeFlightModeChangeRequest, Mavsdk_Rpc_ActionServer_FlightModeChangeResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeTakeoff'.
  func makeSubscribeTakeoffInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_ActionServer_SubscribeTakeoffRequest, Mavsdk_Rpc_ActionServer_TakeoffResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeLand'.
  func makeSubscribeLandInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_ActionServer_SubscribeLandRequest, Mavsdk_Rpc_ActionServer_LandResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeReboot'.
  func makeSubscribeRebootInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_ActionServer_SubscribeRebootRequest, Mavsdk_Rpc_ActionServer_RebootResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeShutdown'.
  func makeSubscribeShutdownInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_ActionServer_SubscribeShutdownRequest, Mavsdk_Rpc_ActionServer_ShutdownResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeTerminate'.
  func makeSubscribeTerminateInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_ActionServer_SubscribeTerminateRequest, Mavsdk_Rpc_ActionServer_TerminateResponse>]

  /// - Returns: Interceptors to use when invoking 'setAllowTakeoff'.
  func makeSetAllowTakeoffInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_ActionServer_SetAllowTakeoffRequest, Mavsdk_Rpc_ActionServer_SetAllowTakeoffResponse>]

  /// - Returns: Interceptors to use when invoking 'setArmable'.
  func makeSetArmableInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_ActionServer_SetArmableRequest, Mavsdk_Rpc_ActionServer_SetArmableResponse>]

  /// - Returns: Interceptors to use when invoking 'setDisarmable'.
  func makeSetDisarmableInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_ActionServer_SetDisarmableRequest, Mavsdk_Rpc_ActionServer_SetDisarmableResponse>]

  /// - Returns: Interceptors to use when invoking 'setAllowableFlightModes'.
  func makeSetAllowableFlightModesInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_ActionServer_SetAllowableFlightModesRequest, Mavsdk_Rpc_ActionServer_SetAllowableFlightModesResponse>]

  /// - Returns: Interceptors to use when invoking 'getAllowableFlightModes'.
  func makeGetAllowableFlightModesInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_ActionServer_GetAllowableFlightModesRequest, Mavsdk_Rpc_ActionServer_GetAllowableFlightModesResponse>]
}

internal final class Mavsdk_Rpc_ActionServer_ActionServerServiceClient: Mavsdk_Rpc_ActionServer_ActionServerServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Mavsdk_Rpc_ActionServer_ActionServerServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the mavsdk.rpc.action_server.ActionServerService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Mavsdk_Rpc_ActionServer_ActionServerServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Provide vehicle actions (as a server) such as arming, taking off, and landing.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Mavsdk_Rpc_ActionServer_ActionServerServiceProvider: CallHandlerProvider {
  var interceptors: Mavsdk_Rpc_ActionServer_ActionServerServiceServerInterceptorFactoryProtocol? { get }

  /// Subscribe to ARM/DISARM commands
  func subscribeArmDisarm(request: Mavsdk_Rpc_ActionServer_SubscribeArmDisarmRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_ActionServer_ArmDisarmResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to DO_SET_MODE
  func subscribeFlightModeChange(request: Mavsdk_Rpc_ActionServer_SubscribeFlightModeChangeRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_ActionServer_FlightModeChangeResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to takeoff command
  func subscribeTakeoff(request: Mavsdk_Rpc_ActionServer_SubscribeTakeoffRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_ActionServer_TakeoffResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to land command
  func subscribeLand(request: Mavsdk_Rpc_ActionServer_SubscribeLandRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_ActionServer_LandResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to reboot command
  func subscribeReboot(request: Mavsdk_Rpc_ActionServer_SubscribeRebootRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_ActionServer_RebootResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to shutdown command
  func subscribeShutdown(request: Mavsdk_Rpc_ActionServer_SubscribeShutdownRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_ActionServer_ShutdownResponse>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to terminate command
  func subscribeTerminate(request: Mavsdk_Rpc_ActionServer_SubscribeTerminateRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_ActionServer_TerminateResponse>) -> EventLoopFuture<GRPCStatus>

  /// Can the vehicle takeoff
  func setAllowTakeoff(request: Mavsdk_Rpc_ActionServer_SetAllowTakeoffRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_ActionServer_SetAllowTakeoffResponse>

  /// Can the vehicle arm when requested
  func setArmable(request: Mavsdk_Rpc_ActionServer_SetArmableRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_ActionServer_SetArmableResponse>

  /// Can the vehicle disarm when requested
  func setDisarmable(request: Mavsdk_Rpc_ActionServer_SetDisarmableRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_ActionServer_SetDisarmableResponse>

  /// Set which modes the vehicle can transition to (Manual always allowed)
  func setAllowableFlightModes(request: Mavsdk_Rpc_ActionServer_SetAllowableFlightModesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_ActionServer_SetAllowableFlightModesResponse>

  /// Get which modes the vehicle can transition to (Manual always allowed)
  func getAllowableFlightModes(request: Mavsdk_Rpc_ActionServer_GetAllowableFlightModesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_ActionServer_GetAllowableFlightModesResponse>
}

extension Mavsdk_Rpc_ActionServer_ActionServerServiceProvider {
  internal var serviceName: Substring { return "mavsdk.rpc.action_server.ActionServerService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SubscribeArmDisarm":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_ActionServer_SubscribeArmDisarmRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_ActionServer_ArmDisarmResponse>(),
        interceptors: self.interceptors?.makeSubscribeArmDisarmInterceptors() ?? [],
        userFunction: self.subscribeArmDisarm(request:context:)
      )

    case "SubscribeFlightModeChange":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_ActionServer_SubscribeFlightModeChangeRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_ActionServer_FlightModeChangeResponse>(),
        interceptors: self.interceptors?.makeSubscribeFlightModeChangeInterceptors() ?? [],
        userFunction: self.subscribeFlightModeChange(request:context:)
      )

    case "SubscribeTakeoff":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_ActionServer_SubscribeTakeoffRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_ActionServer_TakeoffResponse>(),
        interceptors: self.interceptors?.makeSubscribeTakeoffInterceptors() ?? [],
        userFunction: self.subscribeTakeoff(request:context:)
      )

    case "SubscribeLand":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_ActionServer_SubscribeLandRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_ActionServer_LandResponse>(),
        interceptors: self.interceptors?.makeSubscribeLandInterceptors() ?? [],
        userFunction: self.subscribeLand(request:context:)
      )

    case "SubscribeReboot":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_ActionServer_SubscribeRebootRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_ActionServer_RebootResponse>(),
        interceptors: self.interceptors?.makeSubscribeRebootInterceptors() ?? [],
        userFunction: self.subscribeReboot(request:context:)
      )

    case "SubscribeShutdown":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_ActionServer_SubscribeShutdownRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_ActionServer_ShutdownResponse>(),
        interceptors: self.interceptors?.makeSubscribeShutdownInterceptors() ?? [],
        userFunction: self.subscribeShutdown(request:context:)
      )

    case "SubscribeTerminate":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_ActionServer_SubscribeTerminateRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_ActionServer_TerminateResponse>(),
        interceptors: self.interceptors?.makeSubscribeTerminateInterceptors() ?? [],
        userFunction: self.subscribeTerminate(request:context:)
      )

    case "SetAllowTakeoff":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_ActionServer_SetAllowTakeoffRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_ActionServer_SetAllowTakeoffResponse>(),
        interceptors: self.interceptors?.makeSetAllowTakeoffInterceptors() ?? [],
        userFunction: self.setAllowTakeoff(request:context:)
      )

    case "SetArmable":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_ActionServer_SetArmableRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_ActionServer_SetArmableResponse>(),
        interceptors: self.interceptors?.makeSetArmableInterceptors() ?? [],
        userFunction: self.setArmable(request:context:)
      )

    case "SetDisarmable":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_ActionServer_SetDisarmableRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_ActionServer_SetDisarmableResponse>(),
        interceptors: self.interceptors?.makeSetDisarmableInterceptors() ?? [],
        userFunction: self.setDisarmable(request:context:)
      )

    case "SetAllowableFlightModes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_ActionServer_SetAllowableFlightModesRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_ActionServer_SetAllowableFlightModesResponse>(),
        interceptors: self.interceptors?.makeSetAllowableFlightModesInterceptors() ?? [],
        userFunction: self.setAllowableFlightModes(request:context:)
      )

    case "GetAllowableFlightModes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_ActionServer_GetAllowableFlightModesRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_ActionServer_GetAllowableFlightModesResponse>(),
        interceptors: self.interceptors?.makeGetAllowableFlightModesInterceptors() ?? [],
        userFunction: self.getAllowableFlightModes(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Mavsdk_Rpc_ActionServer_ActionServerServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'subscribeArmDisarm'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeArmDisarmInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_ActionServer_SubscribeArmDisarmRequest, Mavsdk_Rpc_ActionServer_ArmDisarmResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeFlightModeChange'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeFlightModeChangeInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_ActionServer_SubscribeFlightModeChangeRequest, Mavsdk_Rpc_ActionServer_FlightModeChangeResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeTakeoff'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeTakeoffInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_ActionServer_SubscribeTakeoffRequest, Mavsdk_Rpc_ActionServer_TakeoffResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeLand'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeLandInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_ActionServer_SubscribeLandRequest, Mavsdk_Rpc_ActionServer_LandResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeReboot'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeRebootInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_ActionServer_SubscribeRebootRequest, Mavsdk_Rpc_ActionServer_RebootResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeShutdown'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeShutdownInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_ActionServer_SubscribeShutdownRequest, Mavsdk_Rpc_ActionServer_ShutdownResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeTerminate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeTerminateInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_ActionServer_SubscribeTerminateRequest, Mavsdk_Rpc_ActionServer_TerminateResponse>]

  /// - Returns: Interceptors to use when handling 'setAllowTakeoff'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetAllowTakeoffInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_ActionServer_SetAllowTakeoffRequest, Mavsdk_Rpc_ActionServer_SetAllowTakeoffResponse>]

  /// - Returns: Interceptors to use when handling 'setArmable'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetArmableInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_ActionServer_SetArmableRequest, Mavsdk_Rpc_ActionServer_SetArmableResponse>]

  /// - Returns: Interceptors to use when handling 'setDisarmable'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetDisarmableInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_ActionServer_SetDisarmableRequest, Mavsdk_Rpc_ActionServer_SetDisarmableResponse>]

  /// - Returns: Interceptors to use when handling 'setAllowableFlightModes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetAllowableFlightModesInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_ActionServer_SetAllowableFlightModesRequest, Mavsdk_Rpc_ActionServer_SetAllowableFlightModesResponse>]

  /// - Returns: Interceptors to use when handling 'getAllowableFlightModes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAllowableFlightModesInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_ActionServer_GetAllowableFlightModesRequest, Mavsdk_Rpc_ActionServer_GetAllowableFlightModesResponse>]
}
