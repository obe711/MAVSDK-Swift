//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: offboard.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


///*
/// Control a drone with position, velocity, attitude or motor commands.
///
/// The module is called offboard because the commands can be sent from external sources
/// as opposed to onboard control right inside the autopilot "board".
///
/// Client code must specify a setpoint before starting offboard mode.
/// Mavsdk automatically sends setpoints at 20Hz (PX4 Offboard mode requires that setpoints
/// are minimally sent at 2Hz).
///
/// Usage: instantiate `Mavsdk_Rpc_Offboard_OffboardServiceClient`, then call methods of this protocol to make API calls.
internal protocol Mavsdk_Rpc_Offboard_OffboardServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Mavsdk_Rpc_Offboard_OffboardServiceClientInterceptorFactoryProtocol? { get }

  func start(
    _ request: Mavsdk_Rpc_Offboard_StartRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_StartRequest, Mavsdk_Rpc_Offboard_StartResponse>

  func stop(
    _ request: Mavsdk_Rpc_Offboard_StopRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_StopRequest, Mavsdk_Rpc_Offboard_StopResponse>

  func isActive(
    _ request: Mavsdk_Rpc_Offboard_IsActiveRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_IsActiveRequest, Mavsdk_Rpc_Offboard_IsActiveResponse>

  func setAttitude(
    _ request: Mavsdk_Rpc_Offboard_SetAttitudeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetAttitudeRequest, Mavsdk_Rpc_Offboard_SetAttitudeResponse>

  func setActuatorControl(
    _ request: Mavsdk_Rpc_Offboard_SetActuatorControlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetActuatorControlRequest, Mavsdk_Rpc_Offboard_SetActuatorControlResponse>

  func setAttitudeRate(
    _ request: Mavsdk_Rpc_Offboard_SetAttitudeRateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetAttitudeRateRequest, Mavsdk_Rpc_Offboard_SetAttitudeRateResponse>

  func setPositionNed(
    _ request: Mavsdk_Rpc_Offboard_SetPositionNedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetPositionNedRequest, Mavsdk_Rpc_Offboard_SetPositionNedResponse>

  func setPositionGlobal(
    _ request: Mavsdk_Rpc_Offboard_SetPositionGlobalRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetPositionGlobalRequest, Mavsdk_Rpc_Offboard_SetPositionGlobalResponse>

  func setVelocityBody(
    _ request: Mavsdk_Rpc_Offboard_SetVelocityBodyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetVelocityBodyRequest, Mavsdk_Rpc_Offboard_SetVelocityBodyResponse>

  func setVelocityNed(
    _ request: Mavsdk_Rpc_Offboard_SetVelocityNedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetVelocityNedRequest, Mavsdk_Rpc_Offboard_SetVelocityNedResponse>

  func setPositionVelocityNed(
    _ request: Mavsdk_Rpc_Offboard_SetPositionVelocityNedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetPositionVelocityNedRequest, Mavsdk_Rpc_Offboard_SetPositionVelocityNedResponse>

  func setAccelerationNed(
    _ request: Mavsdk_Rpc_Offboard_SetAccelerationNedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetAccelerationNedRequest, Mavsdk_Rpc_Offboard_SetAccelerationNedResponse>
}

extension Mavsdk_Rpc_Offboard_OffboardServiceClientProtocol {
  internal var serviceName: String {
    return "mavsdk.rpc.offboard.OffboardService"
  }

  ///
  /// Start offboard control.
  ///
  /// - Parameters:
  ///   - request: Request to send to Start.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func start(
    _ request: Mavsdk_Rpc_Offboard_StartRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_StartRequest, Mavsdk_Rpc_Offboard_StartResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.offboard.OffboardService/Start",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartInterceptors() ?? []
    )
  }

  ///
  /// Stop offboard control.
  ///
  /// The vehicle will be put into Hold mode: https://docs.px4.io/en/flight_modes/hold.html
  ///
  /// - Parameters:
  ///   - request: Request to send to Stop.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stop(
    _ request: Mavsdk_Rpc_Offboard_StopRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_StopRequest, Mavsdk_Rpc_Offboard_StopResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.offboard.OffboardService/Stop",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStopInterceptors() ?? []
    )
  }

  ///
  /// Check if offboard control is active.
  ///
  /// True means that the vehicle is in offboard mode and we are actively sending
  /// setpoints.
  ///
  /// - Parameters:
  ///   - request: Request to send to IsActive.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func isActive(
    _ request: Mavsdk_Rpc_Offboard_IsActiveRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_IsActiveRequest, Mavsdk_Rpc_Offboard_IsActiveResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.offboard.OffboardService/IsActive",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsActiveInterceptors() ?? []
    )
  }

  ///
  /// Set the attitude in terms of roll, pitch and yaw in degrees with thrust.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetAttitude.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setAttitude(
    _ request: Mavsdk_Rpc_Offboard_SetAttitudeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetAttitudeRequest, Mavsdk_Rpc_Offboard_SetAttitudeResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.offboard.OffboardService/SetAttitude",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetAttitudeInterceptors() ?? []
    )
  }

  ///
  /// Set direct actuator control values to groups #0 and #1.
  ///
  /// First 8 controls will go to control group 0, the following 8 controls to control group 1 (if
  /// actuator_control.num_controls more than 8).
  ///
  /// - Parameters:
  ///   - request: Request to send to SetActuatorControl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setActuatorControl(
    _ request: Mavsdk_Rpc_Offboard_SetActuatorControlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetActuatorControlRequest, Mavsdk_Rpc_Offboard_SetActuatorControlResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.offboard.OffboardService/SetActuatorControl",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetActuatorControlInterceptors() ?? []
    )
  }

  ///
  /// Set the attitude rate in terms of pitch, roll and yaw angular rate along with thrust.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetAttitudeRate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setAttitudeRate(
    _ request: Mavsdk_Rpc_Offboard_SetAttitudeRateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetAttitudeRateRequest, Mavsdk_Rpc_Offboard_SetAttitudeRateResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.offboard.OffboardService/SetAttitudeRate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetAttitudeRateInterceptors() ?? []
    )
  }

  ///
  /// Set the position in NED coordinates and yaw.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetPositionNed.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setPositionNed(
    _ request: Mavsdk_Rpc_Offboard_SetPositionNedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetPositionNedRequest, Mavsdk_Rpc_Offboard_SetPositionNedResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.offboard.OffboardService/SetPositionNed",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetPositionNedInterceptors() ?? []
    )
  }

  ///
  /// Set the position in Global coordinates (latitude, longitude, altitude) and yaw
  ///
  /// - Parameters:
  ///   - request: Request to send to SetPositionGlobal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setPositionGlobal(
    _ request: Mavsdk_Rpc_Offboard_SetPositionGlobalRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetPositionGlobalRequest, Mavsdk_Rpc_Offboard_SetPositionGlobalResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.offboard.OffboardService/SetPositionGlobal",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetPositionGlobalInterceptors() ?? []
    )
  }

  ///
  /// Set the velocity in body coordinates and yaw angular rate. Not available for fixed-wing aircraft.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetVelocityBody.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setVelocityBody(
    _ request: Mavsdk_Rpc_Offboard_SetVelocityBodyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetVelocityBodyRequest, Mavsdk_Rpc_Offboard_SetVelocityBodyResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.offboard.OffboardService/SetVelocityBody",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetVelocityBodyInterceptors() ?? []
    )
  }

  ///
  /// Set the velocity in NED coordinates and yaw. Not available for fixed-wing aircraft.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetVelocityNed.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setVelocityNed(
    _ request: Mavsdk_Rpc_Offboard_SetVelocityNedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetVelocityNedRequest, Mavsdk_Rpc_Offboard_SetVelocityNedResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.offboard.OffboardService/SetVelocityNed",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetVelocityNedInterceptors() ?? []
    )
  }

  ///
  /// Set the position in NED coordinates, with the velocity to be used as feed-forward.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetPositionVelocityNed.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setPositionVelocityNed(
    _ request: Mavsdk_Rpc_Offboard_SetPositionVelocityNedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetPositionVelocityNedRequest, Mavsdk_Rpc_Offboard_SetPositionVelocityNedResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.offboard.OffboardService/SetPositionVelocityNed",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetPositionVelocityNedInterceptors() ?? []
    )
  }

  ///
  /// Set the acceleration in NED coordinates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetAccelerationNed.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setAccelerationNed(
    _ request: Mavsdk_Rpc_Offboard_SetAccelerationNedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetAccelerationNedRequest, Mavsdk_Rpc_Offboard_SetAccelerationNedResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.offboard.OffboardService/SetAccelerationNed",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetAccelerationNedInterceptors() ?? []
    )
  }
}

internal protocol Mavsdk_Rpc_Offboard_OffboardServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'start'.
  func makeStartInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Offboard_StartRequest, Mavsdk_Rpc_Offboard_StartResponse>]

  /// - Returns: Interceptors to use when invoking 'stop'.
  func makeStopInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Offboard_StopRequest, Mavsdk_Rpc_Offboard_StopResponse>]

  /// - Returns: Interceptors to use when invoking 'isActive'.
  func makeIsActiveInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Offboard_IsActiveRequest, Mavsdk_Rpc_Offboard_IsActiveResponse>]

  /// - Returns: Interceptors to use when invoking 'setAttitude'.
  func makeSetAttitudeInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Offboard_SetAttitudeRequest, Mavsdk_Rpc_Offboard_SetAttitudeResponse>]

  /// - Returns: Interceptors to use when invoking 'setActuatorControl'.
  func makeSetActuatorControlInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Offboard_SetActuatorControlRequest, Mavsdk_Rpc_Offboard_SetActuatorControlResponse>]

  /// - Returns: Interceptors to use when invoking 'setAttitudeRate'.
  func makeSetAttitudeRateInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Offboard_SetAttitudeRateRequest, Mavsdk_Rpc_Offboard_SetAttitudeRateResponse>]

  /// - Returns: Interceptors to use when invoking 'setPositionNed'.
  func makeSetPositionNedInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Offboard_SetPositionNedRequest, Mavsdk_Rpc_Offboard_SetPositionNedResponse>]

  /// - Returns: Interceptors to use when invoking 'setPositionGlobal'.
  func makeSetPositionGlobalInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Offboard_SetPositionGlobalRequest, Mavsdk_Rpc_Offboard_SetPositionGlobalResponse>]

  /// - Returns: Interceptors to use when invoking 'setVelocityBody'.
  func makeSetVelocityBodyInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Offboard_SetVelocityBodyRequest, Mavsdk_Rpc_Offboard_SetVelocityBodyResponse>]

  /// - Returns: Interceptors to use when invoking 'setVelocityNed'.
  func makeSetVelocityNedInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Offboard_SetVelocityNedRequest, Mavsdk_Rpc_Offboard_SetVelocityNedResponse>]

  /// - Returns: Interceptors to use when invoking 'setPositionVelocityNed'.
  func makeSetPositionVelocityNedInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Offboard_SetPositionVelocityNedRequest, Mavsdk_Rpc_Offboard_SetPositionVelocityNedResponse>]

  /// - Returns: Interceptors to use when invoking 'setAccelerationNed'.
  func makeSetAccelerationNedInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Offboard_SetAccelerationNedRequest, Mavsdk_Rpc_Offboard_SetAccelerationNedResponse>]
}

internal final class Mavsdk_Rpc_Offboard_OffboardServiceClient: Mavsdk_Rpc_Offboard_OffboardServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Mavsdk_Rpc_Offboard_OffboardServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the mavsdk.rpc.offboard.OffboardService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Mavsdk_Rpc_Offboard_OffboardServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///*
/// Control a drone with position, velocity, attitude or motor commands.
///
/// The module is called offboard because the commands can be sent from external sources
/// as opposed to onboard control right inside the autopilot "board".
///
/// Client code must specify a setpoint before starting offboard mode.
/// Mavsdk automatically sends setpoints at 20Hz (PX4 Offboard mode requires that setpoints
/// are minimally sent at 2Hz).
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Mavsdk_Rpc_Offboard_OffboardServiceProvider: CallHandlerProvider {
  var interceptors: Mavsdk_Rpc_Offboard_OffboardServiceServerInterceptorFactoryProtocol? { get }

  ///
  /// Start offboard control.
  func start(request: Mavsdk_Rpc_Offboard_StartRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Offboard_StartResponse>

  ///
  /// Stop offboard control.
  ///
  /// The vehicle will be put into Hold mode: https://docs.px4.io/en/flight_modes/hold.html
  func stop(request: Mavsdk_Rpc_Offboard_StopRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Offboard_StopResponse>

  ///
  /// Check if offboard control is active.
  ///
  /// True means that the vehicle is in offboard mode and we are actively sending
  /// setpoints.
  func isActive(request: Mavsdk_Rpc_Offboard_IsActiveRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Offboard_IsActiveResponse>

  ///
  /// Set the attitude in terms of roll, pitch and yaw in degrees with thrust.
  func setAttitude(request: Mavsdk_Rpc_Offboard_SetAttitudeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Offboard_SetAttitudeResponse>

  ///
  /// Set direct actuator control values to groups #0 and #1.
  ///
  /// First 8 controls will go to control group 0, the following 8 controls to control group 1 (if
  /// actuator_control.num_controls more than 8).
  func setActuatorControl(request: Mavsdk_Rpc_Offboard_SetActuatorControlRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Offboard_SetActuatorControlResponse>

  ///
  /// Set the attitude rate in terms of pitch, roll and yaw angular rate along with thrust.
  func setAttitudeRate(request: Mavsdk_Rpc_Offboard_SetAttitudeRateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Offboard_SetAttitudeRateResponse>

  ///
  /// Set the position in NED coordinates and yaw.
  func setPositionNed(request: Mavsdk_Rpc_Offboard_SetPositionNedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Offboard_SetPositionNedResponse>

  ///
  /// Set the position in Global coordinates (latitude, longitude, altitude) and yaw
  func setPositionGlobal(request: Mavsdk_Rpc_Offboard_SetPositionGlobalRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Offboard_SetPositionGlobalResponse>

  ///
  /// Set the velocity in body coordinates and yaw angular rate. Not available for fixed-wing aircraft.
  func setVelocityBody(request: Mavsdk_Rpc_Offboard_SetVelocityBodyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Offboard_SetVelocityBodyResponse>

  ///
  /// Set the velocity in NED coordinates and yaw. Not available for fixed-wing aircraft.
  func setVelocityNed(request: Mavsdk_Rpc_Offboard_SetVelocityNedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Offboard_SetVelocityNedResponse>

  ///
  /// Set the position in NED coordinates, with the velocity to be used as feed-forward.
  func setPositionVelocityNed(request: Mavsdk_Rpc_Offboard_SetPositionVelocityNedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Offboard_SetPositionVelocityNedResponse>

  ///
  /// Set the acceleration in NED coordinates.
  func setAccelerationNed(request: Mavsdk_Rpc_Offboard_SetAccelerationNedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Offboard_SetAccelerationNedResponse>
}

extension Mavsdk_Rpc_Offboard_OffboardServiceProvider {
  internal var serviceName: Substring { return "mavsdk.rpc.offboard.OffboardService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Start":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Offboard_StartRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Offboard_StartResponse>(),
        interceptors: self.interceptors?.makeStartInterceptors() ?? [],
        userFunction: self.start(request:context:)
      )

    case "Stop":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Offboard_StopRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Offboard_StopResponse>(),
        interceptors: self.interceptors?.makeStopInterceptors() ?? [],
        userFunction: self.stop(request:context:)
      )

    case "IsActive":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Offboard_IsActiveRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Offboard_IsActiveResponse>(),
        interceptors: self.interceptors?.makeIsActiveInterceptors() ?? [],
        userFunction: self.isActive(request:context:)
      )

    case "SetAttitude":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Offboard_SetAttitudeRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Offboard_SetAttitudeResponse>(),
        interceptors: self.interceptors?.makeSetAttitudeInterceptors() ?? [],
        userFunction: self.setAttitude(request:context:)
      )

    case "SetActuatorControl":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Offboard_SetActuatorControlRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Offboard_SetActuatorControlResponse>(),
        interceptors: self.interceptors?.makeSetActuatorControlInterceptors() ?? [],
        userFunction: self.setActuatorControl(request:context:)
      )

    case "SetAttitudeRate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Offboard_SetAttitudeRateRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Offboard_SetAttitudeRateResponse>(),
        interceptors: self.interceptors?.makeSetAttitudeRateInterceptors() ?? [],
        userFunction: self.setAttitudeRate(request:context:)
      )

    case "SetPositionNed":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Offboard_SetPositionNedRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Offboard_SetPositionNedResponse>(),
        interceptors: self.interceptors?.makeSetPositionNedInterceptors() ?? [],
        userFunction: self.setPositionNed(request:context:)
      )

    case "SetPositionGlobal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Offboard_SetPositionGlobalRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Offboard_SetPositionGlobalResponse>(),
        interceptors: self.interceptors?.makeSetPositionGlobalInterceptors() ?? [],
        userFunction: self.setPositionGlobal(request:context:)
      )

    case "SetVelocityBody":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Offboard_SetVelocityBodyRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Offboard_SetVelocityBodyResponse>(),
        interceptors: self.interceptors?.makeSetVelocityBodyInterceptors() ?? [],
        userFunction: self.setVelocityBody(request:context:)
      )

    case "SetVelocityNed":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Offboard_SetVelocityNedRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Offboard_SetVelocityNedResponse>(),
        interceptors: self.interceptors?.makeSetVelocityNedInterceptors() ?? [],
        userFunction: self.setVelocityNed(request:context:)
      )

    case "SetPositionVelocityNed":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Offboard_SetPositionVelocityNedRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Offboard_SetPositionVelocityNedResponse>(),
        interceptors: self.interceptors?.makeSetPositionVelocityNedInterceptors() ?? [],
        userFunction: self.setPositionVelocityNed(request:context:)
      )

    case "SetAccelerationNed":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Offboard_SetAccelerationNedRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Offboard_SetAccelerationNedResponse>(),
        interceptors: self.interceptors?.makeSetAccelerationNedInterceptors() ?? [],
        userFunction: self.setAccelerationNed(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Mavsdk_Rpc_Offboard_OffboardServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'start'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStartInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Offboard_StartRequest, Mavsdk_Rpc_Offboard_StartResponse>]

  /// - Returns: Interceptors to use when handling 'stop'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStopInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Offboard_StopRequest, Mavsdk_Rpc_Offboard_StopResponse>]

  /// - Returns: Interceptors to use when handling 'isActive'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIsActiveInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Offboard_IsActiveRequest, Mavsdk_Rpc_Offboard_IsActiveResponse>]

  /// - Returns: Interceptors to use when handling 'setAttitude'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetAttitudeInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Offboard_SetAttitudeRequest, Mavsdk_Rpc_Offboard_SetAttitudeResponse>]

  /// - Returns: Interceptors to use when handling 'setActuatorControl'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetActuatorControlInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Offboard_SetActuatorControlRequest, Mavsdk_Rpc_Offboard_SetActuatorControlResponse>]

  /// - Returns: Interceptors to use when handling 'setAttitudeRate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetAttitudeRateInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Offboard_SetAttitudeRateRequest, Mavsdk_Rpc_Offboard_SetAttitudeRateResponse>]

  /// - Returns: Interceptors to use when handling 'setPositionNed'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetPositionNedInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Offboard_SetPositionNedRequest, Mavsdk_Rpc_Offboard_SetPositionNedResponse>]

  /// - Returns: Interceptors to use when handling 'setPositionGlobal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetPositionGlobalInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Offboard_SetPositionGlobalRequest, Mavsdk_Rpc_Offboard_SetPositionGlobalResponse>]

  /// - Returns: Interceptors to use when handling 'setVelocityBody'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetVelocityBodyInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Offboard_SetVelocityBodyRequest, Mavsdk_Rpc_Offboard_SetVelocityBodyResponse>]

  /// - Returns: Interceptors to use when handling 'setVelocityNed'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetVelocityNedInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Offboard_SetVelocityNedRequest, Mavsdk_Rpc_Offboard_SetVelocityNedResponse>]

  /// - Returns: Interceptors to use when handling 'setPositionVelocityNed'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetPositionVelocityNedInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Offboard_SetPositionVelocityNedRequest, Mavsdk_Rpc_Offboard_SetPositionVelocityNedResponse>]

  /// - Returns: Interceptors to use when handling 'setAccelerationNed'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetAccelerationNedInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Offboard_SetAccelerationNedRequest, Mavsdk_Rpc_Offboard_SetAccelerationNedResponse>]
}
