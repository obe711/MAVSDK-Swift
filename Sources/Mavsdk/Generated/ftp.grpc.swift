//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ftp.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


///
/// Implements file transfer functionality using MAVLink FTP.
///
/// Usage: instantiate `Mavsdk_Rpc_Ftp_FtpServiceClient`, then call methods of this protocol to make API calls.
internal protocol Mavsdk_Rpc_Ftp_FtpServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Mavsdk_Rpc_Ftp_FtpServiceClientInterceptorFactoryProtocol? { get }

  func reset(
    _ request: Mavsdk_Rpc_Ftp_ResetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Ftp_ResetRequest, Mavsdk_Rpc_Ftp_ResetResponse>

  func subscribeDownload(
    _ request: Mavsdk_Rpc_Ftp_SubscribeDownloadRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Ftp_DownloadResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Ftp_SubscribeDownloadRequest, Mavsdk_Rpc_Ftp_DownloadResponse>

  func subscribeUpload(
    _ request: Mavsdk_Rpc_Ftp_SubscribeUploadRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Ftp_UploadResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Ftp_SubscribeUploadRequest, Mavsdk_Rpc_Ftp_UploadResponse>

  func listDirectory(
    _ request: Mavsdk_Rpc_Ftp_ListDirectoryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Ftp_ListDirectoryRequest, Mavsdk_Rpc_Ftp_ListDirectoryResponse>

  func createDirectory(
    _ request: Mavsdk_Rpc_Ftp_CreateDirectoryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Ftp_CreateDirectoryRequest, Mavsdk_Rpc_Ftp_CreateDirectoryResponse>

  func removeDirectory(
    _ request: Mavsdk_Rpc_Ftp_RemoveDirectoryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Ftp_RemoveDirectoryRequest, Mavsdk_Rpc_Ftp_RemoveDirectoryResponse>

  func removeFile(
    _ request: Mavsdk_Rpc_Ftp_RemoveFileRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Ftp_RemoveFileRequest, Mavsdk_Rpc_Ftp_RemoveFileResponse>

  func rename(
    _ request: Mavsdk_Rpc_Ftp_RenameRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Ftp_RenameRequest, Mavsdk_Rpc_Ftp_RenameResponse>

  func areFilesIdentical(
    _ request: Mavsdk_Rpc_Ftp_AreFilesIdenticalRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Ftp_AreFilesIdenticalRequest, Mavsdk_Rpc_Ftp_AreFilesIdenticalResponse>

  func setRootDirectory(
    _ request: Mavsdk_Rpc_Ftp_SetRootDirectoryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Ftp_SetRootDirectoryRequest, Mavsdk_Rpc_Ftp_SetRootDirectoryResponse>

  func setTargetCompid(
    _ request: Mavsdk_Rpc_Ftp_SetTargetCompidRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Ftp_SetTargetCompidRequest, Mavsdk_Rpc_Ftp_SetTargetCompidResponse>

  func getOurCompid(
    _ request: Mavsdk_Rpc_Ftp_GetOurCompidRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Ftp_GetOurCompidRequest, Mavsdk_Rpc_Ftp_GetOurCompidResponse>
}

extension Mavsdk_Rpc_Ftp_FtpServiceClientProtocol {
  internal var serviceName: String {
    return "mavsdk.rpc.ftp.FtpService"
  }

  ///
  /// Resets FTP server in case there are stale open sessions.
  ///
  /// - Parameters:
  ///   - request: Request to send to Reset.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func reset(
    _ request: Mavsdk_Rpc_Ftp_ResetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Ftp_ResetRequest, Mavsdk_Rpc_Ftp_ResetResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.ftp.FtpService/Reset",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResetInterceptors() ?? []
    )
  }

  ///
  /// Downloads a file to local directory.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeDownload.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeDownload(
    _ request: Mavsdk_Rpc_Ftp_SubscribeDownloadRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Ftp_DownloadResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Ftp_SubscribeDownloadRequest, Mavsdk_Rpc_Ftp_DownloadResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.ftp.FtpService/SubscribeDownload",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeDownloadInterceptors() ?? [],
      handler: handler
    )
  }

  ///
  /// Uploads local file to remote directory.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeUpload.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeUpload(
    _ request: Mavsdk_Rpc_Ftp_SubscribeUploadRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Ftp_UploadResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Ftp_SubscribeUploadRequest, Mavsdk_Rpc_Ftp_UploadResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.ftp.FtpService/SubscribeUpload",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeUploadInterceptors() ?? [],
      handler: handler
    )
  }

  ///
  /// Lists items from a remote directory.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListDirectory.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listDirectory(
    _ request: Mavsdk_Rpc_Ftp_ListDirectoryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Ftp_ListDirectoryRequest, Mavsdk_Rpc_Ftp_ListDirectoryResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.ftp.FtpService/ListDirectory",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListDirectoryInterceptors() ?? []
    )
  }

  ///
  /// Creates a remote directory.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateDirectory.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createDirectory(
    _ request: Mavsdk_Rpc_Ftp_CreateDirectoryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Ftp_CreateDirectoryRequest, Mavsdk_Rpc_Ftp_CreateDirectoryResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.ftp.FtpService/CreateDirectory",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDirectoryInterceptors() ?? []
    )
  }

  ///
  /// Removes a remote directory.
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveDirectory.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func removeDirectory(
    _ request: Mavsdk_Rpc_Ftp_RemoveDirectoryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Ftp_RemoveDirectoryRequest, Mavsdk_Rpc_Ftp_RemoveDirectoryResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.ftp.FtpService/RemoveDirectory",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveDirectoryInterceptors() ?? []
    )
  }

  ///
  /// Removes a remote file.
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveFile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func removeFile(
    _ request: Mavsdk_Rpc_Ftp_RemoveFileRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Ftp_RemoveFileRequest, Mavsdk_Rpc_Ftp_RemoveFileResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.ftp.FtpService/RemoveFile",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveFileInterceptors() ?? []
    )
  }

  ///
  /// Renames a remote file or remote directory.
  ///
  /// - Parameters:
  ///   - request: Request to send to Rename.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rename(
    _ request: Mavsdk_Rpc_Ftp_RenameRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Ftp_RenameRequest, Mavsdk_Rpc_Ftp_RenameResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.ftp.FtpService/Rename",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRenameInterceptors() ?? []
    )
  }

  ///
  /// Compares a local file to a remote file using a CRC32 checksum.
  ///
  /// - Parameters:
  ///   - request: Request to send to AreFilesIdentical.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func areFilesIdentical(
    _ request: Mavsdk_Rpc_Ftp_AreFilesIdenticalRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Ftp_AreFilesIdenticalRequest, Mavsdk_Rpc_Ftp_AreFilesIdenticalResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.ftp.FtpService/AreFilesIdentical",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAreFilesIdenticalInterceptors() ?? []
    )
  }

  ///
  /// Set root directory for MAVLink FTP server.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRootDirectory.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRootDirectory(
    _ request: Mavsdk_Rpc_Ftp_SetRootDirectoryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Ftp_SetRootDirectoryRequest, Mavsdk_Rpc_Ftp_SetRootDirectoryResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.ftp.FtpService/SetRootDirectory",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRootDirectoryInterceptors() ?? []
    )
  }

  ///
  /// Set target component ID. By default it is the autopilot.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetTargetCompid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setTargetCompid(
    _ request: Mavsdk_Rpc_Ftp_SetTargetCompidRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Ftp_SetTargetCompidRequest, Mavsdk_Rpc_Ftp_SetTargetCompidResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.ftp.FtpService/SetTargetCompid",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetTargetCompidInterceptors() ?? []
    )
  }

  ///
  /// Get our own component ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOurCompid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getOurCompid(
    _ request: Mavsdk_Rpc_Ftp_GetOurCompidRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Ftp_GetOurCompidRequest, Mavsdk_Rpc_Ftp_GetOurCompidResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.ftp.FtpService/GetOurCompid",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOurCompidInterceptors() ?? []
    )
  }
}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'reset'.
  func makeResetInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Ftp_ResetRequest, Mavsdk_Rpc_Ftp_ResetResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeDownload'.
  func makeSubscribeDownloadInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Ftp_SubscribeDownloadRequest, Mavsdk_Rpc_Ftp_DownloadResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeUpload'.
  func makeSubscribeUploadInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Ftp_SubscribeUploadRequest, Mavsdk_Rpc_Ftp_UploadResponse>]

  /// - Returns: Interceptors to use when invoking 'listDirectory'.
  func makeListDirectoryInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Ftp_ListDirectoryRequest, Mavsdk_Rpc_Ftp_ListDirectoryResponse>]

  /// - Returns: Interceptors to use when invoking 'createDirectory'.
  func makeCreateDirectoryInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Ftp_CreateDirectoryRequest, Mavsdk_Rpc_Ftp_CreateDirectoryResponse>]

  /// - Returns: Interceptors to use when invoking 'removeDirectory'.
  func makeRemoveDirectoryInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Ftp_RemoveDirectoryRequest, Mavsdk_Rpc_Ftp_RemoveDirectoryResponse>]

  /// - Returns: Interceptors to use when invoking 'removeFile'.
  func makeRemoveFileInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Ftp_RemoveFileRequest, Mavsdk_Rpc_Ftp_RemoveFileResponse>]

  /// - Returns: Interceptors to use when invoking 'rename'.
  func makeRenameInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Ftp_RenameRequest, Mavsdk_Rpc_Ftp_RenameResponse>]

  /// - Returns: Interceptors to use when invoking 'areFilesIdentical'.
  func makeAreFilesIdenticalInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Ftp_AreFilesIdenticalRequest, Mavsdk_Rpc_Ftp_AreFilesIdenticalResponse>]

  /// - Returns: Interceptors to use when invoking 'setRootDirectory'.
  func makeSetRootDirectoryInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Ftp_SetRootDirectoryRequest, Mavsdk_Rpc_Ftp_SetRootDirectoryResponse>]

  /// - Returns: Interceptors to use when invoking 'setTargetCompid'.
  func makeSetTargetCompidInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Ftp_SetTargetCompidRequest, Mavsdk_Rpc_Ftp_SetTargetCompidResponse>]

  /// - Returns: Interceptors to use when invoking 'getOurCompid'.
  func makeGetOurCompidInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Ftp_GetOurCompidRequest, Mavsdk_Rpc_Ftp_GetOurCompidResponse>]
}

internal final class Mavsdk_Rpc_Ftp_FtpServiceClient: Mavsdk_Rpc_Ftp_FtpServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Mavsdk_Rpc_Ftp_FtpServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the mavsdk.rpc.ftp.FtpService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Mavsdk_Rpc_Ftp_FtpServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///
/// Implements file transfer functionality using MAVLink FTP.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Mavsdk_Rpc_Ftp_FtpServiceProvider: CallHandlerProvider {
  var interceptors: Mavsdk_Rpc_Ftp_FtpServiceServerInterceptorFactoryProtocol? { get }

  ///
  /// Resets FTP server in case there are stale open sessions.
  func reset(request: Mavsdk_Rpc_Ftp_ResetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Ftp_ResetResponse>

  ///
  /// Downloads a file to local directory.
  func subscribeDownload(request: Mavsdk_Rpc_Ftp_SubscribeDownloadRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Ftp_DownloadResponse>) -> EventLoopFuture<GRPCStatus>

  ///
  /// Uploads local file to remote directory.
  func subscribeUpload(request: Mavsdk_Rpc_Ftp_SubscribeUploadRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Ftp_UploadResponse>) -> EventLoopFuture<GRPCStatus>

  ///
  /// Lists items from a remote directory.
  func listDirectory(request: Mavsdk_Rpc_Ftp_ListDirectoryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Ftp_ListDirectoryResponse>

  ///
  /// Creates a remote directory.
  func createDirectory(request: Mavsdk_Rpc_Ftp_CreateDirectoryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Ftp_CreateDirectoryResponse>

  ///
  /// Removes a remote directory.
  func removeDirectory(request: Mavsdk_Rpc_Ftp_RemoveDirectoryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Ftp_RemoveDirectoryResponse>

  ///
  /// Removes a remote file.
  func removeFile(request: Mavsdk_Rpc_Ftp_RemoveFileRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Ftp_RemoveFileResponse>

  ///
  /// Renames a remote file or remote directory.
  func rename(request: Mavsdk_Rpc_Ftp_RenameRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Ftp_RenameResponse>

  ///
  /// Compares a local file to a remote file using a CRC32 checksum.
  func areFilesIdentical(request: Mavsdk_Rpc_Ftp_AreFilesIdenticalRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Ftp_AreFilesIdenticalResponse>

  ///
  /// Set root directory for MAVLink FTP server.
  func setRootDirectory(request: Mavsdk_Rpc_Ftp_SetRootDirectoryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Ftp_SetRootDirectoryResponse>

  ///
  /// Set target component ID. By default it is the autopilot.
  func setTargetCompid(request: Mavsdk_Rpc_Ftp_SetTargetCompidRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Ftp_SetTargetCompidResponse>

  ///
  /// Get our own component ID.
  func getOurCompid(request: Mavsdk_Rpc_Ftp_GetOurCompidRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Ftp_GetOurCompidResponse>
}

extension Mavsdk_Rpc_Ftp_FtpServiceProvider {
  internal var serviceName: Substring { return "mavsdk.rpc.ftp.FtpService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Reset":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Ftp_ResetRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Ftp_ResetResponse>(),
        interceptors: self.interceptors?.makeResetInterceptors() ?? [],
        userFunction: self.reset(request:context:)
      )

    case "SubscribeDownload":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Ftp_SubscribeDownloadRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Ftp_DownloadResponse>(),
        interceptors: self.interceptors?.makeSubscribeDownloadInterceptors() ?? [],
        userFunction: self.subscribeDownload(request:context:)
      )

    case "SubscribeUpload":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Ftp_SubscribeUploadRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Ftp_UploadResponse>(),
        interceptors: self.interceptors?.makeSubscribeUploadInterceptors() ?? [],
        userFunction: self.subscribeUpload(request:context:)
      )

    case "ListDirectory":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Ftp_ListDirectoryRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Ftp_ListDirectoryResponse>(),
        interceptors: self.interceptors?.makeListDirectoryInterceptors() ?? [],
        userFunction: self.listDirectory(request:context:)
      )

    case "CreateDirectory":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Ftp_CreateDirectoryRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Ftp_CreateDirectoryResponse>(),
        interceptors: self.interceptors?.makeCreateDirectoryInterceptors() ?? [],
        userFunction: self.createDirectory(request:context:)
      )

    case "RemoveDirectory":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Ftp_RemoveDirectoryRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Ftp_RemoveDirectoryResponse>(),
        interceptors: self.interceptors?.makeRemoveDirectoryInterceptors() ?? [],
        userFunction: self.removeDirectory(request:context:)
      )

    case "RemoveFile":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Ftp_RemoveFileRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Ftp_RemoveFileResponse>(),
        interceptors: self.interceptors?.makeRemoveFileInterceptors() ?? [],
        userFunction: self.removeFile(request:context:)
      )

    case "Rename":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Ftp_RenameRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Ftp_RenameResponse>(),
        interceptors: self.interceptors?.makeRenameInterceptors() ?? [],
        userFunction: self.rename(request:context:)
      )

    case "AreFilesIdentical":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Ftp_AreFilesIdenticalRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Ftp_AreFilesIdenticalResponse>(),
        interceptors: self.interceptors?.makeAreFilesIdenticalInterceptors() ?? [],
        userFunction: self.areFilesIdentical(request:context:)
      )

    case "SetRootDirectory":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Ftp_SetRootDirectoryRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Ftp_SetRootDirectoryResponse>(),
        interceptors: self.interceptors?.makeSetRootDirectoryInterceptors() ?? [],
        userFunction: self.setRootDirectory(request:context:)
      )

    case "SetTargetCompid":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Ftp_SetTargetCompidRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Ftp_SetTargetCompidResponse>(),
        interceptors: self.interceptors?.makeSetTargetCompidInterceptors() ?? [],
        userFunction: self.setTargetCompid(request:context:)
      )

    case "GetOurCompid":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Ftp_GetOurCompidRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Ftp_GetOurCompidResponse>(),
        interceptors: self.interceptors?.makeGetOurCompidInterceptors() ?? [],
        userFunction: self.getOurCompid(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'reset'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeResetInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Ftp_ResetRequest, Mavsdk_Rpc_Ftp_ResetResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeDownload'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeDownloadInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Ftp_SubscribeDownloadRequest, Mavsdk_Rpc_Ftp_DownloadResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeUpload'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeUploadInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Ftp_SubscribeUploadRequest, Mavsdk_Rpc_Ftp_UploadResponse>]

  /// - Returns: Interceptors to use when handling 'listDirectory'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListDirectoryInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Ftp_ListDirectoryRequest, Mavsdk_Rpc_Ftp_ListDirectoryResponse>]

  /// - Returns: Interceptors to use when handling 'createDirectory'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateDirectoryInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Ftp_CreateDirectoryRequest, Mavsdk_Rpc_Ftp_CreateDirectoryResponse>]

  /// - Returns: Interceptors to use when handling 'removeDirectory'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveDirectoryInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Ftp_RemoveDirectoryRequest, Mavsdk_Rpc_Ftp_RemoveDirectoryResponse>]

  /// - Returns: Interceptors to use when handling 'removeFile'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveFileInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Ftp_RemoveFileRequest, Mavsdk_Rpc_Ftp_RemoveFileResponse>]

  /// - Returns: Interceptors to use when handling 'rename'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRenameInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Ftp_RenameRequest, Mavsdk_Rpc_Ftp_RenameResponse>]

  /// - Returns: Interceptors to use when handling 'areFilesIdentical'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAreFilesIdenticalInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Ftp_AreFilesIdenticalRequest, Mavsdk_Rpc_Ftp_AreFilesIdenticalResponse>]

  /// - Returns: Interceptors to use when handling 'setRootDirectory'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetRootDirectoryInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Ftp_SetRootDirectoryRequest, Mavsdk_Rpc_Ftp_SetRootDirectoryResponse>]

  /// - Returns: Interceptors to use when handling 'setTargetCompid'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetTargetCompidInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Ftp_SetTargetCompidRequest, Mavsdk_Rpc_Ftp_SetTargetCompidResponse>]

  /// - Returns: Interceptors to use when handling 'getOurCompid'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetOurCompidInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Ftp_GetOurCompidRequest, Mavsdk_Rpc_Ftp_GetOurCompidResponse>]
}
