// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mavlink_passthrough.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Mavsdk_Rpc_MavlinkPassthrough_SendCommandLongRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*< @brief System ID to send command to 
  var targetSysid: UInt32 = 0

  ///*< @brief Component ID to send command to 
  var targetCompid: UInt32 = 0

  ///*< @brief command to send. 
  var command: UInt32 = 0

  ///*< @brief param1. 
  var param1: Float = 0

  ///*< @brief param2. 
  var param2: Float = 0

  ///*< @brief param3. 
  var param3: Float = 0

  ///*< @brief param4. 
  var param4: Float = 0

  ///*< @brief param5. 
  var param5: Float = 0

  ///*< @brief param6. 
  var param6: Float = 0

  ///*< @brief param7. 
  var param7: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_MavlinkPassthrough_SendCommandLongResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mavlinkPassthroughResult: Mavsdk_Rpc_MavlinkPassthrough_MavlinkPassthroughResult {
    get {return _mavlinkPassthroughResult ?? Mavsdk_Rpc_MavlinkPassthrough_MavlinkPassthroughResult()}
    set {_mavlinkPassthroughResult = newValue}
  }
  /// Returns true if `mavlinkPassthroughResult` has been explicitly set.
  var hasMavlinkPassthroughResult: Bool {return self._mavlinkPassthroughResult != nil}
  /// Clears the value of `mavlinkPassthroughResult`. Subsequent reads from it will return its default value.
  mutating func clearMavlinkPassthroughResult() {self._mavlinkPassthroughResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mavlinkPassthroughResult: Mavsdk_Rpc_MavlinkPassthrough_MavlinkPassthroughResult? = nil
}

/// Result type.
struct Mavsdk_Rpc_MavlinkPassthrough_MavlinkPassthroughResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Result enum value
  var result: Mavsdk_Rpc_MavlinkPassthrough_MavlinkPassthroughResult.Result = .unknown

  /// Human-readable English string describing the result
  var resultStr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Possible results returned for action requests.
  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// Unknown result
    case unknown // = 0

    /// Request was successful
    case success // = 1

    /// Connection error
    case connectionError // = 2

    /// No system is connected
    case commandNoSystem // = 3

    /// Vehicle is busy
    case commandBusy // = 4

    /// Command refused by vehicle
    case commandDenied // = 5
    case commandUnsupported // = 6

    /// Request timed out
    case commandTimeout // = 7
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .success
      case 2: self = .connectionError
      case 3: self = .commandNoSystem
      case 4: self = .commandBusy
      case 5: self = .commandDenied
      case 6: self = .commandUnsupported
      case 7: self = .commandTimeout
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .success: return 1
      case .connectionError: return 2
      case .commandNoSystem: return 3
      case .commandBusy: return 4
      case .commandDenied: return 5
      case .commandUnsupported: return 6
      case .commandTimeout: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Mavsdk_Rpc_MavlinkPassthrough_MavlinkPassthroughResult.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Mavsdk_Rpc_MavlinkPassthrough_MavlinkPassthroughResult.Result] = [
    .unknown,
    .success,
    .connectionError,
    .commandNoSystem,
    .commandBusy,
    .commandDenied,
    .commandUnsupported,
    .commandTimeout,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "mavsdk.rpc.mavlink_passthrough"

extension Mavsdk_Rpc_MavlinkPassthrough_SendCommandLongRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SendCommandLongRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "target_sysid"),
    2: .standard(proto: "target_compid"),
    3: .same(proto: "command"),
    4: .same(proto: "param1"),
    5: .same(proto: "param2"),
    6: .same(proto: "param3"),
    7: .same(proto: "param4"),
    8: .same(proto: "param5"),
    9: .same(proto: "param6"),
    10: .same(proto: "param7"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.targetSysid) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.targetCompid) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.command) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.param1) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self.param2) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self.param3) }()
      case 7: try { try decoder.decodeSingularFloatField(value: &self.param4) }()
      case 8: try { try decoder.decodeSingularFloatField(value: &self.param5) }()
      case 9: try { try decoder.decodeSingularFloatField(value: &self.param6) }()
      case 10: try { try decoder.decodeSingularFloatField(value: &self.param7) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.targetSysid != 0 {
      try visitor.visitSingularUInt32Field(value: self.targetSysid, fieldNumber: 1)
    }
    if self.targetCompid != 0 {
      try visitor.visitSingularUInt32Field(value: self.targetCompid, fieldNumber: 2)
    }
    if self.command != 0 {
      try visitor.visitSingularUInt32Field(value: self.command, fieldNumber: 3)
    }
    if self.param1 != 0 {
      try visitor.visitSingularFloatField(value: self.param1, fieldNumber: 4)
    }
    if self.param2 != 0 {
      try visitor.visitSingularFloatField(value: self.param2, fieldNumber: 5)
    }
    if self.param3 != 0 {
      try visitor.visitSingularFloatField(value: self.param3, fieldNumber: 6)
    }
    if self.param4 != 0 {
      try visitor.visitSingularFloatField(value: self.param4, fieldNumber: 7)
    }
    if self.param5 != 0 {
      try visitor.visitSingularFloatField(value: self.param5, fieldNumber: 8)
    }
    if self.param6 != 0 {
      try visitor.visitSingularFloatField(value: self.param6, fieldNumber: 9)
    }
    if self.param7 != 0 {
      try visitor.visitSingularFloatField(value: self.param7, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_MavlinkPassthrough_SendCommandLongRequest, rhs: Mavsdk_Rpc_MavlinkPassthrough_SendCommandLongRequest) -> Bool {
    if lhs.targetSysid != rhs.targetSysid {return false}
    if lhs.targetCompid != rhs.targetCompid {return false}
    if lhs.command != rhs.command {return false}
    if lhs.param1 != rhs.param1 {return false}
    if lhs.param2 != rhs.param2 {return false}
    if lhs.param3 != rhs.param3 {return false}
    if lhs.param4 != rhs.param4 {return false}
    if lhs.param5 != rhs.param5 {return false}
    if lhs.param6 != rhs.param6 {return false}
    if lhs.param7 != rhs.param7 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_MavlinkPassthrough_SendCommandLongResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SendCommandLongResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mavlink_passthrough_result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._mavlinkPassthroughResult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._mavlinkPassthroughResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_MavlinkPassthrough_SendCommandLongResponse, rhs: Mavsdk_Rpc_MavlinkPassthrough_SendCommandLongResponse) -> Bool {
    if lhs._mavlinkPassthroughResult != rhs._mavlinkPassthroughResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_MavlinkPassthrough_MavlinkPassthroughResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MavlinkPassthroughResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "result_str"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.resultStr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unknown {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if !self.resultStr.isEmpty {
      try visitor.visitSingularStringField(value: self.resultStr, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_MavlinkPassthrough_MavlinkPassthroughResult, rhs: Mavsdk_Rpc_MavlinkPassthrough_MavlinkPassthroughResult) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.resultStr != rhs.resultStr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_MavlinkPassthrough_MavlinkPassthroughResult.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RESULT_UNKNOWN"),
    1: .same(proto: "RESULT_SUCCESS"),
    2: .same(proto: "RESULT_CONNECTION_ERROR"),
    3: .same(proto: "RESULT_COMMAND_NO_SYSTEM"),
    4: .same(proto: "RESULT_COMMAND_BUSY"),
    5: .same(proto: "RESULT_COMMAND_DENIED"),
    6: .same(proto: "RESULT_COMMAND_UNSUPPORTED"),
    7: .same(proto: "RESULT_COMMAND_TIMEOUT"),
  ]
}
