//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: follow_me.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


///
/// Allow users to command the vehicle to follow a specific target.
/// The target is provided as a GPS coordinate and altitude.
///
/// Usage: instantiate `Mavsdk_Rpc_FollowMe_FollowMeServiceClient`, then call methods of this protocol to make API calls.
internal protocol Mavsdk_Rpc_FollowMe_FollowMeServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Mavsdk_Rpc_FollowMe_FollowMeServiceClientInterceptorFactoryProtocol? { get }

  func getConfig(
    _ request: Mavsdk_Rpc_FollowMe_GetConfigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_FollowMe_GetConfigRequest, Mavsdk_Rpc_FollowMe_GetConfigResponse>

  func setConfig(
    _ request: Mavsdk_Rpc_FollowMe_SetConfigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_FollowMe_SetConfigRequest, Mavsdk_Rpc_FollowMe_SetConfigResponse>

  func isActive(
    _ request: Mavsdk_Rpc_FollowMe_IsActiveRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_FollowMe_IsActiveRequest, Mavsdk_Rpc_FollowMe_IsActiveResponse>

  func setTargetLocation(
    _ request: Mavsdk_Rpc_FollowMe_SetTargetLocationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_FollowMe_SetTargetLocationRequest, Mavsdk_Rpc_FollowMe_SetTargetLocationResponse>

  func getLastLocation(
    _ request: Mavsdk_Rpc_FollowMe_GetLastLocationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_FollowMe_GetLastLocationRequest, Mavsdk_Rpc_FollowMe_GetLastLocationResponse>

  func start(
    _ request: Mavsdk_Rpc_FollowMe_StartRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_FollowMe_StartRequest, Mavsdk_Rpc_FollowMe_StartResponse>

  func stop(
    _ request: Mavsdk_Rpc_FollowMe_StopRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_FollowMe_StopRequest, Mavsdk_Rpc_FollowMe_StopResponse>
}

extension Mavsdk_Rpc_FollowMe_FollowMeServiceClientProtocol {
  internal var serviceName: String {
    return "mavsdk.rpc.follow_me.FollowMeService"
  }

  /// Get current configuration.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetConfig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getConfig(
    _ request: Mavsdk_Rpc_FollowMe_GetConfigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_FollowMe_GetConfigRequest, Mavsdk_Rpc_FollowMe_GetConfigResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.follow_me.FollowMeService/GetConfig",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetConfigInterceptors() ?? []
    )
  }

  /// Apply configuration by sending it to the system.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetConfig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setConfig(
    _ request: Mavsdk_Rpc_FollowMe_SetConfigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_FollowMe_SetConfigRequest, Mavsdk_Rpc_FollowMe_SetConfigResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.follow_me.FollowMeService/SetConfig",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetConfigInterceptors() ?? []
    )
  }

  /// Check if FollowMe is active.
  ///
  /// - Parameters:
  ///   - request: Request to send to IsActive.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func isActive(
    _ request: Mavsdk_Rpc_FollowMe_IsActiveRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_FollowMe_IsActiveRequest, Mavsdk_Rpc_FollowMe_IsActiveResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.follow_me.FollowMeService/IsActive",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsActiveInterceptors() ?? []
    )
  }

  /// Set location of the moving target.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetTargetLocation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setTargetLocation(
    _ request: Mavsdk_Rpc_FollowMe_SetTargetLocationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_FollowMe_SetTargetLocationRequest, Mavsdk_Rpc_FollowMe_SetTargetLocationResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.follow_me.FollowMeService/SetTargetLocation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetTargetLocationInterceptors() ?? []
    )
  }

  /// Get the last location of the target.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLastLocation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getLastLocation(
    _ request: Mavsdk_Rpc_FollowMe_GetLastLocationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_FollowMe_GetLastLocationRequest, Mavsdk_Rpc_FollowMe_GetLastLocationResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.follow_me.FollowMeService/GetLastLocation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLastLocationInterceptors() ?? []
    )
  }

  /// Start FollowMe mode.
  ///
  /// - Parameters:
  ///   - request: Request to send to Start.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func start(
    _ request: Mavsdk_Rpc_FollowMe_StartRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_FollowMe_StartRequest, Mavsdk_Rpc_FollowMe_StartResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.follow_me.FollowMeService/Start",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartInterceptors() ?? []
    )
  }

  /// Stop FollowMe mode.
  ///
  /// - Parameters:
  ///   - request: Request to send to Stop.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stop(
    _ request: Mavsdk_Rpc_FollowMe_StopRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_FollowMe_StopRequest, Mavsdk_Rpc_FollowMe_StopResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.follow_me.FollowMeService/Stop",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStopInterceptors() ?? []
    )
  }
}

internal protocol Mavsdk_Rpc_FollowMe_FollowMeServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getConfig'.
  func makeGetConfigInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_FollowMe_GetConfigRequest, Mavsdk_Rpc_FollowMe_GetConfigResponse>]

  /// - Returns: Interceptors to use when invoking 'setConfig'.
  func makeSetConfigInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_FollowMe_SetConfigRequest, Mavsdk_Rpc_FollowMe_SetConfigResponse>]

  /// - Returns: Interceptors to use when invoking 'isActive'.
  func makeIsActiveInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_FollowMe_IsActiveRequest, Mavsdk_Rpc_FollowMe_IsActiveResponse>]

  /// - Returns: Interceptors to use when invoking 'setTargetLocation'.
  func makeSetTargetLocationInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_FollowMe_SetTargetLocationRequest, Mavsdk_Rpc_FollowMe_SetTargetLocationResponse>]

  /// - Returns: Interceptors to use when invoking 'getLastLocation'.
  func makeGetLastLocationInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_FollowMe_GetLastLocationRequest, Mavsdk_Rpc_FollowMe_GetLastLocationResponse>]

  /// - Returns: Interceptors to use when invoking 'start'.
  func makeStartInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_FollowMe_StartRequest, Mavsdk_Rpc_FollowMe_StartResponse>]

  /// - Returns: Interceptors to use when invoking 'stop'.
  func makeStopInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_FollowMe_StopRequest, Mavsdk_Rpc_FollowMe_StopResponse>]
}

internal final class Mavsdk_Rpc_FollowMe_FollowMeServiceClient: Mavsdk_Rpc_FollowMe_FollowMeServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Mavsdk_Rpc_FollowMe_FollowMeServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the mavsdk.rpc.follow_me.FollowMeService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Mavsdk_Rpc_FollowMe_FollowMeServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///
/// Allow users to command the vehicle to follow a specific target.
/// The target is provided as a GPS coordinate and altitude.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Mavsdk_Rpc_FollowMe_FollowMeServiceProvider: CallHandlerProvider {
  var interceptors: Mavsdk_Rpc_FollowMe_FollowMeServiceServerInterceptorFactoryProtocol? { get }

  /// Get current configuration.
  func getConfig(request: Mavsdk_Rpc_FollowMe_GetConfigRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_FollowMe_GetConfigResponse>

  /// Apply configuration by sending it to the system.
  func setConfig(request: Mavsdk_Rpc_FollowMe_SetConfigRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_FollowMe_SetConfigResponse>

  /// Check if FollowMe is active.
  func isActive(request: Mavsdk_Rpc_FollowMe_IsActiveRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_FollowMe_IsActiveResponse>

  /// Set location of the moving target.
  func setTargetLocation(request: Mavsdk_Rpc_FollowMe_SetTargetLocationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_FollowMe_SetTargetLocationResponse>

  /// Get the last location of the target.
  func getLastLocation(request: Mavsdk_Rpc_FollowMe_GetLastLocationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_FollowMe_GetLastLocationResponse>

  /// Start FollowMe mode.
  func start(request: Mavsdk_Rpc_FollowMe_StartRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_FollowMe_StartResponse>

  /// Stop FollowMe mode.
  func stop(request: Mavsdk_Rpc_FollowMe_StopRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_FollowMe_StopResponse>
}

extension Mavsdk_Rpc_FollowMe_FollowMeServiceProvider {
  internal var serviceName: Substring { return "mavsdk.rpc.follow_me.FollowMeService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetConfig":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_FollowMe_GetConfigRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_FollowMe_GetConfigResponse>(),
        interceptors: self.interceptors?.makeGetConfigInterceptors() ?? [],
        userFunction: self.getConfig(request:context:)
      )

    case "SetConfig":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_FollowMe_SetConfigRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_FollowMe_SetConfigResponse>(),
        interceptors: self.interceptors?.makeSetConfigInterceptors() ?? [],
        userFunction: self.setConfig(request:context:)
      )

    case "IsActive":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_FollowMe_IsActiveRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_FollowMe_IsActiveResponse>(),
        interceptors: self.interceptors?.makeIsActiveInterceptors() ?? [],
        userFunction: self.isActive(request:context:)
      )

    case "SetTargetLocation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_FollowMe_SetTargetLocationRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_FollowMe_SetTargetLocationResponse>(),
        interceptors: self.interceptors?.makeSetTargetLocationInterceptors() ?? [],
        userFunction: self.setTargetLocation(request:context:)
      )

    case "GetLastLocation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_FollowMe_GetLastLocationRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_FollowMe_GetLastLocationResponse>(),
        interceptors: self.interceptors?.makeGetLastLocationInterceptors() ?? [],
        userFunction: self.getLastLocation(request:context:)
      )

    case "Start":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_FollowMe_StartRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_FollowMe_StartResponse>(),
        interceptors: self.interceptors?.makeStartInterceptors() ?? [],
        userFunction: self.start(request:context:)
      )

    case "Stop":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_FollowMe_StopRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_FollowMe_StopResponse>(),
        interceptors: self.interceptors?.makeStopInterceptors() ?? [],
        userFunction: self.stop(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Mavsdk_Rpc_FollowMe_FollowMeServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getConfig'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetConfigInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_FollowMe_GetConfigRequest, Mavsdk_Rpc_FollowMe_GetConfigResponse>]

  /// - Returns: Interceptors to use when handling 'setConfig'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetConfigInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_FollowMe_SetConfigRequest, Mavsdk_Rpc_FollowMe_SetConfigResponse>]

  /// - Returns: Interceptors to use when handling 'isActive'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIsActiveInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_FollowMe_IsActiveRequest, Mavsdk_Rpc_FollowMe_IsActiveResponse>]

  /// - Returns: Interceptors to use when handling 'setTargetLocation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetTargetLocationInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_FollowMe_SetTargetLocationRequest, Mavsdk_Rpc_FollowMe_SetTargetLocationResponse>]

  /// - Returns: Interceptors to use when handling 'getLastLocation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetLastLocationInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_FollowMe_GetLastLocationRequest, Mavsdk_Rpc_FollowMe_GetLastLocationResponse>]

  /// - Returns: Interceptors to use when handling 'start'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStartInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_FollowMe_StartRequest, Mavsdk_Rpc_FollowMe_StartResponse>]

  /// - Returns: Interceptors to use when handling 'stop'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStopInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_FollowMe_StopRequest, Mavsdk_Rpc_FollowMe_StopResponse>]
}
