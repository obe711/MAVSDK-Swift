//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: camera.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


///
/// Can be used to manage cameras that implement the MAVLink
/// Camera Protocol: https://mavlink.io/en/protocol/camera.html.
///
/// Currently only a single camera is supported.
/// When multiple cameras are supported the plugin will need to be
/// instantiated separately for every camera and the camera selected using
/// `select_camera`.
///
/// Usage: instantiate `Mavsdk_Rpc_Camera_CameraServiceClient`, then call methods of this protocol to make API calls.
internal protocol Mavsdk_Rpc_Camera_CameraServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Mavsdk_Rpc_Camera_CameraServiceClientInterceptorFactoryProtocol? { get }

  func prepare(
    _ request: Mavsdk_Rpc_Camera_PrepareRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Camera_PrepareRequest, Mavsdk_Rpc_Camera_PrepareResponse>

  func takePhoto(
    _ request: Mavsdk_Rpc_Camera_TakePhotoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Camera_TakePhotoRequest, Mavsdk_Rpc_Camera_TakePhotoResponse>

  func startPhotoInterval(
    _ request: Mavsdk_Rpc_Camera_StartPhotoIntervalRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Camera_StartPhotoIntervalRequest, Mavsdk_Rpc_Camera_StartPhotoIntervalResponse>

  func stopPhotoInterval(
    _ request: Mavsdk_Rpc_Camera_StopPhotoIntervalRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Camera_StopPhotoIntervalRequest, Mavsdk_Rpc_Camera_StopPhotoIntervalResponse>

  func startVideo(
    _ request: Mavsdk_Rpc_Camera_StartVideoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Camera_StartVideoRequest, Mavsdk_Rpc_Camera_StartVideoResponse>

  func stopVideo(
    _ request: Mavsdk_Rpc_Camera_StopVideoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Camera_StopVideoRequest, Mavsdk_Rpc_Camera_StopVideoResponse>

  func startVideoStreaming(
    _ request: Mavsdk_Rpc_Camera_StartVideoStreamingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Camera_StartVideoStreamingRequest, Mavsdk_Rpc_Camera_StartVideoStreamingResponse>

  func stopVideoStreaming(
    _ request: Mavsdk_Rpc_Camera_StopVideoStreamingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Camera_StopVideoStreamingRequest, Mavsdk_Rpc_Camera_StopVideoStreamingResponse>

  func setMode(
    _ request: Mavsdk_Rpc_Camera_SetModeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Camera_SetModeRequest, Mavsdk_Rpc_Camera_SetModeResponse>

  func listPhotos(
    _ request: Mavsdk_Rpc_Camera_ListPhotosRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Camera_ListPhotosRequest, Mavsdk_Rpc_Camera_ListPhotosResponse>

  func subscribeMode(
    _ request: Mavsdk_Rpc_Camera_SubscribeModeRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Camera_ModeResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Camera_SubscribeModeRequest, Mavsdk_Rpc_Camera_ModeResponse>

  func subscribeInformation(
    _ request: Mavsdk_Rpc_Camera_SubscribeInformationRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Camera_InformationResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Camera_SubscribeInformationRequest, Mavsdk_Rpc_Camera_InformationResponse>

  func subscribeVideoStreamInfo(
    _ request: Mavsdk_Rpc_Camera_SubscribeVideoStreamInfoRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Camera_VideoStreamInfoResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Camera_SubscribeVideoStreamInfoRequest, Mavsdk_Rpc_Camera_VideoStreamInfoResponse>

  func subscribeCaptureInfo(
    _ request: Mavsdk_Rpc_Camera_SubscribeCaptureInfoRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Camera_CaptureInfoResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Camera_SubscribeCaptureInfoRequest, Mavsdk_Rpc_Camera_CaptureInfoResponse>

  func subscribeStatus(
    _ request: Mavsdk_Rpc_Camera_SubscribeStatusRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Camera_StatusResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Camera_SubscribeStatusRequest, Mavsdk_Rpc_Camera_StatusResponse>

  func subscribeCurrentSettings(
    _ request: Mavsdk_Rpc_Camera_SubscribeCurrentSettingsRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Camera_CurrentSettingsResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Camera_SubscribeCurrentSettingsRequest, Mavsdk_Rpc_Camera_CurrentSettingsResponse>

  func subscribePossibleSettingOptions(
    _ request: Mavsdk_Rpc_Camera_SubscribePossibleSettingOptionsRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Camera_PossibleSettingOptionsResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Camera_SubscribePossibleSettingOptionsRequest, Mavsdk_Rpc_Camera_PossibleSettingOptionsResponse>

  func setSetting(
    _ request: Mavsdk_Rpc_Camera_SetSettingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Camera_SetSettingRequest, Mavsdk_Rpc_Camera_SetSettingResponse>

  func getSetting(
    _ request: Mavsdk_Rpc_Camera_GetSettingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Camera_GetSettingRequest, Mavsdk_Rpc_Camera_GetSettingResponse>

  func formatStorage(
    _ request: Mavsdk_Rpc_Camera_FormatStorageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Camera_FormatStorageRequest, Mavsdk_Rpc_Camera_FormatStorageResponse>
}

extension Mavsdk_Rpc_Camera_CameraServiceClientProtocol {
  internal var serviceName: String {
    return "mavsdk.rpc.camera.CameraService"
  }

  ///
  /// Prepare the camera plugin (e.g. download the camera definition, etc).
  ///
  /// - Parameters:
  ///   - request: Request to send to Prepare.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func prepare(
    _ request: Mavsdk_Rpc_Camera_PrepareRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Camera_PrepareRequest, Mavsdk_Rpc_Camera_PrepareResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.camera.CameraService/Prepare",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePrepareInterceptors() ?? []
    )
  }

  ///
  /// Take one photo.
  ///
  /// - Parameters:
  ///   - request: Request to send to TakePhoto.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func takePhoto(
    _ request: Mavsdk_Rpc_Camera_TakePhotoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Camera_TakePhotoRequest, Mavsdk_Rpc_Camera_TakePhotoResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.camera.CameraService/TakePhoto",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTakePhotoInterceptors() ?? []
    )
  }

  ///
  /// Start photo timelapse with a given interval.
  ///
  /// - Parameters:
  ///   - request: Request to send to StartPhotoInterval.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func startPhotoInterval(
    _ request: Mavsdk_Rpc_Camera_StartPhotoIntervalRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Camera_StartPhotoIntervalRequest, Mavsdk_Rpc_Camera_StartPhotoIntervalResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.camera.CameraService/StartPhotoInterval",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartPhotoIntervalInterceptors() ?? []
    )
  }

  ///
  /// Stop a running photo timelapse.
  ///
  /// - Parameters:
  ///   - request: Request to send to StopPhotoInterval.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stopPhotoInterval(
    _ request: Mavsdk_Rpc_Camera_StopPhotoIntervalRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Camera_StopPhotoIntervalRequest, Mavsdk_Rpc_Camera_StopPhotoIntervalResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.camera.CameraService/StopPhotoInterval",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStopPhotoIntervalInterceptors() ?? []
    )
  }

  ///
  /// Start a video recording.
  ///
  /// - Parameters:
  ///   - request: Request to send to StartVideo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func startVideo(
    _ request: Mavsdk_Rpc_Camera_StartVideoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Camera_StartVideoRequest, Mavsdk_Rpc_Camera_StartVideoResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.camera.CameraService/StartVideo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartVideoInterceptors() ?? []
    )
  }

  ///
  /// Stop a running video recording.
  ///
  /// - Parameters:
  ///   - request: Request to send to StopVideo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stopVideo(
    _ request: Mavsdk_Rpc_Camera_StopVideoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Camera_StopVideoRequest, Mavsdk_Rpc_Camera_StopVideoResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.camera.CameraService/StopVideo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStopVideoInterceptors() ?? []
    )
  }

  ///
  /// Start video streaming.
  ///
  /// - Parameters:
  ///   - request: Request to send to StartVideoStreaming.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func startVideoStreaming(
    _ request: Mavsdk_Rpc_Camera_StartVideoStreamingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Camera_StartVideoStreamingRequest, Mavsdk_Rpc_Camera_StartVideoStreamingResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.camera.CameraService/StartVideoStreaming",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartVideoStreamingInterceptors() ?? []
    )
  }

  ///
  /// Stop current video streaming.
  ///
  /// - Parameters:
  ///   - request: Request to send to StopVideoStreaming.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stopVideoStreaming(
    _ request: Mavsdk_Rpc_Camera_StopVideoStreamingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Camera_StopVideoStreamingRequest, Mavsdk_Rpc_Camera_StopVideoStreamingResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.camera.CameraService/StopVideoStreaming",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStopVideoStreamingInterceptors() ?? []
    )
  }

  ///
  /// Set camera mode.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetMode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setMode(
    _ request: Mavsdk_Rpc_Camera_SetModeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Camera_SetModeRequest, Mavsdk_Rpc_Camera_SetModeResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.camera.CameraService/SetMode",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetModeInterceptors() ?? []
    )
  }

  ///
  /// List photos available on the camera.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListPhotos.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listPhotos(
    _ request: Mavsdk_Rpc_Camera_ListPhotosRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Camera_ListPhotosRequest, Mavsdk_Rpc_Camera_ListPhotosResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.camera.CameraService/ListPhotos",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPhotosInterceptors() ?? []
    )
  }

  ///
  /// Subscribe to camera mode updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeMode.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeMode(
    _ request: Mavsdk_Rpc_Camera_SubscribeModeRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Camera_ModeResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Camera_SubscribeModeRequest, Mavsdk_Rpc_Camera_ModeResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.camera.CameraService/SubscribeMode",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeModeInterceptors() ?? [],
      handler: handler
    )
  }

  ///
  /// Subscribe to camera information updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeInformation.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeInformation(
    _ request: Mavsdk_Rpc_Camera_SubscribeInformationRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Camera_InformationResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Camera_SubscribeInformationRequest, Mavsdk_Rpc_Camera_InformationResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.camera.CameraService/SubscribeInformation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInformationInterceptors() ?? [],
      handler: handler
    )
  }

  ///
  /// Subscribe to video stream info updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeVideoStreamInfo.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeVideoStreamInfo(
    _ request: Mavsdk_Rpc_Camera_SubscribeVideoStreamInfoRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Camera_VideoStreamInfoResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Camera_SubscribeVideoStreamInfoRequest, Mavsdk_Rpc_Camera_VideoStreamInfoResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.camera.CameraService/SubscribeVideoStreamInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeVideoStreamInfoInterceptors() ?? [],
      handler: handler
    )
  }

  ///
  /// Subscribe to capture info updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeCaptureInfo.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeCaptureInfo(
    _ request: Mavsdk_Rpc_Camera_SubscribeCaptureInfoRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Camera_CaptureInfoResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Camera_SubscribeCaptureInfoRequest, Mavsdk_Rpc_Camera_CaptureInfoResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.camera.CameraService/SubscribeCaptureInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeCaptureInfoInterceptors() ?? [],
      handler: handler
    )
  }

  ///
  /// Subscribe to camera status updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeStatus.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeStatus(
    _ request: Mavsdk_Rpc_Camera_SubscribeStatusRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Camera_StatusResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Camera_SubscribeStatusRequest, Mavsdk_Rpc_Camera_StatusResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.camera.CameraService/SubscribeStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeStatusInterceptors() ?? [],
      handler: handler
    )
  }

  ///
  /// Get the list of current camera settings.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeCurrentSettings.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeCurrentSettings(
    _ request: Mavsdk_Rpc_Camera_SubscribeCurrentSettingsRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Camera_CurrentSettingsResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Camera_SubscribeCurrentSettingsRequest, Mavsdk_Rpc_Camera_CurrentSettingsResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.camera.CameraService/SubscribeCurrentSettings",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeCurrentSettingsInterceptors() ?? [],
      handler: handler
    )
  }

  ///
  /// Get the list of settings that can be changed.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribePossibleSettingOptions.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribePossibleSettingOptions(
    _ request: Mavsdk_Rpc_Camera_SubscribePossibleSettingOptionsRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Camera_PossibleSettingOptionsResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Camera_SubscribePossibleSettingOptionsRequest, Mavsdk_Rpc_Camera_PossibleSettingOptionsResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.camera.CameraService/SubscribePossibleSettingOptions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribePossibleSettingOptionsInterceptors() ?? [],
      handler: handler
    )
  }

  ///
  /// Set a setting to some value.
  ///
  /// Only setting_id of setting and option_id of option needs to be set.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetSetting.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setSetting(
    _ request: Mavsdk_Rpc_Camera_SetSettingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Camera_SetSettingRequest, Mavsdk_Rpc_Camera_SetSettingResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.camera.CameraService/SetSetting",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetSettingInterceptors() ?? []
    )
  }

  ///
  /// Get a setting.
  ///
  /// Only setting_id of setting needs to be set.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSetting.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSetting(
    _ request: Mavsdk_Rpc_Camera_GetSettingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Camera_GetSettingRequest, Mavsdk_Rpc_Camera_GetSettingResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.camera.CameraService/GetSetting",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSettingInterceptors() ?? []
    )
  }

  ///
  /// Format storage (e.g. SD card) in camera.
  ///
  /// This will delete all content of the camera storage!
  ///
  /// - Parameters:
  ///   - request: Request to send to FormatStorage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func formatStorage(
    _ request: Mavsdk_Rpc_Camera_FormatStorageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Camera_FormatStorageRequest, Mavsdk_Rpc_Camera_FormatStorageResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.camera.CameraService/FormatStorage",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFormatStorageInterceptors() ?? []
    )
  }
}

internal protocol Mavsdk_Rpc_Camera_CameraServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'prepare'.
  func makePrepareInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Camera_PrepareRequest, Mavsdk_Rpc_Camera_PrepareResponse>]

  /// - Returns: Interceptors to use when invoking 'takePhoto'.
  func makeTakePhotoInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Camera_TakePhotoRequest, Mavsdk_Rpc_Camera_TakePhotoResponse>]

  /// - Returns: Interceptors to use when invoking 'startPhotoInterval'.
  func makeStartPhotoIntervalInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Camera_StartPhotoIntervalRequest, Mavsdk_Rpc_Camera_StartPhotoIntervalResponse>]

  /// - Returns: Interceptors to use when invoking 'stopPhotoInterval'.
  func makeStopPhotoIntervalInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Camera_StopPhotoIntervalRequest, Mavsdk_Rpc_Camera_StopPhotoIntervalResponse>]

  /// - Returns: Interceptors to use when invoking 'startVideo'.
  func makeStartVideoInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Camera_StartVideoRequest, Mavsdk_Rpc_Camera_StartVideoResponse>]

  /// - Returns: Interceptors to use when invoking 'stopVideo'.
  func makeStopVideoInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Camera_StopVideoRequest, Mavsdk_Rpc_Camera_StopVideoResponse>]

  /// - Returns: Interceptors to use when invoking 'startVideoStreaming'.
  func makeStartVideoStreamingInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Camera_StartVideoStreamingRequest, Mavsdk_Rpc_Camera_StartVideoStreamingResponse>]

  /// - Returns: Interceptors to use when invoking 'stopVideoStreaming'.
  func makeStopVideoStreamingInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Camera_StopVideoStreamingRequest, Mavsdk_Rpc_Camera_StopVideoStreamingResponse>]

  /// - Returns: Interceptors to use when invoking 'setMode'.
  func makeSetModeInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Camera_SetModeRequest, Mavsdk_Rpc_Camera_SetModeResponse>]

  /// - Returns: Interceptors to use when invoking 'listPhotos'.
  func makeListPhotosInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Camera_ListPhotosRequest, Mavsdk_Rpc_Camera_ListPhotosResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeMode'.
  func makeSubscribeModeInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Camera_SubscribeModeRequest, Mavsdk_Rpc_Camera_ModeResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeInformation'.
  func makeSubscribeInformationInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Camera_SubscribeInformationRequest, Mavsdk_Rpc_Camera_InformationResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeVideoStreamInfo'.
  func makeSubscribeVideoStreamInfoInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Camera_SubscribeVideoStreamInfoRequest, Mavsdk_Rpc_Camera_VideoStreamInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeCaptureInfo'.
  func makeSubscribeCaptureInfoInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Camera_SubscribeCaptureInfoRequest, Mavsdk_Rpc_Camera_CaptureInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeStatus'.
  func makeSubscribeStatusInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Camera_SubscribeStatusRequest, Mavsdk_Rpc_Camera_StatusResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeCurrentSettings'.
  func makeSubscribeCurrentSettingsInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Camera_SubscribeCurrentSettingsRequest, Mavsdk_Rpc_Camera_CurrentSettingsResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribePossibleSettingOptions'.
  func makeSubscribePossibleSettingOptionsInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Camera_SubscribePossibleSettingOptionsRequest, Mavsdk_Rpc_Camera_PossibleSettingOptionsResponse>]

  /// - Returns: Interceptors to use when invoking 'setSetting'.
  func makeSetSettingInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Camera_SetSettingRequest, Mavsdk_Rpc_Camera_SetSettingResponse>]

  /// - Returns: Interceptors to use when invoking 'getSetting'.
  func makeGetSettingInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Camera_GetSettingRequest, Mavsdk_Rpc_Camera_GetSettingResponse>]

  /// - Returns: Interceptors to use when invoking 'formatStorage'.
  func makeFormatStorageInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Camera_FormatStorageRequest, Mavsdk_Rpc_Camera_FormatStorageResponse>]
}

internal final class Mavsdk_Rpc_Camera_CameraServiceClient: Mavsdk_Rpc_Camera_CameraServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Mavsdk_Rpc_Camera_CameraServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the mavsdk.rpc.camera.CameraService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Mavsdk_Rpc_Camera_CameraServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///
/// Can be used to manage cameras that implement the MAVLink
/// Camera Protocol: https://mavlink.io/en/protocol/camera.html.
///
/// Currently only a single camera is supported.
/// When multiple cameras are supported the plugin will need to be
/// instantiated separately for every camera and the camera selected using
/// `select_camera`.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Mavsdk_Rpc_Camera_CameraServiceProvider: CallHandlerProvider {
  var interceptors: Mavsdk_Rpc_Camera_CameraServiceServerInterceptorFactoryProtocol? { get }

  ///
  /// Prepare the camera plugin (e.g. download the camera definition, etc).
  func prepare(request: Mavsdk_Rpc_Camera_PrepareRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Camera_PrepareResponse>

  ///
  /// Take one photo.
  func takePhoto(request: Mavsdk_Rpc_Camera_TakePhotoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Camera_TakePhotoResponse>

  ///
  /// Start photo timelapse with a given interval.
  func startPhotoInterval(request: Mavsdk_Rpc_Camera_StartPhotoIntervalRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Camera_StartPhotoIntervalResponse>

  ///
  /// Stop a running photo timelapse.
  func stopPhotoInterval(request: Mavsdk_Rpc_Camera_StopPhotoIntervalRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Camera_StopPhotoIntervalResponse>

  ///
  /// Start a video recording.
  func startVideo(request: Mavsdk_Rpc_Camera_StartVideoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Camera_StartVideoResponse>

  ///
  /// Stop a running video recording.
  func stopVideo(request: Mavsdk_Rpc_Camera_StopVideoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Camera_StopVideoResponse>

  ///
  /// Start video streaming.
  func startVideoStreaming(request: Mavsdk_Rpc_Camera_StartVideoStreamingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Camera_StartVideoStreamingResponse>

  ///
  /// Stop current video streaming.
  func stopVideoStreaming(request: Mavsdk_Rpc_Camera_StopVideoStreamingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Camera_StopVideoStreamingResponse>

  ///
  /// Set camera mode.
  func setMode(request: Mavsdk_Rpc_Camera_SetModeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Camera_SetModeResponse>

  ///
  /// List photos available on the camera.
  func listPhotos(request: Mavsdk_Rpc_Camera_ListPhotosRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Camera_ListPhotosResponse>

  ///
  /// Subscribe to camera mode updates.
  func subscribeMode(request: Mavsdk_Rpc_Camera_SubscribeModeRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Camera_ModeResponse>) -> EventLoopFuture<GRPCStatus>

  ///
  /// Subscribe to camera information updates.
  func subscribeInformation(request: Mavsdk_Rpc_Camera_SubscribeInformationRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Camera_InformationResponse>) -> EventLoopFuture<GRPCStatus>

  ///
  /// Subscribe to video stream info updates.
  func subscribeVideoStreamInfo(request: Mavsdk_Rpc_Camera_SubscribeVideoStreamInfoRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Camera_VideoStreamInfoResponse>) -> EventLoopFuture<GRPCStatus>

  ///
  /// Subscribe to capture info updates.
  func subscribeCaptureInfo(request: Mavsdk_Rpc_Camera_SubscribeCaptureInfoRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Camera_CaptureInfoResponse>) -> EventLoopFuture<GRPCStatus>

  ///
  /// Subscribe to camera status updates.
  func subscribeStatus(request: Mavsdk_Rpc_Camera_SubscribeStatusRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Camera_StatusResponse>) -> EventLoopFuture<GRPCStatus>

  ///
  /// Get the list of current camera settings.
  func subscribeCurrentSettings(request: Mavsdk_Rpc_Camera_SubscribeCurrentSettingsRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Camera_CurrentSettingsResponse>) -> EventLoopFuture<GRPCStatus>

  ///
  /// Get the list of settings that can be changed.
  func subscribePossibleSettingOptions(request: Mavsdk_Rpc_Camera_SubscribePossibleSettingOptionsRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Camera_PossibleSettingOptionsResponse>) -> EventLoopFuture<GRPCStatus>

  ///
  /// Set a setting to some value.
  ///
  /// Only setting_id of setting and option_id of option needs to be set.
  func setSetting(request: Mavsdk_Rpc_Camera_SetSettingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Camera_SetSettingResponse>

  ///
  /// Get a setting.
  ///
  /// Only setting_id of setting needs to be set.
  func getSetting(request: Mavsdk_Rpc_Camera_GetSettingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Camera_GetSettingResponse>

  ///
  /// Format storage (e.g. SD card) in camera.
  ///
  /// This will delete all content of the camera storage!
  func formatStorage(request: Mavsdk_Rpc_Camera_FormatStorageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Camera_FormatStorageResponse>
}

extension Mavsdk_Rpc_Camera_CameraServiceProvider {
  internal var serviceName: Substring { return "mavsdk.rpc.camera.CameraService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Prepare":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Camera_PrepareRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Camera_PrepareResponse>(),
        interceptors: self.interceptors?.makePrepareInterceptors() ?? [],
        userFunction: self.prepare(request:context:)
      )

    case "TakePhoto":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Camera_TakePhotoRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Camera_TakePhotoResponse>(),
        interceptors: self.interceptors?.makeTakePhotoInterceptors() ?? [],
        userFunction: self.takePhoto(request:context:)
      )

    case "StartPhotoInterval":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Camera_StartPhotoIntervalRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Camera_StartPhotoIntervalResponse>(),
        interceptors: self.interceptors?.makeStartPhotoIntervalInterceptors() ?? [],
        userFunction: self.startPhotoInterval(request:context:)
      )

    case "StopPhotoInterval":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Camera_StopPhotoIntervalRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Camera_StopPhotoIntervalResponse>(),
        interceptors: self.interceptors?.makeStopPhotoIntervalInterceptors() ?? [],
        userFunction: self.stopPhotoInterval(request:context:)
      )

    case "StartVideo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Camera_StartVideoRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Camera_StartVideoResponse>(),
        interceptors: self.interceptors?.makeStartVideoInterceptors() ?? [],
        userFunction: self.startVideo(request:context:)
      )

    case "StopVideo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Camera_StopVideoRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Camera_StopVideoResponse>(),
        interceptors: self.interceptors?.makeStopVideoInterceptors() ?? [],
        userFunction: self.stopVideo(request:context:)
      )

    case "StartVideoStreaming":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Camera_StartVideoStreamingRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Camera_StartVideoStreamingResponse>(),
        interceptors: self.interceptors?.makeStartVideoStreamingInterceptors() ?? [],
        userFunction: self.startVideoStreaming(request:context:)
      )

    case "StopVideoStreaming":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Camera_StopVideoStreamingRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Camera_StopVideoStreamingResponse>(),
        interceptors: self.interceptors?.makeStopVideoStreamingInterceptors() ?? [],
        userFunction: self.stopVideoStreaming(request:context:)
      )

    case "SetMode":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Camera_SetModeRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Camera_SetModeResponse>(),
        interceptors: self.interceptors?.makeSetModeInterceptors() ?? [],
        userFunction: self.setMode(request:context:)
      )

    case "ListPhotos":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Camera_ListPhotosRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Camera_ListPhotosResponse>(),
        interceptors: self.interceptors?.makeListPhotosInterceptors() ?? [],
        userFunction: self.listPhotos(request:context:)
      )

    case "SubscribeMode":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Camera_SubscribeModeRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Camera_ModeResponse>(),
        interceptors: self.interceptors?.makeSubscribeModeInterceptors() ?? [],
        userFunction: self.subscribeMode(request:context:)
      )

    case "SubscribeInformation":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Camera_SubscribeInformationRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Camera_InformationResponse>(),
        interceptors: self.interceptors?.makeSubscribeInformationInterceptors() ?? [],
        userFunction: self.subscribeInformation(request:context:)
      )

    case "SubscribeVideoStreamInfo":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Camera_SubscribeVideoStreamInfoRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Camera_VideoStreamInfoResponse>(),
        interceptors: self.interceptors?.makeSubscribeVideoStreamInfoInterceptors() ?? [],
        userFunction: self.subscribeVideoStreamInfo(request:context:)
      )

    case "SubscribeCaptureInfo":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Camera_SubscribeCaptureInfoRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Camera_CaptureInfoResponse>(),
        interceptors: self.interceptors?.makeSubscribeCaptureInfoInterceptors() ?? [],
        userFunction: self.subscribeCaptureInfo(request:context:)
      )

    case "SubscribeStatus":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Camera_SubscribeStatusRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Camera_StatusResponse>(),
        interceptors: self.interceptors?.makeSubscribeStatusInterceptors() ?? [],
        userFunction: self.subscribeStatus(request:context:)
      )

    case "SubscribeCurrentSettings":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Camera_SubscribeCurrentSettingsRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Camera_CurrentSettingsResponse>(),
        interceptors: self.interceptors?.makeSubscribeCurrentSettingsInterceptors() ?? [],
        userFunction: self.subscribeCurrentSettings(request:context:)
      )

    case "SubscribePossibleSettingOptions":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Camera_SubscribePossibleSettingOptionsRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Camera_PossibleSettingOptionsResponse>(),
        interceptors: self.interceptors?.makeSubscribePossibleSettingOptionsInterceptors() ?? [],
        userFunction: self.subscribePossibleSettingOptions(request:context:)
      )

    case "SetSetting":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Camera_SetSettingRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Camera_SetSettingResponse>(),
        interceptors: self.interceptors?.makeSetSettingInterceptors() ?? [],
        userFunction: self.setSetting(request:context:)
      )

    case "GetSetting":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Camera_GetSettingRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Camera_GetSettingResponse>(),
        interceptors: self.interceptors?.makeGetSettingInterceptors() ?? [],
        userFunction: self.getSetting(request:context:)
      )

    case "FormatStorage":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Camera_FormatStorageRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Camera_FormatStorageResponse>(),
        interceptors: self.interceptors?.makeFormatStorageInterceptors() ?? [],
        userFunction: self.formatStorage(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Mavsdk_Rpc_Camera_CameraServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'prepare'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePrepareInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Camera_PrepareRequest, Mavsdk_Rpc_Camera_PrepareResponse>]

  /// - Returns: Interceptors to use when handling 'takePhoto'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTakePhotoInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Camera_TakePhotoRequest, Mavsdk_Rpc_Camera_TakePhotoResponse>]

  /// - Returns: Interceptors to use when handling 'startPhotoInterval'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStartPhotoIntervalInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Camera_StartPhotoIntervalRequest, Mavsdk_Rpc_Camera_StartPhotoIntervalResponse>]

  /// - Returns: Interceptors to use when handling 'stopPhotoInterval'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStopPhotoIntervalInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Camera_StopPhotoIntervalRequest, Mavsdk_Rpc_Camera_StopPhotoIntervalResponse>]

  /// - Returns: Interceptors to use when handling 'startVideo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStartVideoInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Camera_StartVideoRequest, Mavsdk_Rpc_Camera_StartVideoResponse>]

  /// - Returns: Interceptors to use when handling 'stopVideo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStopVideoInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Camera_StopVideoRequest, Mavsdk_Rpc_Camera_StopVideoResponse>]

  /// - Returns: Interceptors to use when handling 'startVideoStreaming'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStartVideoStreamingInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Camera_StartVideoStreamingRequest, Mavsdk_Rpc_Camera_StartVideoStreamingResponse>]

  /// - Returns: Interceptors to use when handling 'stopVideoStreaming'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStopVideoStreamingInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Camera_StopVideoStreamingRequest, Mavsdk_Rpc_Camera_StopVideoStreamingResponse>]

  /// - Returns: Interceptors to use when handling 'setMode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetModeInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Camera_SetModeRequest, Mavsdk_Rpc_Camera_SetModeResponse>]

  /// - Returns: Interceptors to use when handling 'listPhotos'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListPhotosInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Camera_ListPhotosRequest, Mavsdk_Rpc_Camera_ListPhotosResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeMode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeModeInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Camera_SubscribeModeRequest, Mavsdk_Rpc_Camera_ModeResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeInformation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeInformationInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Camera_SubscribeInformationRequest, Mavsdk_Rpc_Camera_InformationResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeVideoStreamInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeVideoStreamInfoInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Camera_SubscribeVideoStreamInfoRequest, Mavsdk_Rpc_Camera_VideoStreamInfoResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeCaptureInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeCaptureInfoInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Camera_SubscribeCaptureInfoRequest, Mavsdk_Rpc_Camera_CaptureInfoResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeStatusInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Camera_SubscribeStatusRequest, Mavsdk_Rpc_Camera_StatusResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeCurrentSettings'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeCurrentSettingsInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Camera_SubscribeCurrentSettingsRequest, Mavsdk_Rpc_Camera_CurrentSettingsResponse>]

  /// - Returns: Interceptors to use when handling 'subscribePossibleSettingOptions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribePossibleSettingOptionsInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Camera_SubscribePossibleSettingOptionsRequest, Mavsdk_Rpc_Camera_PossibleSettingOptionsResponse>]

  /// - Returns: Interceptors to use when handling 'setSetting'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetSettingInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Camera_SetSettingRequest, Mavsdk_Rpc_Camera_SetSettingResponse>]

  /// - Returns: Interceptors to use when handling 'getSetting'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetSettingInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Camera_GetSettingRequest, Mavsdk_Rpc_Camera_GetSettingResponse>]

  /// - Returns: Interceptors to use when handling 'formatStorage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFormatStorageInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Camera_FormatStorageRequest, Mavsdk_Rpc_Camera_FormatStorageResponse>]
}
