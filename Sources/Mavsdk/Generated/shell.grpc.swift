//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: shell.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


///*
/// Allow to communicate with the vehicle's system shell.
///
/// Usage: instantiate `Mavsdk_Rpc_Shell_ShellServiceClient`, then call methods of this protocol to make API calls.
internal protocol Mavsdk_Rpc_Shell_ShellServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Mavsdk_Rpc_Shell_ShellServiceClientInterceptorFactoryProtocol? { get }

  func send(
    _ request: Mavsdk_Rpc_Shell_SendRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Shell_SendRequest, Mavsdk_Rpc_Shell_SendResponse>

  func subscribeReceive(
    _ request: Mavsdk_Rpc_Shell_SubscribeReceiveRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_Shell_ReceiveResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Shell_SubscribeReceiveRequest, Mavsdk_Rpc_Shell_ReceiveResponse>
}

extension Mavsdk_Rpc_Shell_ShellServiceClientProtocol {
  internal var serviceName: String {
    return "mavsdk.rpc.shell.ShellService"
  }

  ///
  /// Send a command line.
  ///
  /// - Parameters:
  ///   - request: Request to send to Send.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func send(
    _ request: Mavsdk_Rpc_Shell_SendRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Shell_SendRequest, Mavsdk_Rpc_Shell_SendResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.shell.ShellService/Send",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendInterceptors() ?? []
    )
  }

  ///
  /// Receive feedback from a sent command line.
  ///
  /// This subscription needs to be made before a command line is sent, otherwise, no response will be sent.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeReceive.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeReceive(
    _ request: Mavsdk_Rpc_Shell_SubscribeReceiveRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_Shell_ReceiveResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_Shell_SubscribeReceiveRequest, Mavsdk_Rpc_Shell_ReceiveResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.shell.ShellService/SubscribeReceive",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeReceiveInterceptors() ?? [],
      handler: handler
    )
  }
}

internal protocol Mavsdk_Rpc_Shell_ShellServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'send'.
  func makeSendInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Shell_SendRequest, Mavsdk_Rpc_Shell_SendResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeReceive'.
  func makeSubscribeReceiveInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_Shell_SubscribeReceiveRequest, Mavsdk_Rpc_Shell_ReceiveResponse>]
}

internal final class Mavsdk_Rpc_Shell_ShellServiceClient: Mavsdk_Rpc_Shell_ShellServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Mavsdk_Rpc_Shell_ShellServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the mavsdk.rpc.shell.ShellService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Mavsdk_Rpc_Shell_ShellServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///*
/// Allow to communicate with the vehicle's system shell.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Mavsdk_Rpc_Shell_ShellServiceProvider: CallHandlerProvider {
  var interceptors: Mavsdk_Rpc_Shell_ShellServiceServerInterceptorFactoryProtocol? { get }

  ///
  /// Send a command line.
  func send(request: Mavsdk_Rpc_Shell_SendRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Shell_SendResponse>

  ///
  /// Receive feedback from a sent command line.
  ///
  /// This subscription needs to be made before a command line is sent, otherwise, no response will be sent.
  func subscribeReceive(request: Mavsdk_Rpc_Shell_SubscribeReceiveRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_Shell_ReceiveResponse>) -> EventLoopFuture<GRPCStatus>
}

extension Mavsdk_Rpc_Shell_ShellServiceProvider {
  internal var serviceName: Substring { return "mavsdk.rpc.shell.ShellService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Send":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Shell_SendRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Shell_SendResponse>(),
        interceptors: self.interceptors?.makeSendInterceptors() ?? [],
        userFunction: self.send(request:context:)
      )

    case "SubscribeReceive":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_Shell_SubscribeReceiveRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_Shell_ReceiveResponse>(),
        interceptors: self.interceptors?.makeSubscribeReceiveInterceptors() ?? [],
        userFunction: self.subscribeReceive(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Mavsdk_Rpc_Shell_ShellServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'send'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Shell_SendRequest, Mavsdk_Rpc_Shell_SendResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeReceive'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeReceiveInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_Shell_SubscribeReceiveRequest, Mavsdk_Rpc_Shell_ReceiveResponse>]
}
