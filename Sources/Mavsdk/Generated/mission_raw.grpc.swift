//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: mission_raw.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Enable raw missions as exposed by MAVLink.
///
/// Usage: instantiate `Mavsdk_Rpc_MissionRaw_MissionRawServiceClient`, then call methods of this protocol to make API calls.
internal protocol Mavsdk_Rpc_MissionRaw_MissionRawServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Mavsdk_Rpc_MissionRaw_MissionRawServiceClientInterceptorFactoryProtocol? { get }

  func uploadMission(
    _ request: Mavsdk_Rpc_MissionRaw_UploadMissionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_MissionRaw_UploadMissionRequest, Mavsdk_Rpc_MissionRaw_UploadMissionResponse>

  func cancelMissionUpload(
    _ request: Mavsdk_Rpc_MissionRaw_CancelMissionUploadRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_MissionRaw_CancelMissionUploadRequest, Mavsdk_Rpc_MissionRaw_CancelMissionUploadResponse>

  func downloadMission(
    _ request: Mavsdk_Rpc_MissionRaw_DownloadMissionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_MissionRaw_DownloadMissionRequest, Mavsdk_Rpc_MissionRaw_DownloadMissionResponse>

  func cancelMissionDownload(
    _ request: Mavsdk_Rpc_MissionRaw_CancelMissionDownloadRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_MissionRaw_CancelMissionDownloadRequest, Mavsdk_Rpc_MissionRaw_CancelMissionDownloadResponse>

  func startMission(
    _ request: Mavsdk_Rpc_MissionRaw_StartMissionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_MissionRaw_StartMissionRequest, Mavsdk_Rpc_MissionRaw_StartMissionResponse>

  func pauseMission(
    _ request: Mavsdk_Rpc_MissionRaw_PauseMissionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_MissionRaw_PauseMissionRequest, Mavsdk_Rpc_MissionRaw_PauseMissionResponse>

  func clearMission(
    _ request: Mavsdk_Rpc_MissionRaw_ClearMissionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_MissionRaw_ClearMissionRequest, Mavsdk_Rpc_MissionRaw_ClearMissionResponse>

  func setCurrentMissionItem(
    _ request: Mavsdk_Rpc_MissionRaw_SetCurrentMissionItemRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_MissionRaw_SetCurrentMissionItemRequest, Mavsdk_Rpc_MissionRaw_SetCurrentMissionItemResponse>

  func subscribeMissionProgress(
    _ request: Mavsdk_Rpc_MissionRaw_SubscribeMissionProgressRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_MissionRaw_MissionProgressResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_MissionRaw_SubscribeMissionProgressRequest, Mavsdk_Rpc_MissionRaw_MissionProgressResponse>

  func subscribeMissionChanged(
    _ request: Mavsdk_Rpc_MissionRaw_SubscribeMissionChangedRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_MissionRaw_MissionChangedResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_MissionRaw_SubscribeMissionChangedRequest, Mavsdk_Rpc_MissionRaw_MissionChangedResponse>

  func importQgroundcontrolMission(
    _ request: Mavsdk_Rpc_MissionRaw_ImportQgroundcontrolMissionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_MissionRaw_ImportQgroundcontrolMissionRequest, Mavsdk_Rpc_MissionRaw_ImportQgroundcontrolMissionResponse>
}

extension Mavsdk_Rpc_MissionRaw_MissionRawServiceClientProtocol {
  internal var serviceName: String {
    return "mavsdk.rpc.mission_raw.MissionRawService"
  }

  ///
  /// Upload a list of raw mission items to the system.
  ///
  /// The raw mission items are uploaded to a drone. Once uploaded the mission
  /// can be started and executed even if the connection is lost.
  ///
  /// - Parameters:
  ///   - request: Request to send to UploadMission.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func uploadMission(
    _ request: Mavsdk_Rpc_MissionRaw_UploadMissionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_MissionRaw_UploadMissionRequest, Mavsdk_Rpc_MissionRaw_UploadMissionResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.mission_raw.MissionRawService/UploadMission",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadMissionInterceptors() ?? []
    )
  }

  ///
  /// Cancel an ongoing mission upload.
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelMissionUpload.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelMissionUpload(
    _ request: Mavsdk_Rpc_MissionRaw_CancelMissionUploadRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_MissionRaw_CancelMissionUploadRequest, Mavsdk_Rpc_MissionRaw_CancelMissionUploadResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.mission_raw.MissionRawService/CancelMissionUpload",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelMissionUploadInterceptors() ?? []
    )
  }

  ///
  /// Download a list of raw mission items from the system (asynchronous).
  ///
  /// - Parameters:
  ///   - request: Request to send to DownloadMission.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func downloadMission(
    _ request: Mavsdk_Rpc_MissionRaw_DownloadMissionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_MissionRaw_DownloadMissionRequest, Mavsdk_Rpc_MissionRaw_DownloadMissionResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.mission_raw.MissionRawService/DownloadMission",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDownloadMissionInterceptors() ?? []
    )
  }

  ///
  /// Cancel an ongoing mission download.
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelMissionDownload.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelMissionDownload(
    _ request: Mavsdk_Rpc_MissionRaw_CancelMissionDownloadRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_MissionRaw_CancelMissionDownloadRequest, Mavsdk_Rpc_MissionRaw_CancelMissionDownloadResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.mission_raw.MissionRawService/CancelMissionDownload",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelMissionDownloadInterceptors() ?? []
    )
  }

  ///
  /// Start the mission.
  ///
  /// A mission must be uploaded to the vehicle before this can be called.
  ///
  /// - Parameters:
  ///   - request: Request to send to StartMission.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func startMission(
    _ request: Mavsdk_Rpc_MissionRaw_StartMissionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_MissionRaw_StartMissionRequest, Mavsdk_Rpc_MissionRaw_StartMissionResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.mission_raw.MissionRawService/StartMission",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartMissionInterceptors() ?? []
    )
  }

  ///
  /// Pause the mission.
  ///
  /// Pausing the mission puts the vehicle into
  /// [HOLD mode](https://docs.px4.io/en/flight_modes/hold.html).
  /// A multicopter should just hover at the spot while a fixedwing vehicle should loiter
  /// around the location where it paused.
  ///
  /// - Parameters:
  ///   - request: Request to send to PauseMission.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pauseMission(
    _ request: Mavsdk_Rpc_MissionRaw_PauseMissionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_MissionRaw_PauseMissionRequest, Mavsdk_Rpc_MissionRaw_PauseMissionResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.mission_raw.MissionRawService/PauseMission",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePauseMissionInterceptors() ?? []
    )
  }

  ///
  /// Clear the mission saved on the vehicle.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClearMission.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func clearMission(
    _ request: Mavsdk_Rpc_MissionRaw_ClearMissionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_MissionRaw_ClearMissionRequest, Mavsdk_Rpc_MissionRaw_ClearMissionResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.mission_raw.MissionRawService/ClearMission",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClearMissionInterceptors() ?? []
    )
  }

  ///
  /// Sets the raw mission item index to go to.
  ///
  /// By setting the current index to 0, the mission is restarted from the beginning. If it is set
  /// to a specific index of a raw mission item, the mission will be set to this item.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetCurrentMissionItem.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setCurrentMissionItem(
    _ request: Mavsdk_Rpc_MissionRaw_SetCurrentMissionItemRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_MissionRaw_SetCurrentMissionItemRequest, Mavsdk_Rpc_MissionRaw_SetCurrentMissionItemResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.mission_raw.MissionRawService/SetCurrentMissionItem",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetCurrentMissionItemInterceptors() ?? []
    )
  }

  ///
  /// Subscribe to mission progress updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeMissionProgress.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeMissionProgress(
    _ request: Mavsdk_Rpc_MissionRaw_SubscribeMissionProgressRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_MissionRaw_MissionProgressResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_MissionRaw_SubscribeMissionProgressRequest, Mavsdk_Rpc_MissionRaw_MissionProgressResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.mission_raw.MissionRawService/SubscribeMissionProgress",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeMissionProgressInterceptors() ?? [],
      handler: handler
    )
  }

  ///*
  /// Subscribes to mission changed.
  ///
  /// This notification can be used to be informed if a ground station has
  /// been uploaded or changed by a ground station or companion computer.
  ///
  /// @param callback Callback to notify about change.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeMissionChanged.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeMissionChanged(
    _ request: Mavsdk_Rpc_MissionRaw_SubscribeMissionChangedRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_MissionRaw_MissionChangedResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_MissionRaw_SubscribeMissionChangedRequest, Mavsdk_Rpc_MissionRaw_MissionChangedResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.mission_raw.MissionRawService/SubscribeMissionChanged",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeMissionChangedInterceptors() ?? [],
      handler: handler
    )
  }

  ///
  /// Import a QGroundControl missions in JSON .plan format.
  ///
  /// Supported:
  /// - Waypoints
  /// - Survey
  /// Not supported:
  /// - Structure Scan
  ///
  /// - Parameters:
  ///   - request: Request to send to ImportQgroundcontrolMission.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func importQgroundcontrolMission(
    _ request: Mavsdk_Rpc_MissionRaw_ImportQgroundcontrolMissionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_MissionRaw_ImportQgroundcontrolMissionRequest, Mavsdk_Rpc_MissionRaw_ImportQgroundcontrolMissionResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.mission_raw.MissionRawService/ImportQgroundcontrolMission",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeImportQgroundcontrolMissionInterceptors() ?? []
    )
  }
}

internal protocol Mavsdk_Rpc_MissionRaw_MissionRawServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'uploadMission'.
  func makeUploadMissionInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_MissionRaw_UploadMissionRequest, Mavsdk_Rpc_MissionRaw_UploadMissionResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelMissionUpload'.
  func makeCancelMissionUploadInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_MissionRaw_CancelMissionUploadRequest, Mavsdk_Rpc_MissionRaw_CancelMissionUploadResponse>]

  /// - Returns: Interceptors to use when invoking 'downloadMission'.
  func makeDownloadMissionInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_MissionRaw_DownloadMissionRequest, Mavsdk_Rpc_MissionRaw_DownloadMissionResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelMissionDownload'.
  func makeCancelMissionDownloadInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_MissionRaw_CancelMissionDownloadRequest, Mavsdk_Rpc_MissionRaw_CancelMissionDownloadResponse>]

  /// - Returns: Interceptors to use when invoking 'startMission'.
  func makeStartMissionInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_MissionRaw_StartMissionRequest, Mavsdk_Rpc_MissionRaw_StartMissionResponse>]

  /// - Returns: Interceptors to use when invoking 'pauseMission'.
  func makePauseMissionInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_MissionRaw_PauseMissionRequest, Mavsdk_Rpc_MissionRaw_PauseMissionResponse>]

  /// - Returns: Interceptors to use when invoking 'clearMission'.
  func makeClearMissionInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_MissionRaw_ClearMissionRequest, Mavsdk_Rpc_MissionRaw_ClearMissionResponse>]

  /// - Returns: Interceptors to use when invoking 'setCurrentMissionItem'.
  func makeSetCurrentMissionItemInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_MissionRaw_SetCurrentMissionItemRequest, Mavsdk_Rpc_MissionRaw_SetCurrentMissionItemResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeMissionProgress'.
  func makeSubscribeMissionProgressInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_MissionRaw_SubscribeMissionProgressRequest, Mavsdk_Rpc_MissionRaw_MissionProgressResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeMissionChanged'.
  func makeSubscribeMissionChangedInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_MissionRaw_SubscribeMissionChangedRequest, Mavsdk_Rpc_MissionRaw_MissionChangedResponse>]

  /// - Returns: Interceptors to use when invoking 'importQgroundcontrolMission'.
  func makeImportQgroundcontrolMissionInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_MissionRaw_ImportQgroundcontrolMissionRequest, Mavsdk_Rpc_MissionRaw_ImportQgroundcontrolMissionResponse>]
}

internal final class Mavsdk_Rpc_MissionRaw_MissionRawServiceClient: Mavsdk_Rpc_MissionRaw_MissionRawServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Mavsdk_Rpc_MissionRaw_MissionRawServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the mavsdk.rpc.mission_raw.MissionRawService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Mavsdk_Rpc_MissionRaw_MissionRawServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Enable raw missions as exposed by MAVLink.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Mavsdk_Rpc_MissionRaw_MissionRawServiceProvider: CallHandlerProvider {
  var interceptors: Mavsdk_Rpc_MissionRaw_MissionRawServiceServerInterceptorFactoryProtocol? { get }

  ///
  /// Upload a list of raw mission items to the system.
  ///
  /// The raw mission items are uploaded to a drone. Once uploaded the mission
  /// can be started and executed even if the connection is lost.
  func uploadMission(request: Mavsdk_Rpc_MissionRaw_UploadMissionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_MissionRaw_UploadMissionResponse>

  ///
  /// Cancel an ongoing mission upload.
  func cancelMissionUpload(request: Mavsdk_Rpc_MissionRaw_CancelMissionUploadRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_MissionRaw_CancelMissionUploadResponse>

  ///
  /// Download a list of raw mission items from the system (asynchronous).
  func downloadMission(request: Mavsdk_Rpc_MissionRaw_DownloadMissionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_MissionRaw_DownloadMissionResponse>

  ///
  /// Cancel an ongoing mission download.
  func cancelMissionDownload(request: Mavsdk_Rpc_MissionRaw_CancelMissionDownloadRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_MissionRaw_CancelMissionDownloadResponse>

  ///
  /// Start the mission.
  ///
  /// A mission must be uploaded to the vehicle before this can be called.
  func startMission(request: Mavsdk_Rpc_MissionRaw_StartMissionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_MissionRaw_StartMissionResponse>

  ///
  /// Pause the mission.
  ///
  /// Pausing the mission puts the vehicle into
  /// [HOLD mode](https://docs.px4.io/en/flight_modes/hold.html).
  /// A multicopter should just hover at the spot while a fixedwing vehicle should loiter
  /// around the location where it paused.
  func pauseMission(request: Mavsdk_Rpc_MissionRaw_PauseMissionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_MissionRaw_PauseMissionResponse>

  ///
  /// Clear the mission saved on the vehicle.
  func clearMission(request: Mavsdk_Rpc_MissionRaw_ClearMissionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_MissionRaw_ClearMissionResponse>

  ///
  /// Sets the raw mission item index to go to.
  ///
  /// By setting the current index to 0, the mission is restarted from the beginning. If it is set
  /// to a specific index of a raw mission item, the mission will be set to this item.
  func setCurrentMissionItem(request: Mavsdk_Rpc_MissionRaw_SetCurrentMissionItemRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_MissionRaw_SetCurrentMissionItemResponse>

  ///
  /// Subscribe to mission progress updates.
  func subscribeMissionProgress(request: Mavsdk_Rpc_MissionRaw_SubscribeMissionProgressRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_MissionRaw_MissionProgressResponse>) -> EventLoopFuture<GRPCStatus>

  ///*
  /// Subscribes to mission changed.
  ///
  /// This notification can be used to be informed if a ground station has
  /// been uploaded or changed by a ground station or companion computer.
  ///
  /// @param callback Callback to notify about change.
  func subscribeMissionChanged(request: Mavsdk_Rpc_MissionRaw_SubscribeMissionChangedRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_MissionRaw_MissionChangedResponse>) -> EventLoopFuture<GRPCStatus>

  ///
  /// Import a QGroundControl missions in JSON .plan format.
  ///
  /// Supported:
  /// - Waypoints
  /// - Survey
  /// Not supported:
  /// - Structure Scan
  func importQgroundcontrolMission(request: Mavsdk_Rpc_MissionRaw_ImportQgroundcontrolMissionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_MissionRaw_ImportQgroundcontrolMissionResponse>
}

extension Mavsdk_Rpc_MissionRaw_MissionRawServiceProvider {
  internal var serviceName: Substring { return "mavsdk.rpc.mission_raw.MissionRawService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "UploadMission":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_MissionRaw_UploadMissionRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_MissionRaw_UploadMissionResponse>(),
        interceptors: self.interceptors?.makeUploadMissionInterceptors() ?? [],
        userFunction: self.uploadMission(request:context:)
      )

    case "CancelMissionUpload":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_MissionRaw_CancelMissionUploadRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_MissionRaw_CancelMissionUploadResponse>(),
        interceptors: self.interceptors?.makeCancelMissionUploadInterceptors() ?? [],
        userFunction: self.cancelMissionUpload(request:context:)
      )

    case "DownloadMission":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_MissionRaw_DownloadMissionRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_MissionRaw_DownloadMissionResponse>(),
        interceptors: self.interceptors?.makeDownloadMissionInterceptors() ?? [],
        userFunction: self.downloadMission(request:context:)
      )

    case "CancelMissionDownload":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_MissionRaw_CancelMissionDownloadRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_MissionRaw_CancelMissionDownloadResponse>(),
        interceptors: self.interceptors?.makeCancelMissionDownloadInterceptors() ?? [],
        userFunction: self.cancelMissionDownload(request:context:)
      )

    case "StartMission":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_MissionRaw_StartMissionRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_MissionRaw_StartMissionResponse>(),
        interceptors: self.interceptors?.makeStartMissionInterceptors() ?? [],
        userFunction: self.startMission(request:context:)
      )

    case "PauseMission":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_MissionRaw_PauseMissionRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_MissionRaw_PauseMissionResponse>(),
        interceptors: self.interceptors?.makePauseMissionInterceptors() ?? [],
        userFunction: self.pauseMission(request:context:)
      )

    case "ClearMission":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_MissionRaw_ClearMissionRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_MissionRaw_ClearMissionResponse>(),
        interceptors: self.interceptors?.makeClearMissionInterceptors() ?? [],
        userFunction: self.clearMission(request:context:)
      )

    case "SetCurrentMissionItem":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_MissionRaw_SetCurrentMissionItemRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_MissionRaw_SetCurrentMissionItemResponse>(),
        interceptors: self.interceptors?.makeSetCurrentMissionItemInterceptors() ?? [],
        userFunction: self.setCurrentMissionItem(request:context:)
      )

    case "SubscribeMissionProgress":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_MissionRaw_SubscribeMissionProgressRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_MissionRaw_MissionProgressResponse>(),
        interceptors: self.interceptors?.makeSubscribeMissionProgressInterceptors() ?? [],
        userFunction: self.subscribeMissionProgress(request:context:)
      )

    case "SubscribeMissionChanged":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_MissionRaw_SubscribeMissionChangedRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_MissionRaw_MissionChangedResponse>(),
        interceptors: self.interceptors?.makeSubscribeMissionChangedInterceptors() ?? [],
        userFunction: self.subscribeMissionChanged(request:context:)
      )

    case "ImportQgroundcontrolMission":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_MissionRaw_ImportQgroundcontrolMissionRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_MissionRaw_ImportQgroundcontrolMissionResponse>(),
        interceptors: self.interceptors?.makeImportQgroundcontrolMissionInterceptors() ?? [],
        userFunction: self.importQgroundcontrolMission(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Mavsdk_Rpc_MissionRaw_MissionRawServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'uploadMission'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUploadMissionInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_MissionRaw_UploadMissionRequest, Mavsdk_Rpc_MissionRaw_UploadMissionResponse>]

  /// - Returns: Interceptors to use when handling 'cancelMissionUpload'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelMissionUploadInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_MissionRaw_CancelMissionUploadRequest, Mavsdk_Rpc_MissionRaw_CancelMissionUploadResponse>]

  /// - Returns: Interceptors to use when handling 'downloadMission'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDownloadMissionInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_MissionRaw_DownloadMissionRequest, Mavsdk_Rpc_MissionRaw_DownloadMissionResponse>]

  /// - Returns: Interceptors to use when handling 'cancelMissionDownload'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelMissionDownloadInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_MissionRaw_CancelMissionDownloadRequest, Mavsdk_Rpc_MissionRaw_CancelMissionDownloadResponse>]

  /// - Returns: Interceptors to use when handling 'startMission'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStartMissionInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_MissionRaw_StartMissionRequest, Mavsdk_Rpc_MissionRaw_StartMissionResponse>]

  /// - Returns: Interceptors to use when handling 'pauseMission'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePauseMissionInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_MissionRaw_PauseMissionRequest, Mavsdk_Rpc_MissionRaw_PauseMissionResponse>]

  /// - Returns: Interceptors to use when handling 'clearMission'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClearMissionInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_MissionRaw_ClearMissionRequest, Mavsdk_Rpc_MissionRaw_ClearMissionResponse>]

  /// - Returns: Interceptors to use when handling 'setCurrentMissionItem'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetCurrentMissionItemInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_MissionRaw_SetCurrentMissionItemRequest, Mavsdk_Rpc_MissionRaw_SetCurrentMissionItemResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeMissionProgress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeMissionProgressInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_MissionRaw_SubscribeMissionProgressRequest, Mavsdk_Rpc_MissionRaw_MissionProgressResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeMissionChanged'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeMissionChangedInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_MissionRaw_SubscribeMissionChangedRequest, Mavsdk_Rpc_MissionRaw_MissionChangedResponse>]

  /// - Returns: Interceptors to use when handling 'importQgroundcontrolMission'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeImportQgroundcontrolMissionInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_MissionRaw_ImportQgroundcontrolMissionRequest, Mavsdk_Rpc_MissionRaw_ImportQgroundcontrolMissionResponse>]
}
