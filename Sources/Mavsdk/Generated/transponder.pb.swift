// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: transponder.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ADSB classification for the type of vehicle emitting the transponder signal.
enum Mavsdk_Rpc_Transponder_AdsbEmitterType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// No emitter info.
  case noInfo // = 0

  /// Light emitter.
  case light // = 1

  /// Small emitter.
  case small // = 2

  /// Large emitter.
  case large // = 3

  /// High vortex emitter.
  case highVortexLarge // = 4

  /// Heavy emitter.
  case heavy // = 5

  /// Highly maneuverable emitter.
  case highlyManuv // = 6

  /// Rotorcraft emitter.
  case rotocraft // = 7

  /// Unassigned emitter.
  case unassigned // = 8

  /// Glider emitter.
  case glider // = 9

  /// Lighter air emitter.
  case lighterAir // = 10

  /// Parachute emitter.
  case parachute // = 11

  /// Ultra light emitter.
  case ultraLight // = 12

  /// Unassigned2 emitter.
  case unassigned2 // = 13

  /// UAV emitter.
  case uav // = 14

  /// Space emitter.
  case space // = 15

  /// Unassigned3 emitter.
  case unassgined3 // = 16

  /// Emergency emitter.
  case emergencySurface // = 17

  /// Service surface emitter.
  case serviceSurface // = 18

  /// Point obstacle emitter.
  case pointObstacle // = 19
  case UNRECOGNIZED(Int)

  init() {
    self = .noInfo
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noInfo
    case 1: self = .light
    case 2: self = .small
    case 3: self = .large
    case 4: self = .highVortexLarge
    case 5: self = .heavy
    case 6: self = .highlyManuv
    case 7: self = .rotocraft
    case 8: self = .unassigned
    case 9: self = .glider
    case 10: self = .lighterAir
    case 11: self = .parachute
    case 12: self = .ultraLight
    case 13: self = .unassigned2
    case 14: self = .uav
    case 15: self = .space
    case 16: self = .unassgined3
    case 17: self = .emergencySurface
    case 18: self = .serviceSurface
    case 19: self = .pointObstacle
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .noInfo: return 0
    case .light: return 1
    case .small: return 2
    case .large: return 3
    case .highVortexLarge: return 4
    case .heavy: return 5
    case .highlyManuv: return 6
    case .rotocraft: return 7
    case .unassigned: return 8
    case .glider: return 9
    case .lighterAir: return 10
    case .parachute: return 11
    case .ultraLight: return 12
    case .unassigned2: return 13
    case .uav: return 14
    case .space: return 15
    case .unassgined3: return 16
    case .emergencySurface: return 17
    case .serviceSurface: return 18
    case .pointObstacle: return 19
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Mavsdk_Rpc_Transponder_AdsbEmitterType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Mavsdk_Rpc_Transponder_AdsbEmitterType] = [
    .noInfo,
    .light,
    .small,
    .large,
    .highVortexLarge,
    .heavy,
    .highlyManuv,
    .rotocraft,
    .unassigned,
    .glider,
    .lighterAir,
    .parachute,
    .ultraLight,
    .unassigned2,
    .uav,
    .space,
    .unassgined3,
    .emergencySurface,
    .serviceSurface,
    .pointObstacle,
  ]
}

#endif  // swift(>=4.2)

struct Mavsdk_Rpc_Transponder_SubscribeTransponderRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Transponder_TransponderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The next detection
  var transponder: Mavsdk_Rpc_Transponder_AdsbVehicle {
    get {return _transponder ?? Mavsdk_Rpc_Transponder_AdsbVehicle()}
    set {_transponder = newValue}
  }
  /// Returns true if `transponder` has been explicitly set.
  var hasTransponder: Bool {return self._transponder != nil}
  /// Clears the value of `transponder`. Subsequent reads from it will return its default value.
  mutating func clearTransponder() {self._transponder = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _transponder: Mavsdk_Rpc_Transponder_AdsbVehicle? = nil
}

struct Mavsdk_Rpc_Transponder_SetRateTransponderRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The requested rate (in Hertz)
  var rateHz: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Transponder_SetRateTransponderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var transponderResult: Mavsdk_Rpc_Transponder_TransponderResult {
    get {return _transponderResult ?? Mavsdk_Rpc_Transponder_TransponderResult()}
    set {_transponderResult = newValue}
  }
  /// Returns true if `transponderResult` has been explicitly set.
  var hasTransponderResult: Bool {return self._transponderResult != nil}
  /// Clears the value of `transponderResult`. Subsequent reads from it will return its default value.
  mutating func clearTransponderResult() {self._transponderResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _transponderResult: Mavsdk_Rpc_Transponder_TransponderResult? = nil
}

/// ADSB Vehicle type.
struct Mavsdk_Rpc_Transponder_AdsbVehicle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ICAO (International Civil Aviation Organization) unique worldwide identifier
  var icaoAddress: UInt32 = 0

  /// Latitude in degrees (range: -90 to +90)
  var latitudeDeg: Double = 0

  /// Longitude in degrees (range: -180 to +180).
  var longitudeDeg: Double = 0

  /// Altitude AMSL (above mean sea level) in metres
  var absoluteAltitudeM: Float = 0

  /// Course over ground, in degrees
  var headingDeg: Float = 0

  /// The horizontal velocity in metres/second
  var horizontalVelocityMS: Float = 0

  /// The vertical velocity in metres/second. Positive is up.
  var verticalVelocityMS: Float = 0

  /// The callsign
  var callsign: String = String()

  /// ADSB emitter type.
  var emitterType: Mavsdk_Rpc_Transponder_AdsbEmitterType = .noInfo

  /// Squawk code.
  var squawk: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Result type.
struct Mavsdk_Rpc_Transponder_TransponderResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Result enum value
  var result: Mavsdk_Rpc_Transponder_TransponderResult.Result = .unknown

  /// Human-readable English string describing the result
  var resultStr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Possible results returned for transponder requests.
  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// Unknown result
    case unknown // = 0

    /// Success: the transponder command was accepted by the vehicle
    case success // = 1

    /// No system connected
    case noSystem // = 2

    /// Connection error
    case connectionError // = 3

    /// Vehicle is busy
    case busy // = 4

    /// Command refused by vehicle
    case commandDenied // = 5

    /// Request timed out
    case timeout // = 6
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .success
      case 2: self = .noSystem
      case 3: self = .connectionError
      case 4: self = .busy
      case 5: self = .commandDenied
      case 6: self = .timeout
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .success: return 1
      case .noSystem: return 2
      case .connectionError: return 3
      case .busy: return 4
      case .commandDenied: return 5
      case .timeout: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Mavsdk_Rpc_Transponder_TransponderResult.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Mavsdk_Rpc_Transponder_TransponderResult.Result] = [
    .unknown,
    .success,
    .noSystem,
    .connectionError,
    .busy,
    .commandDenied,
    .timeout,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "mavsdk.rpc.transponder"

extension Mavsdk_Rpc_Transponder_AdsbEmitterType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ADSB_EMITTER_TYPE_NO_INFO"),
    1: .same(proto: "ADSB_EMITTER_TYPE_LIGHT"),
    2: .same(proto: "ADSB_EMITTER_TYPE_SMALL"),
    3: .same(proto: "ADSB_EMITTER_TYPE_LARGE"),
    4: .same(proto: "ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE"),
    5: .same(proto: "ADSB_EMITTER_TYPE_HEAVY"),
    6: .same(proto: "ADSB_EMITTER_TYPE_HIGHLY_MANUV"),
    7: .same(proto: "ADSB_EMITTER_TYPE_ROTOCRAFT"),
    8: .same(proto: "ADSB_EMITTER_TYPE_UNASSIGNED"),
    9: .same(proto: "ADSB_EMITTER_TYPE_GLIDER"),
    10: .same(proto: "ADSB_EMITTER_TYPE_LIGHTER_AIR"),
    11: .same(proto: "ADSB_EMITTER_TYPE_PARACHUTE"),
    12: .same(proto: "ADSB_EMITTER_TYPE_ULTRA_LIGHT"),
    13: .same(proto: "ADSB_EMITTER_TYPE_UNASSIGNED2"),
    14: .same(proto: "ADSB_EMITTER_TYPE_UAV"),
    15: .same(proto: "ADSB_EMITTER_TYPE_SPACE"),
    16: .same(proto: "ADSB_EMITTER_TYPE_UNASSGINED3"),
    17: .same(proto: "ADSB_EMITTER_TYPE_EMERGENCY_SURFACE"),
    18: .same(proto: "ADSB_EMITTER_TYPE_SERVICE_SURFACE"),
    19: .same(proto: "ADSB_EMITTER_TYPE_POINT_OBSTACLE"),
  ]
}

extension Mavsdk_Rpc_Transponder_SubscribeTransponderRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeTransponderRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Transponder_SubscribeTransponderRequest, rhs: Mavsdk_Rpc_Transponder_SubscribeTransponderRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Transponder_TransponderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransponderResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transponder"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._transponder) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._transponder {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Transponder_TransponderResponse, rhs: Mavsdk_Rpc_Transponder_TransponderResponse) -> Bool {
    if lhs._transponder != rhs._transponder {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Transponder_SetRateTransponderRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetRateTransponderRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rate_hz"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.rateHz) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rateHz != 0 {
      try visitor.visitSingularDoubleField(value: self.rateHz, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Transponder_SetRateTransponderRequest, rhs: Mavsdk_Rpc_Transponder_SetRateTransponderRequest) -> Bool {
    if lhs.rateHz != rhs.rateHz {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Transponder_SetRateTransponderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetRateTransponderResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transponder_result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._transponderResult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._transponderResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Transponder_SetRateTransponderResponse, rhs: Mavsdk_Rpc_Transponder_SetRateTransponderResponse) -> Bool {
    if lhs._transponderResult != rhs._transponderResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Transponder_AdsbVehicle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdsbVehicle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "icao_address"),
    2: .standard(proto: "latitude_deg"),
    3: .standard(proto: "longitude_deg"),
    5: .standard(proto: "absolute_altitude_m"),
    6: .standard(proto: "heading_deg"),
    7: .standard(proto: "horizontal_velocity_m_s"),
    8: .standard(proto: "vertical_velocity_m_s"),
    9: .same(proto: "callsign"),
    10: .standard(proto: "emitter_type"),
    13: .same(proto: "squawk"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.icaoAddress) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.latitudeDeg) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.longitudeDeg) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self.absoluteAltitudeM) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self.headingDeg) }()
      case 7: try { try decoder.decodeSingularFloatField(value: &self.horizontalVelocityMS) }()
      case 8: try { try decoder.decodeSingularFloatField(value: &self.verticalVelocityMS) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.callsign) }()
      case 10: try { try decoder.decodeSingularEnumField(value: &self.emitterType) }()
      case 13: try { try decoder.decodeSingularUInt32Field(value: &self.squawk) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.icaoAddress != 0 {
      try visitor.visitSingularUInt32Field(value: self.icaoAddress, fieldNumber: 1)
    }
    if self.latitudeDeg != 0 {
      try visitor.visitSingularDoubleField(value: self.latitudeDeg, fieldNumber: 2)
    }
    if self.longitudeDeg != 0 {
      try visitor.visitSingularDoubleField(value: self.longitudeDeg, fieldNumber: 3)
    }
    if self.absoluteAltitudeM != 0 {
      try visitor.visitSingularFloatField(value: self.absoluteAltitudeM, fieldNumber: 5)
    }
    if self.headingDeg != 0 {
      try visitor.visitSingularFloatField(value: self.headingDeg, fieldNumber: 6)
    }
    if self.horizontalVelocityMS != 0 {
      try visitor.visitSingularFloatField(value: self.horizontalVelocityMS, fieldNumber: 7)
    }
    if self.verticalVelocityMS != 0 {
      try visitor.visitSingularFloatField(value: self.verticalVelocityMS, fieldNumber: 8)
    }
    if !self.callsign.isEmpty {
      try visitor.visitSingularStringField(value: self.callsign, fieldNumber: 9)
    }
    if self.emitterType != .noInfo {
      try visitor.visitSingularEnumField(value: self.emitterType, fieldNumber: 10)
    }
    if self.squawk != 0 {
      try visitor.visitSingularUInt32Field(value: self.squawk, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Transponder_AdsbVehicle, rhs: Mavsdk_Rpc_Transponder_AdsbVehicle) -> Bool {
    if lhs.icaoAddress != rhs.icaoAddress {return false}
    if lhs.latitudeDeg != rhs.latitudeDeg {return false}
    if lhs.longitudeDeg != rhs.longitudeDeg {return false}
    if lhs.absoluteAltitudeM != rhs.absoluteAltitudeM {return false}
    if lhs.headingDeg != rhs.headingDeg {return false}
    if lhs.horizontalVelocityMS != rhs.horizontalVelocityMS {return false}
    if lhs.verticalVelocityMS != rhs.verticalVelocityMS {return false}
    if lhs.callsign != rhs.callsign {return false}
    if lhs.emitterType != rhs.emitterType {return false}
    if lhs.squawk != rhs.squawk {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Transponder_TransponderResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransponderResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "result_str"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.resultStr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unknown {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if !self.resultStr.isEmpty {
      try visitor.visitSingularStringField(value: self.resultStr, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Transponder_TransponderResult, rhs: Mavsdk_Rpc_Transponder_TransponderResult) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.resultStr != rhs.resultStr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Transponder_TransponderResult.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RESULT_UNKNOWN"),
    1: .same(proto: "RESULT_SUCCESS"),
    2: .same(proto: "RESULT_NO_SYSTEM"),
    3: .same(proto: "RESULT_CONNECTION_ERROR"),
    4: .same(proto: "RESULT_BUSY"),
    5: .same(proto: "RESULT_COMMAND_DENIED"),
    6: .same(proto: "RESULT_TIMEOUT"),
  ]
}
